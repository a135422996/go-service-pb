// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.4
// source: user.proto

package user

import (
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Account
type AccountVo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserUuid          string                 `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`                                // 用户UUID
	ProductCode       string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`                          // 产品ID
	Username          string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                                // 用户名
	Password          string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                                // 密码
	AccountKey        string                 `protobuf:"bytes,6,opt,name=accountKey,proto3" json:"accountKey,omitempty"`                            // 账号KEY
	AccountPassword   string                 `protobuf:"bytes,7,opt,name=accountPassword,proto3" json:"accountPassword,omitempty"`                  // 账号密码
	WhitelistUser     common.BoolInt         `protobuf:"varint,8,opt,name=whitelistUser,proto3,enum=common.BoolInt" json:"whitelistUser,omitempty"` // 白名单用户
	Area              string                 `protobuf:"bytes,9,opt,name=area,proto3" json:"area,omitempty"`                                        // 指定地区
	AccountType       int64                  `protobuf:"varint,10,opt,name=accountType,proto3" json:"accountType,omitempty"`                        // 账号类型
	RegistMode        int64                  `protobuf:"varint,11,opt,name=registMode,proto3" json:"registMode,omitempty"`                          // 注册方式
	Activated         common.BoolInt         `protobuf:"varint,12,opt,name=activated,proto3,enum=common.BoolInt" json:"activated,omitempty"`        // 是否激活
	Config            string                 `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`                                   // 配置
	Status            common.Status          `protobuf:"varint,14,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`               // 状态
	Remark            string                 `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`                                   // 备注
	DeviceId          string                 `protobuf:"bytes,16,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                               // 设备ID
	Platform          string                 `protobuf:"bytes,17,opt,name=platform,proto3" json:"platform,omitempty"`                               // 平台
	Channel           string                 `protobuf:"bytes,18,opt,name=channel,proto3" json:"channel,omitempty"`                                 // 渠道
	DeviceModel       string                 `protobuf:"bytes,19,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`                         // 设备型号
	DeviceOs          string                 `protobuf:"bytes,20,opt,name=deviceOs,proto3" json:"deviceOs,omitempty"`                               // 设备系统
	Timezone          int64                  `protobuf:"varint,21,opt,name=timezone,proto3" json:"timezone,omitempty"`                              // 时区
	Lang              string                 `protobuf:"bytes,22,opt,name=lang,proto3" json:"lang,omitempty"`                                       // 语言
	AppVer            int64                  `protobuf:"varint,23,opt,name=appVer,proto3" json:"appVer,omitempty"`                                  // 产品版本号
	Ip                string                 `protobuf:"bytes,24,opt,name=ip,proto3" json:"ip,omitempty"`
	Country           string                 `protobuf:"bytes,25,opt,name=country,proto3" json:"country,omitempty"`   // 国家
	Province          string                 `protobuf:"bytes,26,opt,name=province,proto3" json:"province,omitempty"` // 省份
	City              string                 `protobuf:"bytes,27,opt,name=city,proto3" json:"city,omitempty"`         // 城市
	Isp               string                 `protobuf:"bytes,28,opt,name=isp,proto3" json:"isp,omitempty"`           // ISP
	CreateTime        int64                  `protobuf:"varint,29,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime        int64                  `protobuf:"varint,30,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version           string                 `protobuf:"bytes,31,opt,name=version,proto3" json:"version,omitempty"`                      // 数据版本
	SessionId         string                 `protobuf:"bytes,32,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                  // 登录凭证
	SessionCreateTime int64                  `protobuf:"varint,33,opt,name=sessionCreateTime,proto3" json:"sessionCreateTime,omitempty"` // 凭证创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccountVo) Reset() {
	*x = AccountVo{}
	mi := &file_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountVo) ProtoMessage() {}

func (x *AccountVo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountVo.ProtoReflect.Descriptor instead.
func (*AccountVo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *AccountVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountVo) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AccountVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *AccountVo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountVo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccountVo) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *AccountVo) GetAccountPassword() string {
	if x != nil {
		return x.AccountPassword
	}
	return ""
}

func (x *AccountVo) GetWhitelistUser() common.BoolInt {
	if x != nil {
		return x.WhitelistUser
	}
	return common.BoolInt(0)
}

func (x *AccountVo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *AccountVo) GetAccountType() int64 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *AccountVo) GetRegistMode() int64 {
	if x != nil {
		return x.RegistMode
	}
	return 0
}

func (x *AccountVo) GetActivated() common.BoolInt {
	if x != nil {
		return x.Activated
	}
	return common.BoolInt(0)
}

func (x *AccountVo) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *AccountVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *AccountVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AccountVo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AccountVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *AccountVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *AccountVo) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *AccountVo) GetDeviceOs() string {
	if x != nil {
		return x.DeviceOs
	}
	return ""
}

func (x *AccountVo) GetTimezone() int64 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

func (x *AccountVo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *AccountVo) GetAppVer() int64 {
	if x != nil {
		return x.AppVer
	}
	return 0
}

func (x *AccountVo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccountVo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AccountVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *AccountVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AccountVo) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *AccountVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AccountVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AccountVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AccountVo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AccountVo) GetSessionCreateTime() int64 {
	if x != nil {
		return x.SessionCreateTime
	}
	return 0
}

type AccountListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *AccountVo             `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountListReq) Reset() {
	*x = AccountListReq{}
	mi := &file_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountListReq) ProtoMessage() {}

func (x *AccountListReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountListReq.ProtoReflect.Descriptor instead.
func (*AccountListReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *AccountListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AccountListReq) GetVo() *AccountVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AccountListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AccountVo           `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountListResp) Reset() {
	*x = AccountListResp{}
	mi := &file_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountListResp) ProtoMessage() {}

func (x *AccountListResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountListResp.ProtoReflect.Descriptor instead.
func (*AccountListResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *AccountListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AccountListResp) GetList() []*AccountVo {
	if x != nil {
		return x.List
	}
	return nil
}

// AccountDevice
type AccountDeviceVo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId         int64                  `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`                 // 用户ID
	DeviceId          int64                  `protobuf:"varint,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                   // 设备ID
	SessionId         string                 `protobuf:"bytes,4,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                  // 登录凭证
	SessionCreateTime int64                  `protobuf:"varint,5,opt,name=sessionCreateTime,proto3" json:"sessionCreateTime,omitempty"` // 凭证创建时间
	UpdateTime        int64                  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreateTime        int64                  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccountDeviceVo) Reset() {
	*x = AccountDeviceVo{}
	mi := &file_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountDeviceVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDeviceVo) ProtoMessage() {}

func (x *AccountDeviceVo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDeviceVo.ProtoReflect.Descriptor instead.
func (*AccountDeviceVo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *AccountDeviceVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountDeviceVo) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AccountDeviceVo) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *AccountDeviceVo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AccountDeviceVo) GetSessionCreateTime() int64 {
	if x != nil {
		return x.SessionCreateTime
	}
	return 0
}

func (x *AccountDeviceVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AccountDeviceVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AccountDeviceListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *AccountDeviceVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountDeviceListReq) Reset() {
	*x = AccountDeviceListReq{}
	mi := &file_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountDeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDeviceListReq) ProtoMessage() {}

func (x *AccountDeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDeviceListReq.ProtoReflect.Descriptor instead.
func (*AccountDeviceListReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *AccountDeviceListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AccountDeviceListReq) GetVo() *AccountDeviceVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AccountDeviceListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AccountDeviceVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountDeviceListResp) Reset() {
	*x = AccountDeviceListResp{}
	mi := &file_user_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountDeviceListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDeviceListResp) ProtoMessage() {}

func (x *AccountDeviceListResp) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDeviceListResp.ProtoReflect.Descriptor instead.
func (*AccountDeviceListResp) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *AccountDeviceListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AccountDeviceListResp) GetList() []*AccountDeviceVo {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceVo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode     string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	DeviceId        string                 `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	AccountKey      string                 `protobuf:"bytes,4,opt,name=accountKey,proto3" json:"accountKey,omitempty"`
	AccountPassword string                 `protobuf:"bytes,5,opt,name=accountPassword,proto3" json:"accountPassword,omitempty"`
	Platform        string                 `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel         string                 `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
	DeviceModel     string                 `protobuf:"bytes,8,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`
	DeviceOs        string                 `protobuf:"bytes,9,opt,name=deviceOs,proto3" json:"deviceOs,omitempty"`
	Timezone        int64                  `protobuf:"varint,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Lang            string                 `protobuf:"bytes,11,opt,name=lang,proto3" json:"lang,omitempty"`
	AppVer          int64                  `protobuf:"varint,12,opt,name=appVer,proto3" json:"appVer,omitempty"`
	Ip              string                 `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	Country         string                 `protobuf:"bytes,14,opt,name=country,proto3" json:"country,omitempty"`
	Province        string                 `protobuf:"bytes,15,opt,name=province,proto3" json:"province,omitempty"`
	City            string                 `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	Isp             string                 `protobuf:"bytes,17,opt,name=isp,proto3" json:"isp,omitempty"`
	CreateTime      int64                  `protobuf:"varint,18,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime      int64                  `protobuf:"varint,19,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Status          int64                  `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`
	Refer           string                 `protobuf:"bytes,21,opt,name=refer,proto3" json:"refer,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeviceVo) Reset() {
	*x = DeviceVo{}
	mi := &file_user_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVo) ProtoMessage() {}

func (x *DeviceVo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVo.ProtoReflect.Descriptor instead.
func (*DeviceVo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *DeviceVo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceVo) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *DeviceVo) GetAccountPassword() string {
	if x != nil {
		return x.AccountPassword
	}
	return ""
}

func (x *DeviceVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeviceVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *DeviceVo) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *DeviceVo) GetDeviceOs() string {
	if x != nil {
		return x.DeviceOs
	}
	return ""
}

func (x *DeviceVo) GetTimezone() int64 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

func (x *DeviceVo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *DeviceVo) GetAppVer() int64 {
	if x != nil {
		return x.AppVer
	}
	return 0
}

func (x *DeviceVo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceVo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *DeviceVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *DeviceVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DeviceVo) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *DeviceVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DeviceVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *DeviceVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceVo) GetRefer() string {
	if x != nil {
		return x.Refer
	}
	return ""
}

type DeviceListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *DeviceVo              `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceListReq) Reset() {
	*x = DeviceListReq{}
	mi := &file_user_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListReq) ProtoMessage() {}

func (x *DeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListReq.ProtoReflect.Descriptor instead.
func (*DeviceListReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceListReq) GetVo() *DeviceVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type DeviceListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*DeviceVo            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceListRes) Reset() {
	*x = DeviceListRes{}
	mi := &file_user_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListRes) ProtoMessage() {}

func (x *DeviceListRes) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListRes.ProtoReflect.Descriptor instead.
func (*DeviceListRes) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceListRes) GetList() []*DeviceVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UserAppConfigVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId      string                 `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Status        common.Status          `protobuf:"varint,5,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigVo) Reset() {
	*x = UserAppConfigVo{}
	mi := &file_user_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigVo) ProtoMessage() {}

func (x *UserAppConfigVo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigVo.ProtoReflect.Descriptor instead.
func (*UserAppConfigVo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{9}
}

func (x *UserAppConfigVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAppConfigVo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UserAppConfigVo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserAppConfigVo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UserAppConfigVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UserAppConfigVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserAppConfigVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UserAppConfigGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *UserAppConfigVo       `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigGetReq) Reset() {
	*x = UserAppConfigGetReq{}
	mi := &file_user_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigGetReq) ProtoMessage() {}

func (x *UserAppConfigGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigGetReq.ProtoReflect.Descriptor instead.
func (*UserAppConfigGetReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{10}
}

func (x *UserAppConfigGetReq) GetVo() *UserAppConfigVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UserAppConfigListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UserAppConfigVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigListReq) Reset() {
	*x = UserAppConfigListReq{}
	mi := &file_user_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigListReq) ProtoMessage() {}

func (x *UserAppConfigListReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigListReq.ProtoReflect.Descriptor instead.
func (*UserAppConfigListReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{11}
}

func (x *UserAppConfigListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UserAppConfigListReq) GetVo() *UserAppConfigVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UserAppConfigListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UserAppConfigVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigListRes) Reset() {
	*x = UserAppConfigListRes{}
	mi := &file_user_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigListRes) ProtoMessage() {}

func (x *UserAppConfigListRes) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigListRes.ProtoReflect.Descriptor instead.
func (*UserAppConfigListRes) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{12}
}

func (x *UserAppConfigListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserAppConfigListRes) GetList() []*UserAppConfigVo {
	if x != nil {
		return x.List
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd9, 0x07, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x35,
	0x0a, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x0e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x4c, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xe7, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x58, 0x0a, 0x15, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x04, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x22,
	0x51, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x02,
	0x76, 0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x01,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5f, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x57, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x32, 0xda, 0x09, 0x0a, 0x0c, 0x47, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x64,
	0x64, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12,
	0x43, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x1a, 0x15, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x6f, 0x12, 0x2e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x1a, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x12, 0x2e, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x1a, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x12, 0x27, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x0e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x6f, 0x1a, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x1a, 0x0f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x28, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x1a, 0x0f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x12,
	0x3a, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x10, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x12,
	0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x12, 0x43, 0x0a,
	0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x15, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x6f, 0x12, 0x2e, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x15, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x12, 0x4c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x31, 0x33, 0x35, 0x34, 0x32, 0x32, 0x39, 0x39, 0x36, 0x2f, 0x67, 0x6f, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x62, 0x2f, 0x67, 0x6f, 0x7a, 0x65, 0x72, 0x6f,
	0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData []byte
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_user_proto_rawDesc), len(file_user_proto_rawDesc)))
	})
	return file_user_proto_rawDescData
}

var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_user_proto_goTypes = []any{
	(*AccountVo)(nil),             // 0: user.AccountVo
	(*AccountListReq)(nil),        // 1: user.AccountListReq
	(*AccountListResp)(nil),       // 2: user.AccountListResp
	(*AccountDeviceVo)(nil),       // 3: user.AccountDeviceVo
	(*AccountDeviceListReq)(nil),  // 4: user.AccountDeviceListReq
	(*AccountDeviceListResp)(nil), // 5: user.AccountDeviceListResp
	(*DeviceVo)(nil),              // 6: user.DeviceVo
	(*DeviceListReq)(nil),         // 7: user.DeviceListReq
	(*DeviceListRes)(nil),         // 8: user.DeviceListRes
	(*UserAppConfigVo)(nil),       // 9: user.UserAppConfigVo
	(*UserAppConfigGetReq)(nil),   // 10: user.UserAppConfigGetReq
	(*UserAppConfigListReq)(nil),  // 11: user.UserAppConfigListReq
	(*UserAppConfigListRes)(nil),  // 12: user.UserAppConfigListRes
	(common.BoolInt)(0),           // 13: common.BoolInt
	(common.Status)(0),            // 14: common.Status
	(*common.Page)(nil),           // 15: common.Page
	(*common.Request)(nil),        // 16: common.Request
	(*common.BaseReq)(nil),        // 17: common.BaseReq
	(*common.Ids)(nil),            // 18: common.Ids
	(*common.Response)(nil),       // 19: common.Response
	(*common.Empty)(nil),          // 20: common.Empty
}
var file_user_proto_depIdxs = []int32{
	13, // 0: user.AccountVo.whitelistUser:type_name -> common.BoolInt
	13, // 1: user.AccountVo.activated:type_name -> common.BoolInt
	14, // 2: user.AccountVo.status:type_name -> common.Status
	15, // 3: user.AccountListReq.page:type_name -> common.Page
	0,  // 4: user.AccountListReq.vo:type_name -> user.AccountVo
	0,  // 5: user.AccountListResp.list:type_name -> user.AccountVo
	15, // 6: user.AccountDeviceListReq.page:type_name -> common.Page
	3,  // 7: user.AccountDeviceListReq.vo:type_name -> user.AccountDeviceVo
	3,  // 8: user.AccountDeviceListResp.list:type_name -> user.AccountDeviceVo
	15, // 9: user.DeviceListReq.page:type_name -> common.Page
	6,  // 10: user.DeviceListReq.vo:type_name -> user.DeviceVo
	6,  // 11: user.DeviceListRes.list:type_name -> user.DeviceVo
	14, // 12: user.UserAppConfigVo.status:type_name -> common.Status
	9,  // 13: user.UserAppConfigGetReq.vo:type_name -> user.UserAppConfigVo
	15, // 14: user.UserAppConfigListReq.page:type_name -> common.Page
	9,  // 15: user.UserAppConfigListReq.vo:type_name -> user.UserAppConfigVo
	9,  // 16: user.UserAppConfigListRes.list:type_name -> user.UserAppConfigVo
	16, // 17: user.GoUserClient.Ping:input_type -> common.Request
	17, // 18: user.GoUserClient.Login:input_type -> common.BaseReq
	9,  // 19: user.GoUserClient.UserAppConfigAdd:input_type -> user.UserAppConfigVo
	9,  // 20: user.GoUserClient.UserAppConfigUpdate:input_type -> user.UserAppConfigVo
	18, // 21: user.GoUserClient.UserAppConfigDel:input_type -> common.Ids
	10, // 22: user.GoUserClient.UserAppConfigGet:input_type -> user.UserAppConfigGetReq
	11, // 23: user.GoUserClient.UserAppConfigList:input_type -> user.UserAppConfigListReq
	6,  // 24: user.GoUserClient.DeviceAdd:input_type -> user.DeviceVo
	6,  // 25: user.GoUserClient.DeviceUpdate:input_type -> user.DeviceVo
	18, // 26: user.GoUserClient.DeviceDel:input_type -> common.Ids
	6,  // 27: user.GoUserClient.DeviceGet:input_type -> user.DeviceVo
	7,  // 28: user.GoUserClient.DeviceList:input_type -> user.DeviceListReq
	0,  // 29: user.GoUserClient.AccountAdd:input_type -> user.AccountVo
	0,  // 30: user.GoUserClient.AccountUpdate:input_type -> user.AccountVo
	18, // 31: user.GoUserClient.AccountDel:input_type -> common.Ids
	0,  // 32: user.GoUserClient.AccountGet:input_type -> user.AccountVo
	1,  // 33: user.GoUserClient.AccountList:input_type -> user.AccountListReq
	3,  // 34: user.GoUserClient.AccountDeviceAdd:input_type -> user.AccountDeviceVo
	3,  // 35: user.GoUserClient.AccountDeviceUpdate:input_type -> user.AccountDeviceVo
	18, // 36: user.GoUserClient.AccountDeviceDel:input_type -> common.Ids
	3,  // 37: user.GoUserClient.AccountDeviceGet:input_type -> user.AccountDeviceVo
	4,  // 38: user.GoUserClient.AccountDeviceList:input_type -> user.AccountDeviceListReq
	19, // 39: user.GoUserClient.Ping:output_type -> common.Response
	19, // 40: user.GoUserClient.Login:output_type -> common.Response
	9,  // 41: user.GoUserClient.UserAppConfigAdd:output_type -> user.UserAppConfigVo
	9,  // 42: user.GoUserClient.UserAppConfigUpdate:output_type -> user.UserAppConfigVo
	20, // 43: user.GoUserClient.UserAppConfigDel:output_type -> common.Empty
	9,  // 44: user.GoUserClient.UserAppConfigGet:output_type -> user.UserAppConfigVo
	12, // 45: user.GoUserClient.UserAppConfigList:output_type -> user.UserAppConfigListRes
	6,  // 46: user.GoUserClient.DeviceAdd:output_type -> user.DeviceVo
	6,  // 47: user.GoUserClient.DeviceUpdate:output_type -> user.DeviceVo
	20, // 48: user.GoUserClient.DeviceDel:output_type -> common.Empty
	6,  // 49: user.GoUserClient.DeviceGet:output_type -> user.DeviceVo
	8,  // 50: user.GoUserClient.DeviceList:output_type -> user.DeviceListRes
	0,  // 51: user.GoUserClient.AccountAdd:output_type -> user.AccountVo
	0,  // 52: user.GoUserClient.AccountUpdate:output_type -> user.AccountVo
	20, // 53: user.GoUserClient.AccountDel:output_type -> common.Empty
	0,  // 54: user.GoUserClient.AccountGet:output_type -> user.AccountVo
	2,  // 55: user.GoUserClient.AccountList:output_type -> user.AccountListResp
	3,  // 56: user.GoUserClient.AccountDeviceAdd:output_type -> user.AccountDeviceVo
	3,  // 57: user.GoUserClient.AccountDeviceUpdate:output_type -> user.AccountDeviceVo
	20, // 58: user.GoUserClient.AccountDeviceDel:output_type -> common.Empty
	3,  // 59: user.GoUserClient.AccountDeviceGet:output_type -> user.AccountDeviceVo
	5,  // 60: user.GoUserClient.AccountDeviceList:output_type -> user.AccountDeviceListResp
	39, // [39:61] is the sub-list for method output_type
	17, // [17:39] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_user_proto_rawDesc), len(file_user_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
