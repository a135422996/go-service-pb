// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoUserClient_Ping_FullMethodName                = "/user.GoUserClient/Ping"
	GoUserClient_Login_FullMethodName               = "/user.GoUserClient/Login"
	GoUserClient_UserAppConfigAdd_FullMethodName    = "/user.GoUserClient/UserAppConfigAdd"
	GoUserClient_UserAppConfigUpdate_FullMethodName = "/user.GoUserClient/UserAppConfigUpdate"
	GoUserClient_UserAppConfigDel_FullMethodName    = "/user.GoUserClient/UserAppConfigDel"
	GoUserClient_UserAppConfigGet_FullMethodName    = "/user.GoUserClient/UserAppConfigGet"
	GoUserClient_UserAppConfigList_FullMethodName   = "/user.GoUserClient/UserAppConfigList"
	GoUserClient_DeviceAdd_FullMethodName           = "/user.GoUserClient/DeviceAdd"
	GoUserClient_DeviceUpdate_FullMethodName        = "/user.GoUserClient/DeviceUpdate"
	GoUserClient_DeviceDel_FullMethodName           = "/user.GoUserClient/DeviceDel"
	GoUserClient_DeviceGet_FullMethodName           = "/user.GoUserClient/DeviceGet"
	GoUserClient_DeviceList_FullMethodName          = "/user.GoUserClient/DeviceList"
	GoUserClient_AccountAdd_FullMethodName          = "/user.GoUserClient/AccountAdd"
	GoUserClient_AccountUpdate_FullMethodName       = "/user.GoUserClient/AccountUpdate"
	GoUserClient_AccountDel_FullMethodName          = "/user.GoUserClient/AccountDel"
	GoUserClient_AccountGet_FullMethodName          = "/user.GoUserClient/AccountGet"
	GoUserClient_AccountList_FullMethodName         = "/user.GoUserClient/AccountList"
	GoUserClient_AccountDeviceAdd_FullMethodName    = "/user.GoUserClient/AccountDeviceAdd"
	GoUserClient_AccountDeviceUpdate_FullMethodName = "/user.GoUserClient/AccountDeviceUpdate"
	GoUserClient_AccountDeviceDel_FullMethodName    = "/user.GoUserClient/AccountDeviceDel"
	GoUserClient_AccountDeviceGet_FullMethodName    = "/user.GoUserClient/AccountDeviceGet"
	GoUserClient_AccountDeviceList_FullMethodName   = "/user.GoUserClient/AccountDeviceList"
)

// GoUserClientClient is the client API for GoUserClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户模块
type GoUserClientClient interface {
	Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error)
	// 登录
	Login(ctx context.Context, in *common.BaseReq, opts ...grpc.CallOption) (*common.Response, error)
	// 用户app配置管理（ring）
	UserAppConfigAdd(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error)
	UserAppConfigUpdate(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error)
	UserAppConfigDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	UserAppConfigGet(ctx context.Context, in *UserAppConfigGetReq, opts ...grpc.CallOption) (*UserAppConfigVo, error)
	UserAppConfigList(ctx context.Context, in *UserAppConfigListReq, opts ...grpc.CallOption) (*UserAppConfigListRes, error)
	// 设备管理
	DeviceAdd(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error)
	DeviceUpdate(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error)
	DeviceDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	DeviceGet(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error)
	DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListRes, error)
	// Account
	AccountAdd(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error)
	AccountUpdate(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error)
	AccountDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	AccountGet(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error)
	AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error)
	// AccountDevice
	AccountDeviceAdd(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error)
	AccountDeviceUpdate(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error)
	AccountDeviceDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	AccountDeviceGet(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error)
	AccountDeviceList(ctx context.Context, in *AccountDeviceListReq, opts ...grpc.CallOption) (*AccountDeviceListResp, error)
}

type goUserClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoUserClientClient(cc grpc.ClientConnInterface) GoUserClientClient {
	return &goUserClientClient{cc}
}

func (c *goUserClientClient) Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, GoUserClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) Login(ctx context.Context, in *common.BaseReq, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, GoUserClient_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigAdd(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigVo)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigUpdate(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigVo)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigGet(ctx context.Context, in *UserAppConfigGetReq, opts ...grpc.CallOption) (*UserAppConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigVo)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigList(ctx context.Context, in *UserAppConfigListReq, opts ...grpc.CallOption) (*UserAppConfigListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigListRes)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceAdd(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceUpdate(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceGet(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceListRes)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountAdd(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountUpdate(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountGet(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountListResp)
	err := c.cc.Invoke(ctx, GoUserClient_AccountList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceAdd(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceUpdate(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceGet(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceList(ctx context.Context, in *AccountDeviceListReq, opts ...grpc.CallOption) (*AccountDeviceListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceListResp)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoUserClientServer is the server API for GoUserClient service.
// All implementations must embed UnimplementedGoUserClientServer
// for forward compatibility.
//
// 用户模块
type GoUserClientServer interface {
	Ping(context.Context, *common.Request) (*common.Response, error)
	// 登录
	Login(context.Context, *common.BaseReq) (*common.Response, error)
	// 用户app配置管理（ring）
	UserAppConfigAdd(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error)
	UserAppConfigUpdate(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error)
	UserAppConfigDel(context.Context, *common.Ids) (*common.Empty, error)
	UserAppConfigGet(context.Context, *UserAppConfigGetReq) (*UserAppConfigVo, error)
	UserAppConfigList(context.Context, *UserAppConfigListReq) (*UserAppConfigListRes, error)
	// 设备管理
	DeviceAdd(context.Context, *DeviceVo) (*DeviceVo, error)
	DeviceUpdate(context.Context, *DeviceVo) (*DeviceVo, error)
	DeviceDel(context.Context, *common.Ids) (*common.Empty, error)
	DeviceGet(context.Context, *DeviceVo) (*DeviceVo, error)
	DeviceList(context.Context, *DeviceListReq) (*DeviceListRes, error)
	// Account
	AccountAdd(context.Context, *AccountVo) (*AccountVo, error)
	AccountUpdate(context.Context, *AccountVo) (*AccountVo, error)
	AccountDel(context.Context, *common.Ids) (*common.Empty, error)
	AccountGet(context.Context, *AccountVo) (*AccountVo, error)
	AccountList(context.Context, *AccountListReq) (*AccountListResp, error)
	// AccountDevice
	AccountDeviceAdd(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error)
	AccountDeviceUpdate(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error)
	AccountDeviceDel(context.Context, *common.Ids) (*common.Empty, error)
	AccountDeviceGet(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error)
	AccountDeviceList(context.Context, *AccountDeviceListReq) (*AccountDeviceListResp, error)
	mustEmbedUnimplementedGoUserClientServer()
}

// UnimplementedGoUserClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoUserClientServer struct{}

func (UnimplementedGoUserClientServer) Ping(context.Context, *common.Request) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoUserClientServer) Login(context.Context, *common.BaseReq) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigAdd(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigAdd not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigUpdate(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigUpdate not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigDel not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigGet(context.Context, *UserAppConfigGetReq) (*UserAppConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigGet not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigList(context.Context, *UserAppConfigListReq) (*UserAppConfigListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigList not implemented")
}
func (UnimplementedGoUserClientServer) DeviceAdd(context.Context, *DeviceVo) (*DeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceAdd not implemented")
}
func (UnimplementedGoUserClientServer) DeviceUpdate(context.Context, *DeviceVo) (*DeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceUpdate not implemented")
}
func (UnimplementedGoUserClientServer) DeviceDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceDel not implemented")
}
func (UnimplementedGoUserClientServer) DeviceGet(context.Context, *DeviceVo) (*DeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGet not implemented")
}
func (UnimplementedGoUserClientServer) DeviceList(context.Context, *DeviceListReq) (*DeviceListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceList not implemented")
}
func (UnimplementedGoUserClientServer) AccountAdd(context.Context, *AccountVo) (*AccountVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAdd not implemented")
}
func (UnimplementedGoUserClientServer) AccountUpdate(context.Context, *AccountVo) (*AccountVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdate not implemented")
}
func (UnimplementedGoUserClientServer) AccountDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDel not implemented")
}
func (UnimplementedGoUserClientServer) AccountGet(context.Context, *AccountVo) (*AccountVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGet not implemented")
}
func (UnimplementedGoUserClientServer) AccountList(context.Context, *AccountListReq) (*AccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountList not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceAdd(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceAdd not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceUpdate(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceUpdate not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceDel not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceGet(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceGet not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceList(context.Context, *AccountDeviceListReq) (*AccountDeviceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceList not implemented")
}
func (UnimplementedGoUserClientServer) mustEmbedUnimplementedGoUserClientServer() {}
func (UnimplementedGoUserClientServer) testEmbeddedByValue()                      {}

// UnsafeGoUserClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoUserClientServer will
// result in compilation errors.
type UnsafeGoUserClientServer interface {
	mustEmbedUnimplementedGoUserClientServer()
}

func RegisterGoUserClientServer(s grpc.ServiceRegistrar, srv GoUserClientServer) {
	// If the following call pancis, it indicates UnimplementedGoUserClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoUserClient_ServiceDesc, srv)
}

func _GoUserClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).Ping(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.BaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).Login(ctx, req.(*common.BaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigAdd(ctx, req.(*UserAppConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigUpdate(ctx, req.(*UserAppConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigGet(ctx, req.(*UserAppConfigGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigList(ctx, req.(*UserAppConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceAdd(ctx, req.(*DeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceUpdate(ctx, req.(*DeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceGet(ctx, req.(*DeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceList(ctx, req.(*DeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountAdd(ctx, req.(*AccountVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountUpdate(ctx, req.(*AccountVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountGet(ctx, req.(*AccountVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountList(ctx, req.(*AccountListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceAdd(ctx, req.(*AccountDeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceUpdate(ctx, req.(*AccountDeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceGet(ctx, req.(*AccountDeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceList(ctx, req.(*AccountDeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoUserClient_ServiceDesc is the grpc.ServiceDesc for GoUserClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoUserClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.GoUserClient",
	HandlerType: (*GoUserClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoUserClient_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GoUserClient_Login_Handler,
		},
		{
			MethodName: "UserAppConfigAdd",
			Handler:    _GoUserClient_UserAppConfigAdd_Handler,
		},
		{
			MethodName: "UserAppConfigUpdate",
			Handler:    _GoUserClient_UserAppConfigUpdate_Handler,
		},
		{
			MethodName: "UserAppConfigDel",
			Handler:    _GoUserClient_UserAppConfigDel_Handler,
		},
		{
			MethodName: "UserAppConfigGet",
			Handler:    _GoUserClient_UserAppConfigGet_Handler,
		},
		{
			MethodName: "UserAppConfigList",
			Handler:    _GoUserClient_UserAppConfigList_Handler,
		},
		{
			MethodName: "DeviceAdd",
			Handler:    _GoUserClient_DeviceAdd_Handler,
		},
		{
			MethodName: "DeviceUpdate",
			Handler:    _GoUserClient_DeviceUpdate_Handler,
		},
		{
			MethodName: "DeviceDel",
			Handler:    _GoUserClient_DeviceDel_Handler,
		},
		{
			MethodName: "DeviceGet",
			Handler:    _GoUserClient_DeviceGet_Handler,
		},
		{
			MethodName: "DeviceList",
			Handler:    _GoUserClient_DeviceList_Handler,
		},
		{
			MethodName: "AccountAdd",
			Handler:    _GoUserClient_AccountAdd_Handler,
		},
		{
			MethodName: "AccountUpdate",
			Handler:    _GoUserClient_AccountUpdate_Handler,
		},
		{
			MethodName: "AccountDel",
			Handler:    _GoUserClient_AccountDel_Handler,
		},
		{
			MethodName: "AccountGet",
			Handler:    _GoUserClient_AccountGet_Handler,
		},
		{
			MethodName: "AccountList",
			Handler:    _GoUserClient_AccountList_Handler,
		},
		{
			MethodName: "AccountDeviceAdd",
			Handler:    _GoUserClient_AccountDeviceAdd_Handler,
		},
		{
			MethodName: "AccountDeviceUpdate",
			Handler:    _GoUserClient_AccountDeviceUpdate_Handler,
		},
		{
			MethodName: "AccountDeviceDel",
			Handler:    _GoUserClient_AccountDeviceDel_Handler,
		},
		{
			MethodName: "AccountDeviceGet",
			Handler:    _GoUserClient_AccountDeviceGet_Handler,
		},
		{
			MethodName: "AccountDeviceList",
			Handler:    _GoUserClient_AccountDeviceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
