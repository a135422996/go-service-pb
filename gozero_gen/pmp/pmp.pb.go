// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.4
// source: pmp.proto

package pmp

import (
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type I18NVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *I18NVo) Reset() {
	*x = I18NVo{}
	mi := &file_pmp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *I18NVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18NVo) ProtoMessage() {}

func (x *I18NVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18NVo.ProtoReflect.Descriptor instead.
func (*I18NVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{0}
}

func (x *I18NVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *I18NVo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpgradeResVo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Path               string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	FileMd5            string                 `protobuf:"bytes,4,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FilePath           string                 `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
	MetadataId         string                 `protobuf:"bytes,6,opt,name=metadataId,proto3" json:"metadataId,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	RuntimeVersion     string                 `protobuf:"bytes,8,opt,name=runtimeVersion,proto3" json:"runtimeVersion,omitempty"`
	RuntimeVersionCode int64                  `protobuf:"varint,9,opt,name=runtimeVersionCode,proto3" json:"runtimeVersionCode,omitempty"`
	AppVersionName     string                 `protobuf:"bytes,10,opt,name=appVersionName,proto3" json:"appVersionName,omitempty"`
	AppVersionCode     int64                  `protobuf:"varint,11,opt,name=appVersionCode,proto3" json:"appVersionCode,omitempty"`
	Status             common.Status          `protobuf:"varint,12,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Remark             string                 `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime         int64                  `protobuf:"varint,14,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime         int64                  `protobuf:"varint,15,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ResSize            int64                  `protobuf:"varint,16,opt,name=resSize,proto3" json:"resSize,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpgradeResVo) Reset() {
	*x = UpgradeResVo{}
	mi := &file_pmp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResVo) ProtoMessage() {}

func (x *UpgradeResVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResVo.ProtoReflect.Descriptor instead.
func (*UpgradeResVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{1}
}

func (x *UpgradeResVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradeResVo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpgradeResVo) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UpgradeResVo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpgradeResVo) GetMetadataId() string {
	if x != nil {
		return x.MetadataId
	}
	return ""
}

func (x *UpgradeResVo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpgradeResVo) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *UpgradeResVo) GetRuntimeVersionCode() int64 {
	if x != nil {
		return x.RuntimeVersionCode
	}
	return 0
}

func (x *UpgradeResVo) GetAppVersionName() string {
	if x != nil {
		return x.AppVersionName
	}
	return ""
}

func (x *UpgradeResVo) GetAppVersionCode() int64 {
	if x != nil {
		return x.AppVersionCode
	}
	return 0
}

func (x *UpgradeResVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UpgradeResVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpgradeResVo) GetResSize() int64 {
	if x != nil {
		return x.ResSize
	}
	return 0
}

type UpgradeResConfigVo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductId             int64                  `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Platform              string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel               string                 `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	ResId                 int64                  `protobuf:"varint,5,opt,name=resId,proto3" json:"resId,omitempty"`
	IsForceUpdate         int64                  `protobuf:"varint,6,opt,name=isForceUpdate,proto3" json:"isForceUpdate,omitempty"`
	ForceIntro            string                 `protobuf:"bytes,7,opt,name=forceIntro,proto3" json:"forceIntro,omitempty"`
	AreaConfigs           string                 `protobuf:"bytes,8,opt,name=areaConfigs,proto3" json:"areaConfigs,omitempty"`
	VersionConfigs        string                 `protobuf:"bytes,9,opt,name=versionConfigs,proto3" json:"versionConfigs,omitempty"`
	Interval              int64                  `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
	UpgradeRate           int64                  `protobuf:"varint,11,opt,name=upgradeRate,proto3" json:"upgradeRate,omitempty"`
	Intro                 string                 `protobuf:"bytes,12,opt,name=intro,proto3" json:"intro,omitempty"`
	Apis                  string                 `protobuf:"bytes,13,opt,name=apis,proto3" json:"apis,omitempty"`
	Status                common.Status          `protobuf:"varint,14,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Remark                string                 `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`
	UserIds               string                 `protobuf:"bytes,16,opt,name=userIds,proto3" json:"userIds,omitempty"`
	CreateTime            int64                  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime            int64                  `protobuf:"varint,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ForceVersionConfigs   string                 `protobuf:"bytes,19,opt,name=forceVersionConfigs,proto3" json:"forceVersionConfigs,omitempty"`
	ForceAreaConfigs      string                 `protobuf:"bytes,20,opt,name=forceAreaConfigs,proto3" json:"forceAreaConfigs,omitempty"`
	RuntimeVersionConfigs string                 `protobuf:"bytes,21,opt,name=runtimeVersionConfigs,proto3" json:"runtimeVersionConfigs,omitempty"`
	Title                 string                 `protobuf:"bytes,22,opt,name=title,proto3" json:"title,omitempty"`
	IsSilent              int64                  `protobuf:"varint,23,opt,name=isSilent,proto3" json:"isSilent,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpgradeResConfigVo) Reset() {
	*x = UpgradeResConfigVo{}
	mi := &file_pmp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigVo) ProtoMessage() {}

func (x *UpgradeResConfigVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigVo.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{2}
}

func (x *UpgradeResConfigVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResConfigVo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpgradeResConfigVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpgradeResConfigVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpgradeResConfigVo) GetResId() int64 {
	if x != nil {
		return x.ResId
	}
	return 0
}

func (x *UpgradeResConfigVo) GetIsForceUpdate() int64 {
	if x != nil {
		return x.IsForceUpdate
	}
	return 0
}

func (x *UpgradeResConfigVo) GetForceIntro() string {
	if x != nil {
		return x.ForceIntro
	}
	return ""
}

func (x *UpgradeResConfigVo) GetAreaConfigs() string {
	if x != nil {
		return x.AreaConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetVersionConfigs() string {
	if x != nil {
		return x.VersionConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *UpgradeResConfigVo) GetUpgradeRate() int64 {
	if x != nil {
		return x.UpgradeRate
	}
	return 0
}

func (x *UpgradeResConfigVo) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *UpgradeResConfigVo) GetApis() string {
	if x != nil {
		return x.Apis
	}
	return ""
}

func (x *UpgradeResConfigVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UpgradeResConfigVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResConfigVo) GetUserIds() string {
	if x != nil {
		return x.UserIds
	}
	return ""
}

func (x *UpgradeResConfigVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResConfigVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpgradeResConfigVo) GetForceVersionConfigs() string {
	if x != nil {
		return x.ForceVersionConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetForceAreaConfigs() string {
	if x != nil {
		return x.ForceAreaConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetRuntimeVersionConfigs() string {
	if x != nil {
		return x.RuntimeVersionConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradeResConfigVo) GetIsSilent() int64 {
	if x != nil {
		return x.IsSilent
	}
	return 0
}

type UpgradePkgVo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductId           int64                  `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Platform            string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel             string                 `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	VersionCode         int64                  `protobuf:"varint,5,opt,name=versionCode,proto3" json:"versionCode,omitempty"`
	VersionName         string                 `protobuf:"bytes,6,opt,name=versionName,proto3" json:"versionName,omitempty"`
	FileMd5             string                 `protobuf:"bytes,7,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	AreaConfigs         string                 `protobuf:"bytes,8,opt,name=areaConfigs,proto3" json:"areaConfigs,omitempty"`
	VersionConfigs      string                 `protobuf:"bytes,9,opt,name=versionConfigs,proto3" json:"versionConfigs,omitempty"`
	Interval            int64                  `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
	UpgradeRate         int64                  `protobuf:"varint,11,opt,name=upgradeRate,proto3" json:"upgradeRate,omitempty"`
	Intro               string                 `protobuf:"bytes,12,opt,name=intro,proto3" json:"intro,omitempty"`
	AppStoreUrl         string                 `protobuf:"bytes,13,opt,name=appStoreUrl,proto3" json:"appStoreUrl,omitempty"`
	Url                 string                 `protobuf:"bytes,14,opt,name=url,proto3" json:"url,omitempty"`
	OnlineUrls          string                 `protobuf:"bytes,15,opt,name=onlineUrls,proto3" json:"onlineUrls,omitempty"`
	UserIds             string                 `protobuf:"bytes,16,opt,name=userIds,proto3" json:"userIds,omitempty"`
	IsForceUpdate       int64                  `protobuf:"varint,17,opt,name=isForceUpdate,proto3" json:"isForceUpdate,omitempty"`
	ForceIntro          string                 `protobuf:"bytes,18,opt,name=forceIntro,proto3" json:"forceIntro,omitempty"`
	ForceVersionConfigs string                 `protobuf:"bytes,19,opt,name=forceVersionConfigs,proto3" json:"forceVersionConfigs,omitempty"`
	Status              common.Status          `protobuf:"varint,20,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Remark              string                 `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime          int64                  `protobuf:"varint,22,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          int64                  `protobuf:"varint,23,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Title               string                 `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty"`
	ForceAreaConfigs    string                 `protobuf:"bytes,25,opt,name=forceAreaConfigs,proto3" json:"forceAreaConfigs,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpgradePkgVo) Reset() {
	*x = UpgradePkgVo{}
	mi := &file_pmp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgVo) ProtoMessage() {}

func (x *UpgradePkgVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgVo.ProtoReflect.Descriptor instead.
func (*UpgradePkgVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{3}
}

func (x *UpgradePkgVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradePkgVo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpgradePkgVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpgradePkgVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpgradePkgVo) GetVersionCode() int64 {
	if x != nil {
		return x.VersionCode
	}
	return 0
}

func (x *UpgradePkgVo) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *UpgradePkgVo) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UpgradePkgVo) GetAreaConfigs() string {
	if x != nil {
		return x.AreaConfigs
	}
	return ""
}

func (x *UpgradePkgVo) GetVersionConfigs() string {
	if x != nil {
		return x.VersionConfigs
	}
	return ""
}

func (x *UpgradePkgVo) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *UpgradePkgVo) GetUpgradeRate() int64 {
	if x != nil {
		return x.UpgradeRate
	}
	return 0
}

func (x *UpgradePkgVo) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *UpgradePkgVo) GetAppStoreUrl() string {
	if x != nil {
		return x.AppStoreUrl
	}
	return ""
}

func (x *UpgradePkgVo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpgradePkgVo) GetOnlineUrls() string {
	if x != nil {
		return x.OnlineUrls
	}
	return ""
}

func (x *UpgradePkgVo) GetUserIds() string {
	if x != nil {
		return x.UserIds
	}
	return ""
}

func (x *UpgradePkgVo) GetIsForceUpdate() int64 {
	if x != nil {
		return x.IsForceUpdate
	}
	return 0
}

func (x *UpgradePkgVo) GetForceIntro() string {
	if x != nil {
		return x.ForceIntro
	}
	return ""
}

func (x *UpgradePkgVo) GetForceVersionConfigs() string {
	if x != nil {
		return x.ForceVersionConfigs
	}
	return ""
}

func (x *UpgradePkgVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UpgradePkgVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradePkgVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradePkgVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpgradePkgVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradePkgVo) GetForceAreaConfigs() string {
	if x != nil {
		return x.ForceAreaConfigs
	}
	return ""
}

type UpgradeResConfigGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Id            int64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResConfigGetReq) Reset() {
	*x = UpgradeResConfigGetReq{}
	mi := &file_pmp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigGetReq) ProtoMessage() {}

func (x *UpgradeResConfigGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigGetReq.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigGetReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{4}
}

func (x *UpgradeResConfigGetReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResConfigGetReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpgradeResConfigListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResConfigVo    `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResConfigListReq) Reset() {
	*x = UpgradeResConfigListReq{}
	mi := &file_pmp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigListReq) ProtoMessage() {}

func (x *UpgradeResConfigListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{5}
}

func (x *UpgradeResConfigListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResConfigListReq) GetVo() *UpgradeResConfigVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResConfigListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResConfigVo  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResConfigListResp) Reset() {
	*x = UpgradeResConfigListResp{}
	mi := &file_pmp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigListResp) ProtoMessage() {}

func (x *UpgradeResConfigListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{6}
}

func (x *UpgradeResConfigListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResConfigListResp) GetList() []*UpgradeResConfigVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradePkgGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *UpgradePkgVo          `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgGetReq) Reset() {
	*x = UpgradePkgGetReq{}
	mi := &file_pmp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgGetReq) ProtoMessage() {}

func (x *UpgradePkgGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgGetReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgGetReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{7}
}

func (x *UpgradePkgGetReq) GetVo() *UpgradePkgVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradePkgListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradePkgVo          `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgListReq) Reset() {
	*x = UpgradePkgListReq{}
	mi := &file_pmp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgListReq) ProtoMessage() {}

func (x *UpgradePkgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgListReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{8}
}

func (x *UpgradePkgListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradePkgListReq) GetVo() *UpgradePkgVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradePkgListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradePkgVo        `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgListResp) Reset() {
	*x = UpgradePkgListResp{}
	mi := &file_pmp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgListResp) ProtoMessage() {}

func (x *UpgradePkgListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgListResp.ProtoReflect.Descriptor instead.
func (*UpgradePkgListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{9}
}

func (x *UpgradePkgListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradePkgListResp) GetList() []*UpgradePkgVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradeResGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *UpgradeResVo          `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResGetReq) Reset() {
	*x = UpgradeResGetReq{}
	mi := &file_pmp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResGetReq) ProtoMessage() {}

func (x *UpgradeResGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResGetReq.ProtoReflect.Descriptor instead.
func (*UpgradeResGetReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{10}
}

func (x *UpgradeResGetReq) GetVo() *UpgradeResVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResVo          `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResListReq) Reset() {
	*x = UpgradeResListReq{}
	mi := &file_pmp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResListReq) ProtoMessage() {}

func (x *UpgradeResListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{11}
}

func (x *UpgradeResListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResListReq) GetVo() *UpgradeResVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResVo        `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResListResp) Reset() {
	*x = UpgradeResListResp{}
	mi := &file_pmp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResListResp) ProtoMessage() {}

func (x *UpgradeResListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{12}
}

func (x *UpgradeResListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResListResp) GetList() []*UpgradeResVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ResourceDelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	FileMd5       string                 `protobuf:"bytes,2,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceDelReq) Reset() {
	*x = ResourceDelReq{}
	mi := &file_pmp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDelReq) ProtoMessage() {}

func (x *ResourceDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDelReq.ProtoReflect.Descriptor instead.
func (*ResourceDelReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{13}
}

func (x *ResourceDelReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ResourceDelReq) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

type ConfigGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // ID
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` // 类型标识
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigGetReq) Reset() {
	*x = ConfigGetReq{}
	mi := &file_pmp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetReq) ProtoMessage() {}

func (x *ConfigGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetReq.ProtoReflect.Descriptor instead.
func (*ConfigGetReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigGetReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigGetReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// GlobalParam
type GlobalParamVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParamKey      string                 `protobuf:"bytes,2,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	ParamValue    string                 `protobuf:"bytes,3,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	ValueType     string                 `protobuf:"bytes,4,opt,name=valueType,proto3" json:"valueType,omitempty"`
	MinValue      float32                `protobuf:"fixed32,5,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue      float32                `protobuf:"fixed32,6,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Editable      common.BoolInt         `protobuf:"varint,8,opt,name=editable,proto3,enum=common.BoolInt" json:"editable,omitempty"`
	Nullable      common.BoolInt         `protobuf:"varint,9,opt,name=nullable,proto3,enum=common.BoolInt" json:"nullable,omitempty"`
	Hidden        common.BoolInt         `protobuf:"varint,10,opt,name=hidden,proto3,enum=common.BoolInt" json:"hidden,omitempty"`
	MutiLang      common.BoolInt         `protobuf:"varint,11,opt,name=mutiLang,proto3,enum=common.BoolInt" json:"mutiLang,omitempty"`
	Sort          int64                  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	ApiExport     common.BoolInt         `protobuf:"varint,14,opt,name=apiExport,proto3,enum=common.BoolInt" json:"apiExport,omitempty"`
	ApiExportName string                 `protobuf:"bytes,15,opt,name=apiExportName,proto3" json:"apiExportName,omitempty"`
	CreateTime    int64                  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalParamVo) Reset() {
	*x = GlobalParamVo{}
	mi := &file_pmp_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalParamVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalParamVo) ProtoMessage() {}

func (x *GlobalParamVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalParamVo.ProtoReflect.Descriptor instead.
func (*GlobalParamVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{15}
}

func (x *GlobalParamVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GlobalParamVo) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

func (x *GlobalParamVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *GlobalParamVo) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *GlobalParamVo) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *GlobalParamVo) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *GlobalParamVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GlobalParamVo) GetEditable() common.BoolInt {
	if x != nil {
		return x.Editable
	}
	return common.BoolInt(0)
}

func (x *GlobalParamVo) GetNullable() common.BoolInt {
	if x != nil {
		return x.Nullable
	}
	return common.BoolInt(0)
}

func (x *GlobalParamVo) GetHidden() common.BoolInt {
	if x != nil {
		return x.Hidden
	}
	return common.BoolInt(0)
}

func (x *GlobalParamVo) GetMutiLang() common.BoolInt {
	if x != nil {
		return x.MutiLang
	}
	return common.BoolInt(0)
}

func (x *GlobalParamVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *GlobalParamVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *GlobalParamVo) GetApiExport() common.BoolInt {
	if x != nil {
		return x.ApiExport
	}
	return common.BoolInt(0)
}

func (x *GlobalParamVo) GetApiExportName() string {
	if x != nil {
		return x.ApiExportName
	}
	return ""
}

func (x *GlobalParamVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GlobalParamVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type GlobalParamListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *GlobalParamVo         `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalParamListReq) Reset() {
	*x = GlobalParamListReq{}
	mi := &file_pmp_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalParamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalParamListReq) ProtoMessage() {}

func (x *GlobalParamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalParamListReq.ProtoReflect.Descriptor instead.
func (*GlobalParamListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{16}
}

func (x *GlobalParamListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GlobalParamListReq) GetVo() *GlobalParamVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type GlobalParamListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*GlobalParamVo       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalParamListResp) Reset() {
	*x = GlobalParamListResp{}
	mi := &file_pmp_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalParamListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalParamListResp) ProtoMessage() {}

func (x *GlobalParamListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalParamListResp.ProtoReflect.Descriptor instead.
func (*GlobalParamListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{17}
}

func (x *GlobalParamListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GlobalParamListResp) GetList() []*GlobalParamVo {
	if x != nil {
		return x.List
	}
	return nil
}

// Product
type ProductVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Domain        string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Status        common.Status          `protobuf:"varint,5,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Langs         string                 `protobuf:"bytes,6,opt,name=langs,proto3" json:"langs,omitempty"`
	DefaultLang   string                 `protobuf:"bytes,7,opt,name=defaultLang,proto3" json:"defaultLang,omitempty"`
	Remark        string                 `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductVo) Reset() {
	*x = ProductVo{}
	mi := &file_pmp_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductVo) ProtoMessage() {}

func (x *ProductVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductVo.ProtoReflect.Descriptor instead.
func (*ProductVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{18}
}

func (x *ProductVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductVo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ProductVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *ProductVo) GetLangs() string {
	if x != nil {
		return x.Langs
	}
	return ""
}

func (x *ProductVo) GetDefaultLang() string {
	if x != nil {
		return x.DefaultLang
	}
	return ""
}

func (x *ProductVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ProductVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ProductVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ProductListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *ProductVo             `protobuf:"bytes,4,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductListReq) Reset() {
	*x = ProductListReq{}
	mi := &file_pmp_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListReq) ProtoMessage() {}

func (x *ProductListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListReq.ProtoReflect.Descriptor instead.
func (*ProductListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{19}
}

func (x *ProductListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductListReq) GetVo() *ProductVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductVo           `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductListResp) Reset() {
	*x = ProductListResp{}
	mi := &file_pmp_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListResp) ProtoMessage() {}

func (x *ProductListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListResp.ProtoReflect.Descriptor instead.
func (*ProductListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{20}
}

func (x *ProductListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductListResp) GetList() []*ProductVo {
	if x != nil {
		return x.List
	}
	return nil
}

// ProductParam
type ProductParamVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParamKey      string                 `protobuf:"bytes,3,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	ParamValue    string                 `protobuf:"bytes,4,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	ValueType     string                 `protobuf:"bytes,5,opt,name=valueType,proto3" json:"valueType,omitempty"`
	MinValue      float32                `protobuf:"fixed32,6,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue      float32                `protobuf:"fixed32,7,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	Name          string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Editable      bool                   `protobuf:"varint,9,opt,name=editable,proto3" json:"editable,omitempty"`
	Nullable      bool                   `protobuf:"varint,10,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Hidden        bool                   `protobuf:"varint,11,opt,name=hidden,proto3" json:"hidden,omitempty"`
	MutiLang      bool                   `protobuf:"varint,12,opt,name=mutiLang,proto3" json:"mutiLang,omitempty"`
	Sort          int64                  `protobuf:"varint,13,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	ApiExport     bool                   `protobuf:"varint,15,opt,name=apiExport,proto3" json:"apiExport,omitempty"`
	ApiExportName string                 `protobuf:"bytes,16,opt,name=apiExportName,proto3" json:"apiExportName,omitempty"`
	CreateTime    int64                  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductParamVo) Reset() {
	*x = ProductParamVo{}
	mi := &file_pmp_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductParamVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductParamVo) ProtoMessage() {}

func (x *ProductParamVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductParamVo.ProtoReflect.Descriptor instead.
func (*ProductParamVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{21}
}

func (x *ProductParamVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductParamVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ProductParamVo) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

func (x *ProductParamVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *ProductParamVo) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *ProductParamVo) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ProductParamVo) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ProductParamVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductParamVo) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *ProductParamVo) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *ProductParamVo) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ProductParamVo) GetMutiLang() bool {
	if x != nil {
		return x.MutiLang
	}
	return false
}

func (x *ProductParamVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductParamVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ProductParamVo) GetApiExport() bool {
	if x != nil {
		return x.ApiExport
	}
	return false
}

func (x *ProductParamVo) GetApiExportName() string {
	if x != nil {
		return x.ApiExportName
	}
	return ""
}

func (x *ProductParamVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ProductParamVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ProductParamListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *ProductParamVo        `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductParamListReq) Reset() {
	*x = ProductParamListReq{}
	mi := &file_pmp_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductParamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductParamListReq) ProtoMessage() {}

func (x *ProductParamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductParamListReq.ProtoReflect.Descriptor instead.
func (*ProductParamListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{22}
}

func (x *ProductParamListReq) GetVo() *ProductParamVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductParamListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductParamVo      `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductParamListResp) Reset() {
	*x = ProductParamListResp{}
	mi := &file_pmp_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductParamListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductParamListResp) ProtoMessage() {}

func (x *ProductParamListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductParamListResp.ProtoReflect.Descriptor instead.
func (*ProductParamListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{23}
}

func (x *ProductParamListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductParamListResp) GetList() []*ProductParamVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ProductActionVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ImgUrl        string                 `protobuf:"bytes,3,opt,name=imgUrl,proto3" json:"imgUrl,omitempty"`
	ActionType    string                 `protobuf:"bytes,4,opt,name=actionType,proto3" json:"actionType,omitempty"`
	ActionData    string                 `protobuf:"bytes,5,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Title         string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Status        int64                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionVo) Reset() {
	*x = ProductActionVo{}
	mi := &file_pmp_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionVo) ProtoMessage() {}

func (x *ProductActionVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionVo.ProtoReflect.Descriptor instead.
func (*ProductActionVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{24}
}

func (x *ProductActionVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductActionVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ProductActionVo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *ProductActionVo) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *ProductActionVo) GetActionData() string {
	if x != nil {
		return x.ActionData
	}
	return ""
}

func (x *ProductActionVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProductActionVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductActionVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ProductActionVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ProductActionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *ProductActionVo       `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionReq) Reset() {
	*x = ProductActionReq{}
	mi := &file_pmp_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionReq) ProtoMessage() {}

func (x *ProductActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionReq.ProtoReflect.Descriptor instead.
func (*ProductActionReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{25}
}

func (x *ProductActionReq) GetVo() *ProductActionVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductActionListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *ProductActionVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionListReq) Reset() {
	*x = ProductActionListReq{}
	mi := &file_pmp_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionListReq) ProtoMessage() {}

func (x *ProductActionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionListReq.ProtoReflect.Descriptor instead.
func (*ProductActionListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{26}
}

func (x *ProductActionListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductActionListReq) GetVo() *ProductActionVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductActionListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductActionVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionListRes) Reset() {
	*x = ProductActionListRes{}
	mi := &file_pmp_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionListRes) ProtoMessage() {}

func (x *ProductActionListRes) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionListRes.ProtoReflect.Descriptor instead.
func (*ProductActionListRes) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{27}
}

func (x *ProductActionListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductActionListRes) GetList() []*ProductActionVo {
	if x != nil {
		return x.List
	}
	return nil
}

// AreaParam
type AreaParamVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Areas         string                 `protobuf:"bytes,4,opt,name=areas,proto3" json:"areas,omitempty"`
	ParamValue    string                 `protobuf:"bytes,5,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	Status        common.Status          `protobuf:"varint,6,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Sort          int64                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version       string                 `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreaParamVo) Reset() {
	*x = AreaParamVo{}
	mi := &file_pmp_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaParamVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaParamVo) ProtoMessage() {}

func (x *AreaParamVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaParamVo.ProtoReflect.Descriptor instead.
func (*AreaParamVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{28}
}

func (x *AreaParamVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaParamVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *AreaParamVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AreaParamVo) GetAreas() string {
	if x != nil {
		return x.Areas
	}
	return ""
}

func (x *AreaParamVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *AreaParamVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *AreaParamVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AreaParamVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AreaParamVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AreaParamVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AreaParamVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AreaParamListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *AreaParamVo           `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreaParamListReq) Reset() {
	*x = AreaParamListReq{}
	mi := &file_pmp_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaParamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaParamListReq) ProtoMessage() {}

func (x *AreaParamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaParamListReq.ProtoReflect.Descriptor instead.
func (*AreaParamListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{29}
}

func (x *AreaParamListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AreaParamListReq) GetVo() *AreaParamVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AreaParamListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AreaParamVo         `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreaParamListResp) Reset() {
	*x = AreaParamListResp{}
	mi := &file_pmp_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaParamListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaParamListResp) ProtoMessage() {}

func (x *AreaParamListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaParamListResp.ProtoReflect.Descriptor instead.
func (*AreaParamListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{30}
}

func (x *AreaParamListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AreaParamListResp) GetList() []*AreaParamVo {
	if x != nil {
		return x.List
	}
	return nil
}

type DictVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParentId      int64                  `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty"`
	DataType      string                 `protobuf:"bytes,4,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Payload       string                 `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Sort          int64                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        int64                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Remark        string                 `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictVo) Reset() {
	*x = DictVo{}
	mi := &file_pmp_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictVo) ProtoMessage() {}

func (x *DictVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictVo.ProtoReflect.Descriptor instead.
func (*DictVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{31}
}

func (x *DictVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DictVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *DictVo) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *DictVo) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *DictVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DictVo) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *DictVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DictVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DictVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DictVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DictVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type DictGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *DictVo                `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictGetReq) Reset() {
	*x = DictGetReq{}
	mi := &file_pmp_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictGetReq) ProtoMessage() {}

func (x *DictGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictGetReq.ProtoReflect.Descriptor instead.
func (*DictGetReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{32}
}

func (x *DictGetReq) GetVo() *DictVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type DictListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *DictVo                `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictListReq) Reset() {
	*x = DictListReq{}
	mi := &file_pmp_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictListReq) ProtoMessage() {}

func (x *DictListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictListReq.ProtoReflect.Descriptor instead.
func (*DictListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{33}
}

func (x *DictListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DictListReq) GetVo() *DictVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type DictListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*DictVo              `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictListResp) Reset() {
	*x = DictListResp{}
	mi := &file_pmp_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictListResp) ProtoMessage() {}

func (x *DictListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictListResp.ProtoReflect.Descriptor instead.
func (*DictListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{34}
}

func (x *DictListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DictListResp) GetList() []*DictVo {
	if x != nil {
		return x.List
	}
	return nil
}

// NationalLanguage
type NationalLanguageVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TbName        string                 `protobuf:"bytes,2,opt,name=tbName,proto3" json:"tbName,omitempty"`
	TbRowId       int64                  `protobuf:"varint,3,opt,name=tbRowId,proto3" json:"tbRowId,omitempty"`
	TbFieldName   string                 `protobuf:"bytes,4,opt,name=tbFieldName,proto3" json:"tbFieldName,omitempty"`
	Lan           string                 `protobuf:"bytes,5,opt,name=lan,proto3" json:"lan,omitempty"`
	Value         string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Status        common.Status          `protobuf:"varint,7,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NationalLanguageVo) Reset() {
	*x = NationalLanguageVo{}
	mi := &file_pmp_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NationalLanguageVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalLanguageVo) ProtoMessage() {}

func (x *NationalLanguageVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalLanguageVo.ProtoReflect.Descriptor instead.
func (*NationalLanguageVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{35}
}

func (x *NationalLanguageVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NationalLanguageVo) GetTbName() string {
	if x != nil {
		return x.TbName
	}
	return ""
}

func (x *NationalLanguageVo) GetTbRowId() int64 {
	if x != nil {
		return x.TbRowId
	}
	return 0
}

func (x *NationalLanguageVo) GetTbFieldName() string {
	if x != nil {
		return x.TbFieldName
	}
	return ""
}

func (x *NationalLanguageVo) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *NationalLanguageVo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NationalLanguageVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *NationalLanguageVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *NationalLanguageVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type NationalLanguageListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *NationalLanguageVo    `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NationalLanguageListReq) Reset() {
	*x = NationalLanguageListReq{}
	mi := &file_pmp_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NationalLanguageListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalLanguageListReq) ProtoMessage() {}

func (x *NationalLanguageListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalLanguageListReq.ProtoReflect.Descriptor instead.
func (*NationalLanguageListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{36}
}

func (x *NationalLanguageListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *NationalLanguageListReq) GetVo() *NationalLanguageVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type NationalLanguageListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*NationalLanguageVo  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NationalLanguageListResp) Reset() {
	*x = NationalLanguageListResp{}
	mi := &file_pmp_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NationalLanguageListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalLanguageListResp) ProtoMessage() {}

func (x *NationalLanguageListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalLanguageListResp.ProtoReflect.Descriptor instead.
func (*NationalLanguageListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{37}
}

func (x *NationalLanguageListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NationalLanguageListResp) GetList() []*NationalLanguageVo {
	if x != nil {
		return x.List
	}
	return nil
}

// Tip
type TipVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParamKey      string                 `protobuf:"bytes,3,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	ParamValue    string                 `protobuf:"bytes,4,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	I18Ns         []*I18NVo              `protobuf:"bytes,5,rep,name=i18ns,proto3" json:"i18ns,omitempty"`
	Code          string                 `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	ShowType      int64                  `protobuf:"varint,7,opt,name=showType,proto3" json:"showType,omitempty"`
	Sort          int64                  `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipVo) Reset() {
	*x = TipVo{}
	mi := &file_pmp_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipVo) ProtoMessage() {}

func (x *TipVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipVo.ProtoReflect.Descriptor instead.
func (*TipVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{38}
}

func (x *TipVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TipVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TipVo) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

func (x *TipVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *TipVo) GetI18Ns() []*I18NVo {
	if x != nil {
		return x.I18Ns
	}
	return nil
}

func (x *TipVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TipVo) GetShowType() int64 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *TipVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TipVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TipVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TipVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type TipListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *TipVo                 `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipListReq) Reset() {
	*x = TipListReq{}
	mi := &file_pmp_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipListReq) ProtoMessage() {}

func (x *TipListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipListReq.ProtoReflect.Descriptor instead.
func (*TipListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{39}
}

func (x *TipListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TipListReq) GetVo() *TipVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type TipListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*TipVo               `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipListResp) Reset() {
	*x = TipListResp{}
	mi := &file_pmp_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipListResp) ProtoMessage() {}

func (x *TipListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipListResp.ProtoReflect.Descriptor instead.
func (*TipListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{40}
}

func (x *TipListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TipListResp) GetList() []*TipVo {
	if x != nil {
		return x.List
	}
	return nil
}

type TipKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductCode   string                 `protobuf:"bytes,1,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParamKey      string                 `protobuf:"bytes,2,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipKey) Reset() {
	*x = TipKey{}
	mi := &file_pmp_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipKey) ProtoMessage() {}

func (x *TipKey) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipKey.ProtoReflect.Descriptor instead.
func (*TipKey) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{41}
}

func (x *TipKey) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TipKey) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

type TipDelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Keys          []*TipKey              `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipDelReq) Reset() {
	*x = TipDelReq{}
	mi := &file_pmp_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipDelReq) ProtoMessage() {}

func (x *TipDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipDelReq.ProtoReflect.Descriptor instead.
func (*TipDelReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{42}
}

func (x *TipDelReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TipDelReq) GetKeys() []*TipKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type UpgradePkgPlanVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"` // 产品code
	Areas         string                 `protobuf:"bytes,3,opt,name=areas,proto3" json:"areas,omitempty"`             // 地区列表
	Sort          int64                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        common.Status          `protobuf:"varint,5,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"` // 状态
	Remark        string                 `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanVo) Reset() {
	*x = UpgradePkgPlanVo{}
	mi := &file_pmp_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanVo) ProtoMessage() {}

func (x *UpgradePkgPlanVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanVo.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{43}
}

func (x *UpgradePkgPlanVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradePkgPlanVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UpgradePkgPlanVo) GetAreas() string {
	if x != nil {
		return x.Areas
	}
	return ""
}

func (x *UpgradePkgPlanVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpgradePkgPlanVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UpgradePkgPlanVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradePkgPlanVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradePkgPlanVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradePkgPlanDetailVo struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId                   int64                  `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`                                     // 方案ID
	Platform                 string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`                                  // 平台
	Channel                  string                 `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`                                    // 渠道
	Name                     string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                          // 名称
	Ver                      int64                  `protobuf:"varint,6,opt,name=ver,proto3" json:"ver,omitempty"`                                           // 版本号
	Url                      string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`                                            // 商店地址
	WebsiteUrl               string                 `protobuf:"bytes,8,opt,name=websiteUrl,proto3" json:"websiteUrl,omitempty"`                              // 官网地址
	DirectUrl                string                 `protobuf:"bytes,9,opt,name=directUrl,proto3" json:"directUrl,omitempty"`                                // 直接下载地址
	Md5                      string                 `protobuf:"bytes,10,opt,name=md5,proto3" json:"md5,omitempty"`                                           // MD5
	Info                     string                 `protobuf:"bytes,11,opt,name=info,proto3" json:"info,omitempty"`                                         // 更新信息
	TestUpgradePolicyConfig  string                 `protobuf:"bytes,12,opt,name=testUpgradePolicyConfig,proto3" json:"testUpgradePolicyConfig,omitempty"`   // 测试更新策略配置
	UpgradePolicyConfig      string                 `protobuf:"bytes,13,opt,name=upgradePolicyConfig,proto3" json:"upgradePolicyConfig,omitempty"`           // 更新策略配置
	ForceUpgradePolicyConfig string                 `protobuf:"bytes,14,opt,name=forceUpgradePolicyConfig,proto3" json:"forceUpgradePolicyConfig,omitempty"` // 强制更新策略
	Status                   common.Status          `protobuf:"varint,15,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`                 // 状态
	Remark                   string                 `protobuf:"bytes,16,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime               int64                  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime               int64                  `protobuf:"varint,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpgradePkgPlanDetailVo) Reset() {
	*x = UpgradePkgPlanDetailVo{}
	mi := &file_pmp_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanDetailVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanDetailVo) ProtoMessage() {}

func (x *UpgradePkgPlanDetailVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanDetailVo.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanDetailVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{44}
}

func (x *UpgradePkgPlanDetailVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetVer() int64 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetWebsiteUrl() string {
	if x != nil {
		return x.WebsiteUrl
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetDirectUrl() string {
	if x != nil {
		return x.DirectUrl
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetTestUpgradePolicyConfig() string {
	if x != nil {
		return x.TestUpgradePolicyConfig
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetUpgradePolicyConfig() string {
	if x != nil {
		return x.UpgradePolicyConfig
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetForceUpgradePolicyConfig() string {
	if x != nil {
		return x.ForceUpgradePolicyConfig
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UpgradePkgPlanDetailVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradePkgPlanListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradePkgPlanVo      `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanListReq) Reset() {
	*x = UpgradePkgPlanListReq{}
	mi := &file_pmp_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanListReq) ProtoMessage() {}

func (x *UpgradePkgPlanListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanListReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{45}
}

func (x *UpgradePkgPlanListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradePkgPlanListReq) GetVo() *UpgradePkgPlanVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradePkgPlanListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradePkgPlanVo    `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanListResp) Reset() {
	*x = UpgradePkgPlanListResp{}
	mi := &file_pmp_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanListResp) ProtoMessage() {}

func (x *UpgradePkgPlanListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanListResp.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{46}
}

func (x *UpgradePkgPlanListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradePkgPlanListResp) GetList() []*UpgradePkgPlanVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradePkgPlanDetailListReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Page          *common.Page            `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradePkgPlanDetailVo `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	PlanIds       []int64                 `protobuf:"varint,3,rep,packed,name=planIds,proto3" json:"planIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanDetailListReq) Reset() {
	*x = UpgradePkgPlanDetailListReq{}
	mi := &file_pmp_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanDetailListReq) ProtoMessage() {}

func (x *UpgradePkgPlanDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanDetailListReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanDetailListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{47}
}

func (x *UpgradePkgPlanDetailListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradePkgPlanDetailListReq) GetVo() *UpgradePkgPlanDetailVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *UpgradePkgPlanDetailListReq) GetPlanIds() []int64 {
	if x != nil {
		return x.PlanIds
	}
	return nil
}

type UpgradePkgPlanDetailListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Total         int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradePkgPlanDetailVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanDetailListResp) Reset() {
	*x = UpgradePkgPlanDetailListResp{}
	mi := &file_pmp_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanDetailListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanDetailListResp) ProtoMessage() {}

func (x *UpgradePkgPlanDetailListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanDetailListResp.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanDetailListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{48}
}

func (x *UpgradePkgPlanDetailListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradePkgPlanDetailListResp) GetList() []*UpgradePkgPlanDetailVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradeResPlanVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"` // 产品code
	Areas         string                 `protobuf:"bytes,3,opt,name=areas,proto3" json:"areas,omitempty"`             // 地区列表
	Sort          int64                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        common.Status          `protobuf:"varint,5,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"` // 状态
	Remark        string                 `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanVo) Reset() {
	*x = UpgradeResPlanVo{}
	mi := &file_pmp_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanVo) ProtoMessage() {}

func (x *UpgradeResPlanVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanVo.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{49}
}

func (x *UpgradeResPlanVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResPlanVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UpgradeResPlanVo) GetAreas() string {
	if x != nil {
		return x.Areas
	}
	return ""
}

func (x *UpgradeResPlanVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpgradeResPlanVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UpgradeResPlanVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResPlanVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResPlanVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradeResPlanDetailVo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // ID
	PlanId             int64                  `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`                          // 方案ID
	Title              string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	Path               string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`                               // 解压后的资源路径
	FileMd5            string                 `protobuf:"bytes,5,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`                         // zip文件md5值
	FilePath           string                 `protobuf:"bytes,6,opt,name=filePath,proto3" json:"filePath,omitempty"`                       // zip文件路径
	ResSize            int64                  `protobuf:"varint,7,opt,name=resSize,proto3" json:"resSize,omitempty"`                        // 资源大小
	MetadataId         string                 `protobuf:"bytes,8,opt,name=metadataId,proto3" json:"metadataId,omitempty"`                   // metadata.json文件内容sh256 hash值
	CreatedAt          string                 `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                     // new Date(metadataStat.birthtime).toISOString()
	RuntimeVersion     string                 `protobuf:"bytes,10,opt,name=runtimeVersion,proto3" json:"runtimeVersion,omitempty"`          // expo sdk 版本
	RuntimeVersionCode int64                  `protobuf:"varint,11,opt,name=runtimeVersionCode,proto3" json:"runtimeVersionCode,omitempty"` // 资源版本号
	AppVersionName     string                 `protobuf:"bytes,12,opt,name=appVersionName,proto3" json:"appVersionName,omitempty"`          // app 版本名称
	AppVersionCode     int64                  `protobuf:"varint,13,opt,name=appVersionCode,proto3" json:"appVersionCode,omitempty"`         // app 版本号
	Status             common.Status          `protobuf:"varint,14,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`      // 状态,1=正常,2=冻结
	Remark             string                 `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`                          // 备注
	CreateTime         int64                  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`                 // 创建时间秒
	UpdateTime         int64                  `protobuf:"varint,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                 // 修改时间秒
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpgradeResPlanDetailVo) Reset() {
	*x = UpgradeResPlanDetailVo{}
	mi := &file_pmp_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanDetailVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanDetailVo) ProtoMessage() {}

func (x *UpgradeResPlanDetailVo) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanDetailVo.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanDetailVo) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{50}
}

func (x *UpgradeResPlanDetailVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetResSize() int64 {
	if x != nil {
		return x.ResSize
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetMetadataId() string {
	if x != nil {
		return x.MetadataId
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetRuntimeVersionCode() int64 {
	if x != nil {
		return x.RuntimeVersionCode
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetAppVersionName() string {
	if x != nil {
		return x.AppVersionName
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetAppVersionCode() int64 {
	if x != nil {
		return x.AppVersionCode
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *UpgradeResPlanDetailVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradeResPlanListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResPlanVo      `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanListReq) Reset() {
	*x = UpgradeResPlanListReq{}
	mi := &file_pmp_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanListReq) ProtoMessage() {}

func (x *UpgradeResPlanListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{51}
}

func (x *UpgradeResPlanListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResPlanListReq) GetVo() *UpgradeResPlanVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResPlanListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResPlanVo    `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanListResp) Reset() {
	*x = UpgradeResPlanListResp{}
	mi := &file_pmp_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanListResp) ProtoMessage() {}

func (x *UpgradeResPlanListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{52}
}

func (x *UpgradeResPlanListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResPlanListResp) GetList() []*UpgradeResPlanVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradeResPlanDetailListReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Page          *common.Page            `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResPlanDetailVo `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	PlanIds       []int64                 `protobuf:"varint,3,rep,packed,name=planIds,proto3" json:"planIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanDetailListReq) Reset() {
	*x = UpgradeResPlanDetailListReq{}
	mi := &file_pmp_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanDetailListReq) ProtoMessage() {}

func (x *UpgradeResPlanDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanDetailListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanDetailListReq) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{53}
}

func (x *UpgradeResPlanDetailListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResPlanDetailListReq) GetVo() *UpgradeResPlanDetailVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *UpgradeResPlanDetailListReq) GetPlanIds() []int64 {
	if x != nil {
		return x.PlanIds
	}
	return nil
}

type UpgradeResPlanDetailListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Total         int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResPlanDetailVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanDetailListResp) Reset() {
	*x = UpgradeResPlanDetailListResp{}
	mi := &file_pmp_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanDetailListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanDetailListResp) ProtoMessage() {}

func (x *UpgradeResPlanDetailListResp) ProtoReflect() protoreflect.Message {
	mi := &file_pmp_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanDetailListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanDetailListResp) Descriptor() ([]byte, []int) {
	return file_pmp_proto_rawDescGZIP(), []int{54}
}

func (x *UpgradeResPlanDetailListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResPlanDetailListResp) GetList() []*UpgradeResPlanDetailVo {
	if x != nil {
		return x.List
	}
	return nil
}

var File_pmp_proto protoreflect.FileDescriptor

var file_pmp_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x70, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x6d, 0x70,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32,
	0x0a, 0x06, 0x49, 0x31, 0x38, 0x6e, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xfe, 0x03, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x73, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xe6, 0x05, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72,
	0x65, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x70, 0x69, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x26, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x06, 0x0a,
	0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x6c,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x72,
	0x6f, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x4a, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x64, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5d, 0x0a, 0x18, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6b, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x02, 0x76, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x58, 0x0a,
	0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b,
	0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x51, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x10, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x58, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x51, 0x0a, 0x12, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3c,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x22, 0x32, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xb6, 0x04, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x49, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x6d,
	0x75, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x08,
	0x6d, 0x75, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x12, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56,
	0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x53, 0x0a, 0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x52, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x22, 0x4b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x84, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x75, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6d, 0x75, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x22, 0x55, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x5e, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x56, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x0b, 0x41, 0x72,
	0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x10, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x4f, 0x0a, 0x11, 0x41,
	0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x02, 0x0a,
	0x06, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x4c,
	0x0a, 0x0b, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x45, 0x0a, 0x0c,
	0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x62, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x62, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x64,
	0x0a, 0x17, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x22, 0x5d, 0x0a, 0x18, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x05, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x69,
	0x31, 0x38, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x49, 0x31, 0x38, 0x6e, 0x56, 0x6f, 0x52, 0x05, 0x69, 0x31, 0x38, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x54, 0x69,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x76, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x70,
	0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x43, 0x0a, 0x0b, 0x54, 0x69, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x6d, 0x70, 0x2e,
	0x54, 0x69, 0x70, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x06, 0x54,
	0x69, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x4b, 0x65, 0x79, 0x22, 0x3e, 0x0a, 0x09, 0x54, 0x69, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xba, 0x04, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x65, 0x73, 0x74,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x60, 0x0a, 0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x02,
	0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x52,
	0x02, 0x76, 0x6f, 0x22, 0x59, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x86,
	0x01, 0x0a, 0x1b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xee,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xa0, 0x04, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x60, 0x0a, 0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x22, 0x59, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x86, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32,
	0xb3, 0x23, 0x0a, 0x0b, 0x47, 0x6f, 0x50, 0x6d, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x12, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f,
	0x1a, 0x12, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x56, 0x6f, 0x12, 0x3b, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x6d, 0x70, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x12, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56,
	0x6f, 0x12, 0x2c, 0x0a, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65,
	0x74, 0x12, 0x12, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x12, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x0e, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x2e, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x0e, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x6d, 0x70, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65,
	0x74, 0x12, 0x13, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x13, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x47, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x6d, 0x70, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x14,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x3a, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64,
	0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3f, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x12, 0x49, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0c,
	0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x10, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x10,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f,
	0x12, 0x35, 0x0a, 0x0f, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x10, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x2a, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x10, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x3e, 0x0a, 0x0d, 0x41, 0x72, 0x65, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41,
	0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x12, 0x17,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x1a, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f,
	0x12, 0x4a, 0x0a, 0x16, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x56, 0x6f, 0x1a, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x12, 0x31, 0x0a, 0x13,
	0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x47, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x1a,
	0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x12, 0x53, 0x0a, 0x14, 0x4e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a,
	0x06, 0x54, 0x69, 0x70, 0x41, 0x64, 0x64, 0x12, 0x0a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54, 0x69,
	0x70, 0x56, 0x6f, 0x1a, 0x0a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x12,
	0x23, 0x0a, 0x09, 0x54, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x1a, 0x0a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54,
	0x69, 0x70, 0x56, 0x6f, 0x12, 0x27, 0x0a, 0x06, 0x54, 0x69, 0x70, 0x44, 0x65, 0x6c, 0x12, 0x0e,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x06, 0x54, 0x69, 0x70, 0x47, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54, 0x69,
	0x70, 0x56, 0x6f, 0x1a, 0x0a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x12,
	0x2c, 0x0a, 0x07, 0x54, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x54, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x54, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a,
	0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x41, 0x64, 0x64, 0x12, 0x11,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56,
	0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x56, 0x6f, 0x12, 0x34, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0d, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x70, 0x6d,
	0x70, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x39, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a,
	0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x41, 0x64, 0x64, 0x12, 0x11,
	0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56,
	0x6f, 0x1a, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x56, 0x6f, 0x12, 0x34, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0d, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67,
	0x56, 0x6f, 0x12, 0x41, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x64, 0x64, 0x12, 0x17, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x6f, 0x1a, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12, 0x40,
	0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x31, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f,
	0x12, 0x53, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x07, 0x44, 0x69, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x12, 0x0b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x0b, 0x2e,
	0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x28, 0x0a, 0x0a, 0x44, 0x69,
	0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x44,
	0x69, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x69, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x12,
	0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x44,
	0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69, 0x63,
	0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x56, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x10, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56,
	0x6f, 0x1a, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12, 0x3c, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x56, 0x6f, 0x1a, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x17, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56,
	0x6f, 0x1a, 0x1b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x48,
	0x0a, 0x1a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x53, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x1b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x56, 0x6f, 0x12, 0x5f, 0x0a, 0x18, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56,
	0x6f, 0x1a, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12, 0x3c, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x56, 0x6f, 0x1a, 0x15, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x17, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56,
	0x6f, 0x1a, 0x1b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x48,
	0x0a, 0x1a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70,
	0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x53, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x6d, 0x70,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x1b, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x56, 0x6f, 0x12, 0x5f, 0x0a, 0x18, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x6d, 0x70, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x31, 0x33, 0x35, 0x34, 0x32, 0x32, 0x39, 0x39, 0x36, 0x2f, 0x67,
	0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x62, 0x2f, 0x67, 0x6f, 0x7a,
	0x65, 0x72, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x6d, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_pmp_proto_rawDescOnce sync.Once
	file_pmp_proto_rawDescData []byte
)

func file_pmp_proto_rawDescGZIP() []byte {
	file_pmp_proto_rawDescOnce.Do(func() {
		file_pmp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pmp_proto_rawDesc), len(file_pmp_proto_rawDesc)))
	})
	return file_pmp_proto_rawDescData
}

var file_pmp_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_pmp_proto_goTypes = []any{
	(*I18NVo)(nil),                       // 0: pmp.I18nVo
	(*UpgradeResVo)(nil),                 // 1: pmp.UpgradeResVo
	(*UpgradeResConfigVo)(nil),           // 2: pmp.UpgradeResConfigVo
	(*UpgradePkgVo)(nil),                 // 3: pmp.UpgradePkgVo
	(*UpgradeResConfigGetReq)(nil),       // 4: pmp.UpgradeResConfigGetReq
	(*UpgradeResConfigListReq)(nil),      // 5: pmp.UpgradeResConfigListReq
	(*UpgradeResConfigListResp)(nil),     // 6: pmp.UpgradeResConfigListResp
	(*UpgradePkgGetReq)(nil),             // 7: pmp.UpgradePkgGetReq
	(*UpgradePkgListReq)(nil),            // 8: pmp.UpgradePkgListReq
	(*UpgradePkgListResp)(nil),           // 9: pmp.UpgradePkgListResp
	(*UpgradeResGetReq)(nil),             // 10: pmp.UpgradeResGetReq
	(*UpgradeResListReq)(nil),            // 11: pmp.UpgradeResListReq
	(*UpgradeResListResp)(nil),           // 12: pmp.UpgradeResListResp
	(*ResourceDelReq)(nil),               // 13: pmp.ResourceDelReq
	(*ConfigGetReq)(nil),                 // 14: pmp.ConfigGetReq
	(*GlobalParamVo)(nil),                // 15: pmp.GlobalParamVo
	(*GlobalParamListReq)(nil),           // 16: pmp.GlobalParamListReq
	(*GlobalParamListResp)(nil),          // 17: pmp.GlobalParamListResp
	(*ProductVo)(nil),                    // 18: pmp.ProductVo
	(*ProductListReq)(nil),               // 19: pmp.ProductListReq
	(*ProductListResp)(nil),              // 20: pmp.ProductListResp
	(*ProductParamVo)(nil),               // 21: pmp.ProductParamVo
	(*ProductParamListReq)(nil),          // 22: pmp.ProductParamListReq
	(*ProductParamListResp)(nil),         // 23: pmp.ProductParamListResp
	(*ProductActionVo)(nil),              // 24: pmp.ProductActionVo
	(*ProductActionReq)(nil),             // 25: pmp.ProductActionReq
	(*ProductActionListReq)(nil),         // 26: pmp.ProductActionListReq
	(*ProductActionListRes)(nil),         // 27: pmp.ProductActionListRes
	(*AreaParamVo)(nil),                  // 28: pmp.AreaParamVo
	(*AreaParamListReq)(nil),             // 29: pmp.AreaParamListReq
	(*AreaParamListResp)(nil),            // 30: pmp.AreaParamListResp
	(*DictVo)(nil),                       // 31: pmp.DictVo
	(*DictGetReq)(nil),                   // 32: pmp.DictGetReq
	(*DictListReq)(nil),                  // 33: pmp.DictListReq
	(*DictListResp)(nil),                 // 34: pmp.DictListResp
	(*NationalLanguageVo)(nil),           // 35: pmp.NationalLanguageVo
	(*NationalLanguageListReq)(nil),      // 36: pmp.NationalLanguageListReq
	(*NationalLanguageListResp)(nil),     // 37: pmp.NationalLanguageListResp
	(*TipVo)(nil),                        // 38: pmp.TipVo
	(*TipListReq)(nil),                   // 39: pmp.TipListReq
	(*TipListResp)(nil),                  // 40: pmp.TipListResp
	(*TipKey)(nil),                       // 41: pmp.TipKey
	(*TipDelReq)(nil),                    // 42: pmp.TipDelReq
	(*UpgradePkgPlanVo)(nil),             // 43: pmp.UpgradePkgPlanVo
	(*UpgradePkgPlanDetailVo)(nil),       // 44: pmp.UpgradePkgPlanDetailVo
	(*UpgradePkgPlanListReq)(nil),        // 45: pmp.UpgradePkgPlanListReq
	(*UpgradePkgPlanListResp)(nil),       // 46: pmp.UpgradePkgPlanListResp
	(*UpgradePkgPlanDetailListReq)(nil),  // 47: pmp.UpgradePkgPlanDetailListReq
	(*UpgradePkgPlanDetailListResp)(nil), // 48: pmp.UpgradePkgPlanDetailListResp
	(*UpgradeResPlanVo)(nil),             // 49: pmp.UpgradeResPlanVo
	(*UpgradeResPlanDetailVo)(nil),       // 50: pmp.UpgradeResPlanDetailVo
	(*UpgradeResPlanListReq)(nil),        // 51: pmp.UpgradeResPlanListReq
	(*UpgradeResPlanListResp)(nil),       // 52: pmp.UpgradeResPlanListResp
	(*UpgradeResPlanDetailListReq)(nil),  // 53: pmp.UpgradeResPlanDetailListReq
	(*UpgradeResPlanDetailListResp)(nil), // 54: pmp.UpgradeResPlanDetailListResp
	(common.Status)(0),                   // 55: common.Status
	(*common.Page)(nil),                  // 56: common.Page
	(common.BoolInt)(0),                  // 57: common.BoolInt
	(*common.Request)(nil),               // 58: common.Request
	(*common.Ids)(nil),                   // 59: common.Ids
	(*common.Response)(nil),              // 60: common.Response
	(*common.Empty)(nil),                 // 61: common.Empty
}
var file_pmp_proto_depIdxs = []int32{
	55,  // 0: pmp.UpgradeResVo.status:type_name -> common.Status
	55,  // 1: pmp.UpgradeResConfigVo.status:type_name -> common.Status
	55,  // 2: pmp.UpgradePkgVo.status:type_name -> common.Status
	56,  // 3: pmp.UpgradeResConfigGetReq.page:type_name -> common.Page
	56,  // 4: pmp.UpgradeResConfigListReq.page:type_name -> common.Page
	2,   // 5: pmp.UpgradeResConfigListReq.vo:type_name -> pmp.UpgradeResConfigVo
	2,   // 6: pmp.UpgradeResConfigListResp.list:type_name -> pmp.UpgradeResConfigVo
	3,   // 7: pmp.UpgradePkgGetReq.vo:type_name -> pmp.UpgradePkgVo
	56,  // 8: pmp.UpgradePkgListReq.page:type_name -> common.Page
	3,   // 9: pmp.UpgradePkgListReq.vo:type_name -> pmp.UpgradePkgVo
	3,   // 10: pmp.UpgradePkgListResp.list:type_name -> pmp.UpgradePkgVo
	1,   // 11: pmp.UpgradeResGetReq.vo:type_name -> pmp.UpgradeResVo
	56,  // 12: pmp.UpgradeResListReq.page:type_name -> common.Page
	1,   // 13: pmp.UpgradeResListReq.vo:type_name -> pmp.UpgradeResVo
	1,   // 14: pmp.UpgradeResListResp.list:type_name -> pmp.UpgradeResVo
	57,  // 15: pmp.GlobalParamVo.editable:type_name -> common.BoolInt
	57,  // 16: pmp.GlobalParamVo.nullable:type_name -> common.BoolInt
	57,  // 17: pmp.GlobalParamVo.hidden:type_name -> common.BoolInt
	57,  // 18: pmp.GlobalParamVo.mutiLang:type_name -> common.BoolInt
	57,  // 19: pmp.GlobalParamVo.apiExport:type_name -> common.BoolInt
	56,  // 20: pmp.GlobalParamListReq.page:type_name -> common.Page
	15,  // 21: pmp.GlobalParamListReq.vo:type_name -> pmp.GlobalParamVo
	15,  // 22: pmp.GlobalParamListResp.list:type_name -> pmp.GlobalParamVo
	55,  // 23: pmp.ProductVo.status:type_name -> common.Status
	56,  // 24: pmp.ProductListReq.page:type_name -> common.Page
	18,  // 25: pmp.ProductListReq.vo:type_name -> pmp.ProductVo
	18,  // 26: pmp.ProductListResp.list:type_name -> pmp.ProductVo
	21,  // 27: pmp.ProductParamListReq.vo:type_name -> pmp.ProductParamVo
	21,  // 28: pmp.ProductParamListResp.list:type_name -> pmp.ProductParamVo
	24,  // 29: pmp.ProductActionReq.vo:type_name -> pmp.ProductActionVo
	56,  // 30: pmp.ProductActionListReq.page:type_name -> common.Page
	24,  // 31: pmp.ProductActionListReq.vo:type_name -> pmp.ProductActionVo
	24,  // 32: pmp.ProductActionListRes.list:type_name -> pmp.ProductActionVo
	55,  // 33: pmp.AreaParamVo.status:type_name -> common.Status
	56,  // 34: pmp.AreaParamListReq.page:type_name -> common.Page
	28,  // 35: pmp.AreaParamListReq.vo:type_name -> pmp.AreaParamVo
	28,  // 36: pmp.AreaParamListResp.list:type_name -> pmp.AreaParamVo
	31,  // 37: pmp.DictGetReq.vo:type_name -> pmp.DictVo
	56,  // 38: pmp.DictListReq.page:type_name -> common.Page
	31,  // 39: pmp.DictListReq.vo:type_name -> pmp.DictVo
	31,  // 40: pmp.DictListResp.list:type_name -> pmp.DictVo
	55,  // 41: pmp.NationalLanguageVo.status:type_name -> common.Status
	56,  // 42: pmp.NationalLanguageListReq.page:type_name -> common.Page
	35,  // 43: pmp.NationalLanguageListReq.vo:type_name -> pmp.NationalLanguageVo
	35,  // 44: pmp.NationalLanguageListResp.list:type_name -> pmp.NationalLanguageVo
	0,   // 45: pmp.TipVo.i18ns:type_name -> pmp.I18nVo
	56,  // 46: pmp.TipListReq.page:type_name -> common.Page
	38,  // 47: pmp.TipListReq.vo:type_name -> pmp.TipVo
	38,  // 48: pmp.TipListResp.list:type_name -> pmp.TipVo
	41,  // 49: pmp.TipDelReq.keys:type_name -> pmp.TipKey
	55,  // 50: pmp.UpgradePkgPlanVo.status:type_name -> common.Status
	55,  // 51: pmp.UpgradePkgPlanDetailVo.status:type_name -> common.Status
	56,  // 52: pmp.UpgradePkgPlanListReq.page:type_name -> common.Page
	43,  // 53: pmp.UpgradePkgPlanListReq.vo:type_name -> pmp.UpgradePkgPlanVo
	43,  // 54: pmp.UpgradePkgPlanListResp.list:type_name -> pmp.UpgradePkgPlanVo
	56,  // 55: pmp.UpgradePkgPlanDetailListReq.page:type_name -> common.Page
	44,  // 56: pmp.UpgradePkgPlanDetailListReq.vo:type_name -> pmp.UpgradePkgPlanDetailVo
	44,  // 57: pmp.UpgradePkgPlanDetailListResp.list:type_name -> pmp.UpgradePkgPlanDetailVo
	55,  // 58: pmp.UpgradeResPlanVo.status:type_name -> common.Status
	55,  // 59: pmp.UpgradeResPlanDetailVo.status:type_name -> common.Status
	56,  // 60: pmp.UpgradeResPlanListReq.page:type_name -> common.Page
	49,  // 61: pmp.UpgradeResPlanListReq.vo:type_name -> pmp.UpgradeResPlanVo
	49,  // 62: pmp.UpgradeResPlanListResp.list:type_name -> pmp.UpgradeResPlanVo
	56,  // 63: pmp.UpgradeResPlanDetailListReq.page:type_name -> common.Page
	50,  // 64: pmp.UpgradeResPlanDetailListReq.vo:type_name -> pmp.UpgradeResPlanDetailVo
	50,  // 65: pmp.UpgradeResPlanDetailListResp.list:type_name -> pmp.UpgradeResPlanDetailVo
	58,  // 66: pmp.GoPmpClient.Ping:input_type -> common.Request
	15,  // 67: pmp.GoPmpClient.GlobalParamAdd:input_type -> pmp.GlobalParamVo
	15,  // 68: pmp.GoPmpClient.GlobalParamUpdate:input_type -> pmp.GlobalParamVo
	59,  // 69: pmp.GoPmpClient.GlobalParamDel:input_type -> common.Ids
	15,  // 70: pmp.GoPmpClient.GlobalParamGet:input_type -> pmp.GlobalParamVo
	16,  // 71: pmp.GoPmpClient.GlobalParamList:input_type -> pmp.GlobalParamListReq
	18,  // 72: pmp.GoPmpClient.ProductAdd:input_type -> pmp.ProductVo
	18,  // 73: pmp.GoPmpClient.ProductUpdate:input_type -> pmp.ProductVo
	59,  // 74: pmp.GoPmpClient.ProductDel:input_type -> common.Ids
	18,  // 75: pmp.GoPmpClient.ProductGet:input_type -> pmp.ProductVo
	19,  // 76: pmp.GoPmpClient.ProductList:input_type -> pmp.ProductListReq
	58,  // 77: pmp.GoPmpClient.ProductAll:input_type -> common.Request
	21,  // 78: pmp.GoPmpClient.ProductParamUpdate:input_type -> pmp.ProductParamVo
	21,  // 79: pmp.GoPmpClient.ProductParamGet:input_type -> pmp.ProductParamVo
	22,  // 80: pmp.GoPmpClient.ProductParamList:input_type -> pmp.ProductParamListReq
	24,  // 81: pmp.GoPmpClient.ProductActionAdd:input_type -> pmp.ProductActionVo
	24,  // 82: pmp.GoPmpClient.ProductActionUpdate:input_type -> pmp.ProductActionVo
	59,  // 83: pmp.GoPmpClient.ProductActionDel:input_type -> common.Ids
	25,  // 84: pmp.GoPmpClient.ProductActionGet:input_type -> pmp.ProductActionReq
	26,  // 85: pmp.GoPmpClient.ProductActionList:input_type -> pmp.ProductActionListReq
	28,  // 86: pmp.GoPmpClient.AreaParamAdd:input_type -> pmp.AreaParamVo
	28,  // 87: pmp.GoPmpClient.AreaParamUpdate:input_type -> pmp.AreaParamVo
	59,  // 88: pmp.GoPmpClient.AreaParamDel:input_type -> common.Ids
	28,  // 89: pmp.GoPmpClient.AreaParamGet:input_type -> pmp.AreaParamVo
	29,  // 90: pmp.GoPmpClient.AreaParamList:input_type -> pmp.AreaParamListReq
	35,  // 91: pmp.GoPmpClient.NationalLanguageAdd:input_type -> pmp.NationalLanguageVo
	35,  // 92: pmp.GoPmpClient.NationalLanguageUpdate:input_type -> pmp.NationalLanguageVo
	59,  // 93: pmp.GoPmpClient.NationalLanguageDel:input_type -> common.Ids
	35,  // 94: pmp.GoPmpClient.NationalLanguageGet:input_type -> pmp.NationalLanguageVo
	36,  // 95: pmp.GoPmpClient.NationalLanguageList:input_type -> pmp.NationalLanguageListReq
	38,  // 96: pmp.GoPmpClient.TipAdd:input_type -> pmp.TipVo
	38,  // 97: pmp.GoPmpClient.TipUpdate:input_type -> pmp.TipVo
	42,  // 98: pmp.GoPmpClient.TipDel:input_type -> pmp.TipDelReq
	38,  // 99: pmp.GoPmpClient.TipGet:input_type -> pmp.TipVo
	39,  // 100: pmp.GoPmpClient.TipList:input_type -> pmp.TipListReq
	1,   // 101: pmp.GoPmpClient.UpgradeResAdd:input_type -> pmp.UpgradeResVo
	1,   // 102: pmp.GoPmpClient.UpgradeResUpdate:input_type -> pmp.UpgradeResVo
	13,  // 103: pmp.GoPmpClient.UpgradeResDel:input_type -> pmp.ResourceDelReq
	10,  // 104: pmp.GoPmpClient.UpgradeResGet:input_type -> pmp.UpgradeResGetReq
	11,  // 105: pmp.GoPmpClient.UpgradeResList:input_type -> pmp.UpgradeResListReq
	3,   // 106: pmp.GoPmpClient.UpgradePkgAdd:input_type -> pmp.UpgradePkgVo
	3,   // 107: pmp.GoPmpClient.UpgradePkgUpdate:input_type -> pmp.UpgradePkgVo
	59,  // 108: pmp.GoPmpClient.UpgradePkgDel:input_type -> common.Ids
	7,   // 109: pmp.GoPmpClient.UpgradePkgGet:input_type -> pmp.UpgradePkgGetReq
	8,   // 110: pmp.GoPmpClient.UpgradePkgList:input_type -> pmp.UpgradePkgListReq
	2,   // 111: pmp.GoPmpClient.UpgradeResConfigAdd:input_type -> pmp.UpgradeResConfigVo
	2,   // 112: pmp.GoPmpClient.UpgradeResConfigUpdate:input_type -> pmp.UpgradeResConfigVo
	59,  // 113: pmp.GoPmpClient.UpgradeResConfigDel:input_type -> common.Ids
	4,   // 114: pmp.GoPmpClient.UpgradeResConfigGet:input_type -> pmp.UpgradeResConfigGetReq
	5,   // 115: pmp.GoPmpClient.UpgradeResConfigList:input_type -> pmp.UpgradeResConfigListReq
	31,  // 116: pmp.GoPmpClient.DictAdd:input_type -> pmp.DictVo
	31,  // 117: pmp.GoPmpClient.DictUpdate:input_type -> pmp.DictVo
	59,  // 118: pmp.GoPmpClient.DictDel:input_type -> common.Ids
	32,  // 119: pmp.GoPmpClient.DictGet:input_type -> pmp.DictGetReq
	33,  // 120: pmp.GoPmpClient.DictList:input_type -> pmp.DictListReq
	43,  // 121: pmp.GoPmpClient.UpgradePkgPlanAdd:input_type -> pmp.UpgradePkgPlanVo
	43,  // 122: pmp.GoPmpClient.UpgradePkgPlanUpdate:input_type -> pmp.UpgradePkgPlanVo
	59,  // 123: pmp.GoPmpClient.UpgradePkgPlanDel:input_type -> common.Ids
	43,  // 124: pmp.GoPmpClient.UpgradePkgPlanGet:input_type -> pmp.UpgradePkgPlanVo
	45,  // 125: pmp.GoPmpClient.UpgradePkgPlanList:input_type -> pmp.UpgradePkgPlanListReq
	44,  // 126: pmp.GoPmpClient.UpgradePkgPlanDetailAdd:input_type -> pmp.UpgradePkgPlanDetailVo
	44,  // 127: pmp.GoPmpClient.UpgradePkgPlanDetailUpdate:input_type -> pmp.UpgradePkgPlanDetailVo
	59,  // 128: pmp.GoPmpClient.UpgradePkgPlanDetailDel:input_type -> common.Ids
	44,  // 129: pmp.GoPmpClient.UpgradePkgPlanDetailGet:input_type -> pmp.UpgradePkgPlanDetailVo
	47,  // 130: pmp.GoPmpClient.UpgradePkgPlanDetailList:input_type -> pmp.UpgradePkgPlanDetailListReq
	49,  // 131: pmp.GoPmpClient.UpgradeResPlanAdd:input_type -> pmp.UpgradeResPlanVo
	49,  // 132: pmp.GoPmpClient.UpgradeResPlanUpdate:input_type -> pmp.UpgradeResPlanVo
	59,  // 133: pmp.GoPmpClient.UpgradeResPlanDel:input_type -> common.Ids
	49,  // 134: pmp.GoPmpClient.UpgradeResPlanGet:input_type -> pmp.UpgradeResPlanVo
	51,  // 135: pmp.GoPmpClient.UpgradeResPlanList:input_type -> pmp.UpgradeResPlanListReq
	50,  // 136: pmp.GoPmpClient.UpgradeResPlanDetailAdd:input_type -> pmp.UpgradeResPlanDetailVo
	50,  // 137: pmp.GoPmpClient.UpgradeResPlanDetailUpdate:input_type -> pmp.UpgradeResPlanDetailVo
	59,  // 138: pmp.GoPmpClient.UpgradeResPlanDetailDel:input_type -> common.Ids
	50,  // 139: pmp.GoPmpClient.UpgradeResPlanDetailGet:input_type -> pmp.UpgradeResPlanDetailVo
	53,  // 140: pmp.GoPmpClient.UpgradeResPlanDetailList:input_type -> pmp.UpgradeResPlanDetailListReq
	60,  // 141: pmp.GoPmpClient.Ping:output_type -> common.Response
	15,  // 142: pmp.GoPmpClient.GlobalParamAdd:output_type -> pmp.GlobalParamVo
	15,  // 143: pmp.GoPmpClient.GlobalParamUpdate:output_type -> pmp.GlobalParamVo
	61,  // 144: pmp.GoPmpClient.GlobalParamDel:output_type -> common.Empty
	15,  // 145: pmp.GoPmpClient.GlobalParamGet:output_type -> pmp.GlobalParamVo
	17,  // 146: pmp.GoPmpClient.GlobalParamList:output_type -> pmp.GlobalParamListResp
	18,  // 147: pmp.GoPmpClient.ProductAdd:output_type -> pmp.ProductVo
	61,  // 148: pmp.GoPmpClient.ProductUpdate:output_type -> common.Empty
	61,  // 149: pmp.GoPmpClient.ProductDel:output_type -> common.Empty
	18,  // 150: pmp.GoPmpClient.ProductGet:output_type -> pmp.ProductVo
	20,  // 151: pmp.GoPmpClient.ProductList:output_type -> pmp.ProductListResp
	20,  // 152: pmp.GoPmpClient.ProductAll:output_type -> pmp.ProductListResp
	61,  // 153: pmp.GoPmpClient.ProductParamUpdate:output_type -> common.Empty
	21,  // 154: pmp.GoPmpClient.ProductParamGet:output_type -> pmp.ProductParamVo
	23,  // 155: pmp.GoPmpClient.ProductParamList:output_type -> pmp.ProductParamListResp
	24,  // 156: pmp.GoPmpClient.ProductActionAdd:output_type -> pmp.ProductActionVo
	61,  // 157: pmp.GoPmpClient.ProductActionUpdate:output_type -> common.Empty
	61,  // 158: pmp.GoPmpClient.ProductActionDel:output_type -> common.Empty
	24,  // 159: pmp.GoPmpClient.ProductActionGet:output_type -> pmp.ProductActionVo
	27,  // 160: pmp.GoPmpClient.ProductActionList:output_type -> pmp.ProductActionListRes
	28,  // 161: pmp.GoPmpClient.AreaParamAdd:output_type -> pmp.AreaParamVo
	28,  // 162: pmp.GoPmpClient.AreaParamUpdate:output_type -> pmp.AreaParamVo
	61,  // 163: pmp.GoPmpClient.AreaParamDel:output_type -> common.Empty
	28,  // 164: pmp.GoPmpClient.AreaParamGet:output_type -> pmp.AreaParamVo
	30,  // 165: pmp.GoPmpClient.AreaParamList:output_type -> pmp.AreaParamListResp
	35,  // 166: pmp.GoPmpClient.NationalLanguageAdd:output_type -> pmp.NationalLanguageVo
	35,  // 167: pmp.GoPmpClient.NationalLanguageUpdate:output_type -> pmp.NationalLanguageVo
	61,  // 168: pmp.GoPmpClient.NationalLanguageDel:output_type -> common.Empty
	35,  // 169: pmp.GoPmpClient.NationalLanguageGet:output_type -> pmp.NationalLanguageVo
	37,  // 170: pmp.GoPmpClient.NationalLanguageList:output_type -> pmp.NationalLanguageListResp
	38,  // 171: pmp.GoPmpClient.TipAdd:output_type -> pmp.TipVo
	38,  // 172: pmp.GoPmpClient.TipUpdate:output_type -> pmp.TipVo
	61,  // 173: pmp.GoPmpClient.TipDel:output_type -> common.Empty
	38,  // 174: pmp.GoPmpClient.TipGet:output_type -> pmp.TipVo
	40,  // 175: pmp.GoPmpClient.TipList:output_type -> pmp.TipListResp
	1,   // 176: pmp.GoPmpClient.UpgradeResAdd:output_type -> pmp.UpgradeResVo
	61,  // 177: pmp.GoPmpClient.UpgradeResUpdate:output_type -> common.Empty
	61,  // 178: pmp.GoPmpClient.UpgradeResDel:output_type -> common.Empty
	1,   // 179: pmp.GoPmpClient.UpgradeResGet:output_type -> pmp.UpgradeResVo
	12,  // 180: pmp.GoPmpClient.UpgradeResList:output_type -> pmp.UpgradeResListResp
	3,   // 181: pmp.GoPmpClient.UpgradePkgAdd:output_type -> pmp.UpgradePkgVo
	61,  // 182: pmp.GoPmpClient.UpgradePkgUpdate:output_type -> common.Empty
	61,  // 183: pmp.GoPmpClient.UpgradePkgDel:output_type -> common.Empty
	3,   // 184: pmp.GoPmpClient.UpgradePkgGet:output_type -> pmp.UpgradePkgVo
	9,   // 185: pmp.GoPmpClient.UpgradePkgList:output_type -> pmp.UpgradePkgListResp
	2,   // 186: pmp.GoPmpClient.UpgradeResConfigAdd:output_type -> pmp.UpgradeResConfigVo
	61,  // 187: pmp.GoPmpClient.UpgradeResConfigUpdate:output_type -> common.Empty
	61,  // 188: pmp.GoPmpClient.UpgradeResConfigDel:output_type -> common.Empty
	2,   // 189: pmp.GoPmpClient.UpgradeResConfigGet:output_type -> pmp.UpgradeResConfigVo
	6,   // 190: pmp.GoPmpClient.UpgradeResConfigList:output_type -> pmp.UpgradeResConfigListResp
	31,  // 191: pmp.GoPmpClient.DictAdd:output_type -> pmp.DictVo
	61,  // 192: pmp.GoPmpClient.DictUpdate:output_type -> common.Empty
	61,  // 193: pmp.GoPmpClient.DictDel:output_type -> common.Empty
	31,  // 194: pmp.GoPmpClient.DictGet:output_type -> pmp.DictVo
	34,  // 195: pmp.GoPmpClient.DictList:output_type -> pmp.DictListResp
	43,  // 196: pmp.GoPmpClient.UpgradePkgPlanAdd:output_type -> pmp.UpgradePkgPlanVo
	61,  // 197: pmp.GoPmpClient.UpgradePkgPlanUpdate:output_type -> common.Empty
	61,  // 198: pmp.GoPmpClient.UpgradePkgPlanDel:output_type -> common.Empty
	43,  // 199: pmp.GoPmpClient.UpgradePkgPlanGet:output_type -> pmp.UpgradePkgPlanVo
	46,  // 200: pmp.GoPmpClient.UpgradePkgPlanList:output_type -> pmp.UpgradePkgPlanListResp
	44,  // 201: pmp.GoPmpClient.UpgradePkgPlanDetailAdd:output_type -> pmp.UpgradePkgPlanDetailVo
	61,  // 202: pmp.GoPmpClient.UpgradePkgPlanDetailUpdate:output_type -> common.Empty
	61,  // 203: pmp.GoPmpClient.UpgradePkgPlanDetailDel:output_type -> common.Empty
	44,  // 204: pmp.GoPmpClient.UpgradePkgPlanDetailGet:output_type -> pmp.UpgradePkgPlanDetailVo
	48,  // 205: pmp.GoPmpClient.UpgradePkgPlanDetailList:output_type -> pmp.UpgradePkgPlanDetailListResp
	49,  // 206: pmp.GoPmpClient.UpgradeResPlanAdd:output_type -> pmp.UpgradeResPlanVo
	61,  // 207: pmp.GoPmpClient.UpgradeResPlanUpdate:output_type -> common.Empty
	61,  // 208: pmp.GoPmpClient.UpgradeResPlanDel:output_type -> common.Empty
	49,  // 209: pmp.GoPmpClient.UpgradeResPlanGet:output_type -> pmp.UpgradeResPlanVo
	52,  // 210: pmp.GoPmpClient.UpgradeResPlanList:output_type -> pmp.UpgradeResPlanListResp
	50,  // 211: pmp.GoPmpClient.UpgradeResPlanDetailAdd:output_type -> pmp.UpgradeResPlanDetailVo
	61,  // 212: pmp.GoPmpClient.UpgradeResPlanDetailUpdate:output_type -> common.Empty
	61,  // 213: pmp.GoPmpClient.UpgradeResPlanDetailDel:output_type -> common.Empty
	50,  // 214: pmp.GoPmpClient.UpgradeResPlanDetailGet:output_type -> pmp.UpgradeResPlanDetailVo
	54,  // 215: pmp.GoPmpClient.UpgradeResPlanDetailList:output_type -> pmp.UpgradeResPlanDetailListResp
	141, // [141:216] is the sub-list for method output_type
	66,  // [66:141] is the sub-list for method input_type
	66,  // [66:66] is the sub-list for extension type_name
	66,  // [66:66] is the sub-list for extension extendee
	0,   // [0:66] is the sub-list for field type_name
}

func init() { file_pmp_proto_init() }
func file_pmp_proto_init() {
	if File_pmp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pmp_proto_rawDesc), len(file_pmp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pmp_proto_goTypes,
		DependencyIndexes: file_pmp_proto_depIdxs,
		MessageInfos:      file_pmp_proto_msgTypes,
	}.Build()
	File_pmp_proto = out.File
	file_pmp_proto_goTypes = nil
	file_pmp_proto_depIdxs = nil
}
