// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: pmp.proto

package pmp

import (
	context "context"
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoPmpClient_Ping_FullMethodName                       = "/pmp.GoPmpClient/Ping"
	GoPmpClient_GlobalParamAdd_FullMethodName             = "/pmp.GoPmpClient/GlobalParamAdd"
	GoPmpClient_GlobalParamUpdate_FullMethodName          = "/pmp.GoPmpClient/GlobalParamUpdate"
	GoPmpClient_GlobalParamDel_FullMethodName             = "/pmp.GoPmpClient/GlobalParamDel"
	GoPmpClient_GlobalParamGet_FullMethodName             = "/pmp.GoPmpClient/GlobalParamGet"
	GoPmpClient_GlobalParamList_FullMethodName            = "/pmp.GoPmpClient/GlobalParamList"
	GoPmpClient_ProductAdd_FullMethodName                 = "/pmp.GoPmpClient/ProductAdd"
	GoPmpClient_ProductUpdate_FullMethodName              = "/pmp.GoPmpClient/ProductUpdate"
	GoPmpClient_ProductDel_FullMethodName                 = "/pmp.GoPmpClient/ProductDel"
	GoPmpClient_ProductGet_FullMethodName                 = "/pmp.GoPmpClient/ProductGet"
	GoPmpClient_ProductList_FullMethodName                = "/pmp.GoPmpClient/ProductList"
	GoPmpClient_ProductAll_FullMethodName                 = "/pmp.GoPmpClient/ProductAll"
	GoPmpClient_ProductParamUpdate_FullMethodName         = "/pmp.GoPmpClient/ProductParamUpdate"
	GoPmpClient_ProductParamGet_FullMethodName            = "/pmp.GoPmpClient/ProductParamGet"
	GoPmpClient_ProductParamList_FullMethodName           = "/pmp.GoPmpClient/ProductParamList"
	GoPmpClient_ProductActionAdd_FullMethodName           = "/pmp.GoPmpClient/ProductActionAdd"
	GoPmpClient_ProductActionUpdate_FullMethodName        = "/pmp.GoPmpClient/ProductActionUpdate"
	GoPmpClient_ProductActionDel_FullMethodName           = "/pmp.GoPmpClient/ProductActionDel"
	GoPmpClient_ProductActionGet_FullMethodName           = "/pmp.GoPmpClient/ProductActionGet"
	GoPmpClient_ProductActionList_FullMethodName          = "/pmp.GoPmpClient/ProductActionList"
	GoPmpClient_AreaParamAdd_FullMethodName               = "/pmp.GoPmpClient/AreaParamAdd"
	GoPmpClient_AreaParamUpdate_FullMethodName            = "/pmp.GoPmpClient/AreaParamUpdate"
	GoPmpClient_AreaParamDel_FullMethodName               = "/pmp.GoPmpClient/AreaParamDel"
	GoPmpClient_AreaParamGet_FullMethodName               = "/pmp.GoPmpClient/AreaParamGet"
	GoPmpClient_AreaParamList_FullMethodName              = "/pmp.GoPmpClient/AreaParamList"
	GoPmpClient_NationalLanguageAdd_FullMethodName        = "/pmp.GoPmpClient/NationalLanguageAdd"
	GoPmpClient_NationalLanguageUpdate_FullMethodName     = "/pmp.GoPmpClient/NationalLanguageUpdate"
	GoPmpClient_NationalLanguageDel_FullMethodName        = "/pmp.GoPmpClient/NationalLanguageDel"
	GoPmpClient_NationalLanguageGet_FullMethodName        = "/pmp.GoPmpClient/NationalLanguageGet"
	GoPmpClient_NationalLanguageList_FullMethodName       = "/pmp.GoPmpClient/NationalLanguageList"
	GoPmpClient_TipAdd_FullMethodName                     = "/pmp.GoPmpClient/TipAdd"
	GoPmpClient_TipUpdate_FullMethodName                  = "/pmp.GoPmpClient/TipUpdate"
	GoPmpClient_TipDel_FullMethodName                     = "/pmp.GoPmpClient/TipDel"
	GoPmpClient_TipGet_FullMethodName                     = "/pmp.GoPmpClient/TipGet"
	GoPmpClient_TipList_FullMethodName                    = "/pmp.GoPmpClient/TipList"
	GoPmpClient_UpgradeResAdd_FullMethodName              = "/pmp.GoPmpClient/UpgradeResAdd"
	GoPmpClient_UpgradeResUpdate_FullMethodName           = "/pmp.GoPmpClient/UpgradeResUpdate"
	GoPmpClient_UpgradeResDel_FullMethodName              = "/pmp.GoPmpClient/UpgradeResDel"
	GoPmpClient_UpgradeResGet_FullMethodName              = "/pmp.GoPmpClient/UpgradeResGet"
	GoPmpClient_UpgradeResList_FullMethodName             = "/pmp.GoPmpClient/UpgradeResList"
	GoPmpClient_UpgradePkgAdd_FullMethodName              = "/pmp.GoPmpClient/UpgradePkgAdd"
	GoPmpClient_UpgradePkgUpdate_FullMethodName           = "/pmp.GoPmpClient/UpgradePkgUpdate"
	GoPmpClient_UpgradePkgDel_FullMethodName              = "/pmp.GoPmpClient/UpgradePkgDel"
	GoPmpClient_UpgradePkgGet_FullMethodName              = "/pmp.GoPmpClient/UpgradePkgGet"
	GoPmpClient_UpgradePkgList_FullMethodName             = "/pmp.GoPmpClient/UpgradePkgList"
	GoPmpClient_UpgradeResConfigAdd_FullMethodName        = "/pmp.GoPmpClient/UpgradeResConfigAdd"
	GoPmpClient_UpgradeResConfigUpdate_FullMethodName     = "/pmp.GoPmpClient/UpgradeResConfigUpdate"
	GoPmpClient_UpgradeResConfigDel_FullMethodName        = "/pmp.GoPmpClient/UpgradeResConfigDel"
	GoPmpClient_UpgradeResConfigGet_FullMethodName        = "/pmp.GoPmpClient/UpgradeResConfigGet"
	GoPmpClient_UpgradeResConfigList_FullMethodName       = "/pmp.GoPmpClient/UpgradeResConfigList"
	GoPmpClient_DictAdd_FullMethodName                    = "/pmp.GoPmpClient/DictAdd"
	GoPmpClient_DictUpdate_FullMethodName                 = "/pmp.GoPmpClient/DictUpdate"
	GoPmpClient_DictDel_FullMethodName                    = "/pmp.GoPmpClient/DictDel"
	GoPmpClient_DictGet_FullMethodName                    = "/pmp.GoPmpClient/DictGet"
	GoPmpClient_DictList_FullMethodName                   = "/pmp.GoPmpClient/DictList"
	GoPmpClient_UpgradePkgPlanAdd_FullMethodName          = "/pmp.GoPmpClient/UpgradePkgPlanAdd"
	GoPmpClient_UpgradePkgPlanUpdate_FullMethodName       = "/pmp.GoPmpClient/UpgradePkgPlanUpdate"
	GoPmpClient_UpgradePkgPlanDel_FullMethodName          = "/pmp.GoPmpClient/UpgradePkgPlanDel"
	GoPmpClient_UpgradePkgPlanGet_FullMethodName          = "/pmp.GoPmpClient/UpgradePkgPlanGet"
	GoPmpClient_UpgradePkgPlanList_FullMethodName         = "/pmp.GoPmpClient/UpgradePkgPlanList"
	GoPmpClient_UpgradePkgPlanDetailAdd_FullMethodName    = "/pmp.GoPmpClient/UpgradePkgPlanDetailAdd"
	GoPmpClient_UpgradePkgPlanDetailUpdate_FullMethodName = "/pmp.GoPmpClient/UpgradePkgPlanDetailUpdate"
	GoPmpClient_UpgradePkgPlanDetailDel_FullMethodName    = "/pmp.GoPmpClient/UpgradePkgPlanDetailDel"
	GoPmpClient_UpgradePkgPlanDetailGet_FullMethodName    = "/pmp.GoPmpClient/UpgradePkgPlanDetailGet"
	GoPmpClient_UpgradePkgPlanDetailList_FullMethodName   = "/pmp.GoPmpClient/UpgradePkgPlanDetailList"
	GoPmpClient_UpgradeResPlanAdd_FullMethodName          = "/pmp.GoPmpClient/UpgradeResPlanAdd"
	GoPmpClient_UpgradeResPlanUpdate_FullMethodName       = "/pmp.GoPmpClient/UpgradeResPlanUpdate"
	GoPmpClient_UpgradeResPlanDel_FullMethodName          = "/pmp.GoPmpClient/UpgradeResPlanDel"
	GoPmpClient_UpgradeResPlanGet_FullMethodName          = "/pmp.GoPmpClient/UpgradeResPlanGet"
	GoPmpClient_UpgradeResPlanList_FullMethodName         = "/pmp.GoPmpClient/UpgradeResPlanList"
	GoPmpClient_UpgradeResPlanDetailAdd_FullMethodName    = "/pmp.GoPmpClient/UpgradeResPlanDetailAdd"
	GoPmpClient_UpgradeResPlanDetailUpdate_FullMethodName = "/pmp.GoPmpClient/UpgradeResPlanDetailUpdate"
	GoPmpClient_UpgradeResPlanDetailDel_FullMethodName    = "/pmp.GoPmpClient/UpgradeResPlanDetailDel"
	GoPmpClient_UpgradeResPlanDetailGet_FullMethodName    = "/pmp.GoPmpClient/UpgradeResPlanDetailGet"
	GoPmpClient_UpgradeResPlanDetailList_FullMethodName   = "/pmp.GoPmpClient/UpgradeResPlanDetailList"
)

// GoPmpClientClient is the client API for GoPmpClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 基础服务： 产品管理，产品配置，升级配置、更新资源管理，资源版本管理，全局配置
type GoPmpClientClient interface {
	Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error)
	// GlobalParamVo
	GlobalParamAdd(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error)
	GlobalParamUpdate(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error)
	GlobalParamDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	GlobalParamGet(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error)
	GlobalParamList(ctx context.Context, in *GlobalParamListReq, opts ...grpc.CallOption) (*GlobalParamListResp, error)
	// ProductVo
	ProductAdd(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error)
	ProductUpdate(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*common.Empty, error)
	ProductDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	ProductGet(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error)
	ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
	ProductAll(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*ProductListResp, error)
	// ProductParamVo
	// rpc ProductParamAdd(ProductParamVo) returns (ProductParamVo);
	ProductParamUpdate(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*common.Empty, error)
	// rpc ProductParamDel(Ids) returns (common.Empty);
	ProductParamGet(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*ProductParamVo, error)
	ProductParamList(ctx context.Context, in *ProductParamListReq, opts ...grpc.CallOption) (*ProductParamListResp, error)
	// ProductAction 产品行为配置
	ProductActionAdd(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*ProductActionVo, error)
	ProductActionUpdate(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*common.Empty, error)
	ProductActionDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	ProductActionGet(ctx context.Context, in *ProductActionReq, opts ...grpc.CallOption) (*ProductActionVo, error)
	ProductActionList(ctx context.Context, in *ProductActionListReq, opts ...grpc.CallOption) (*ProductActionListRes, error)
	// AreaParamVo
	AreaParamAdd(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error)
	AreaParamUpdate(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error)
	AreaParamDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	AreaParamGet(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error)
	AreaParamList(ctx context.Context, in *AreaParamListReq, opts ...grpc.CallOption) (*AreaParamListResp, error)
	// NationalLanguage
	NationalLanguageAdd(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error)
	NationalLanguageUpdate(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error)
	NationalLanguageDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	NationalLanguageGet(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error)
	NationalLanguageList(ctx context.Context, in *NationalLanguageListReq, opts ...grpc.CallOption) (*NationalLanguageListResp, error)
	// Tip
	TipAdd(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error)
	TipUpdate(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error)
	TipDel(ctx context.Context, in *TipDelReq, opts ...grpc.CallOption) (*common.Empty, error)
	TipGet(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error)
	TipList(ctx context.Context, in *TipListReq, opts ...grpc.CallOption) (*TipListResp, error)
	// UpgradeRes 热更新代码资源管理
	UpgradeResAdd(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*UpgradeResVo, error)
	UpgradeResUpdate(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResDel(ctx context.Context, in *ResourceDelReq, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResGet(ctx context.Context, in *UpgradeResGetReq, opts ...grpc.CallOption) (*UpgradeResVo, error)
	UpgradeResList(ctx context.Context, in *UpgradeResListReq, opts ...grpc.CallOption) (*UpgradeResListResp, error)
	// UpgradePkg app 包更新管理
	UpgradePkgAdd(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*UpgradePkgVo, error)
	UpgradePkgUpdate(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradePkgDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradePkgGet(ctx context.Context, in *UpgradePkgGetReq, opts ...grpc.CallOption) (*UpgradePkgVo, error)
	UpgradePkgList(ctx context.Context, in *UpgradePkgListReq, opts ...grpc.CallOption) (*UpgradePkgListResp, error)
	// UpgradeResConfig 热更新【代码资源】配置管理，控制哪些版本地区的用户可以更新
	UpgradeResConfigAdd(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*UpgradeResConfigVo, error)
	UpgradeResConfigUpdate(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResConfigDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResConfigGet(ctx context.Context, in *UpgradeResConfigGetReq, opts ...grpc.CallOption) (*UpgradeResConfigVo, error)
	UpgradeResConfigList(ctx context.Context, in *UpgradeResConfigListReq, opts ...grpc.CallOption) (*UpgradeResConfigListResp, error)
	DictAdd(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*DictVo, error)
	DictUpdate(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*common.Empty, error)
	DictDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	DictGet(ctx context.Context, in *DictGetReq, opts ...grpc.CallOption) (*DictVo, error)
	DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error)
	// UpgradePkgPlan
	UpgradePkgPlanAdd(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanUpdate(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradePkgPlanDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradePkgPlanGet(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanList(ctx context.Context, in *UpgradePkgPlanListReq, opts ...grpc.CallOption) (*UpgradePkgPlanListResp, error)
	// UpgradePkgPlanDetail
	UpgradePkgPlanDetailAdd(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailUpdate(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradePkgPlanDetailDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradePkgPlanDetailGet(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailList(ctx context.Context, in *UpgradePkgPlanDetailListReq, opts ...grpc.CallOption) (*UpgradePkgPlanDetailListResp, error)
	// UpgradeResPlan
	UpgradeResPlanAdd(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error)
	UpgradeResPlanUpdate(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResPlanDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResPlanGet(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error)
	UpgradeResPlanList(ctx context.Context, in *UpgradeResPlanListReq, opts ...grpc.CallOption) (*UpgradeResPlanListResp, error)
	// UpgradeResPlanDetail
	UpgradeResPlanDetailAdd(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailUpdate(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResPlanDetailDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	UpgradeResPlanDetailGet(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailList(ctx context.Context, in *UpgradeResPlanDetailListReq, opts ...grpc.CallOption) (*UpgradeResPlanDetailListResp, error)
}

type goPmpClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoPmpClientClient(cc grpc.ClientConnInterface) GoPmpClientClient {
	return &goPmpClientClient{cc}
}

func (c *goPmpClientClient) Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, GoPmpClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamAdd(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamUpdate(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamGet(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamList(ctx context.Context, in *GlobalParamListReq, opts ...grpc.CallOption) (*GlobalParamListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductAdd(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductUpdate(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductGet(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductAll(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*ProductListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductParamUpdate(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductParamUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductParamGet(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*ProductParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductParamGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductParamList(ctx context.Context, in *ProductParamListReq, opts ...grpc.CallOption) (*ProductParamListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductParamListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductParamList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionAdd(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*ProductActionVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductActionVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionUpdate(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionGet(ctx context.Context, in *ProductActionReq, opts ...grpc.CallOption) (*ProductActionVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductActionVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionList(ctx context.Context, in *ProductActionListReq, opts ...grpc.CallOption) (*ProductActionListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductActionListRes)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamAdd(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamUpdate(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamGet(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamList(ctx context.Context, in *AreaParamListReq, opts ...grpc.CallOption) (*AreaParamListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageAdd(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageVo)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageUpdate(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageVo)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageGet(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageVo)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageList(ctx context.Context, in *NationalLanguageListReq, opts ...grpc.CallOption) (*NationalLanguageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipAdd(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipVo)
	err := c.cc.Invoke(ctx, GoPmpClient_TipAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipUpdate(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipVo)
	err := c.cc.Invoke(ctx, GoPmpClient_TipUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipDel(ctx context.Context, in *TipDelReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_TipDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipGet(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipVo)
	err := c.cc.Invoke(ctx, GoPmpClient_TipGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipList(ctx context.Context, in *TipListReq, opts ...grpc.CallOption) (*TipListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_TipList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResAdd(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*UpgradeResVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResUpdate(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResDel(ctx context.Context, in *ResourceDelReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResGet(ctx context.Context, in *UpgradeResGetReq, opts ...grpc.CallOption) (*UpgradeResVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResList(ctx context.Context, in *UpgradeResListReq, opts ...grpc.CallOption) (*UpgradeResListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgAdd(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*UpgradePkgVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgUpdate(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgGet(ctx context.Context, in *UpgradePkgGetReq, opts ...grpc.CallOption) (*UpgradePkgVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgList(ctx context.Context, in *UpgradePkgListReq, opts ...grpc.CallOption) (*UpgradePkgListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigAdd(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*UpgradeResConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResConfigVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigUpdate(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigGet(ctx context.Context, in *UpgradeResConfigGetReq, opts ...grpc.CallOption) (*UpgradeResConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResConfigVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigList(ctx context.Context, in *UpgradeResConfigListReq, opts ...grpc.CallOption) (*UpgradeResConfigListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResConfigListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictAdd(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*DictVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictVo)
	err := c.cc.Invoke(ctx, GoPmpClient_DictAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictUpdate(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_DictUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_DictDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictGet(ctx context.Context, in *DictGetReq, opts ...grpc.CallOption) (*DictVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictVo)
	err := c.cc.Invoke(ctx, GoPmpClient_DictGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_DictList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanAdd(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanUpdate(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanGet(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanList(ctx context.Context, in *UpgradePkgPlanListReq, opts ...grpc.CallOption) (*UpgradePkgPlanListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailAdd(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailUpdate(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailGet(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailList(ctx context.Context, in *UpgradePkgPlanDetailListReq, opts ...grpc.CallOption) (*UpgradePkgPlanDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanDetailListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanAdd(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanUpdate(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanGet(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanList(ctx context.Context, in *UpgradeResPlanListReq, opts ...grpc.CallOption) (*UpgradeResPlanListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailAdd(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailUpdate(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailGet(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailList(ctx context.Context, in *UpgradeResPlanDetailListReq, opts ...grpc.CallOption) (*UpgradeResPlanDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanDetailListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoPmpClientServer is the server API for GoPmpClient service.
// All implementations must embed UnimplementedGoPmpClientServer
// for forward compatibility.
//
// 基础服务： 产品管理，产品配置，升级配置、更新资源管理，资源版本管理，全局配置
type GoPmpClientServer interface {
	Ping(context.Context, *common.Request) (*common.Response, error)
	// GlobalParamVo
	GlobalParamAdd(context.Context, *GlobalParamVo) (*GlobalParamVo, error)
	GlobalParamUpdate(context.Context, *GlobalParamVo) (*GlobalParamVo, error)
	GlobalParamDel(context.Context, *common.Ids) (*common.Empty, error)
	GlobalParamGet(context.Context, *GlobalParamVo) (*GlobalParamVo, error)
	GlobalParamList(context.Context, *GlobalParamListReq) (*GlobalParamListResp, error)
	// ProductVo
	ProductAdd(context.Context, *ProductVo) (*ProductVo, error)
	ProductUpdate(context.Context, *ProductVo) (*common.Empty, error)
	ProductDel(context.Context, *common.Ids) (*common.Empty, error)
	ProductGet(context.Context, *ProductVo) (*ProductVo, error)
	ProductList(context.Context, *ProductListReq) (*ProductListResp, error)
	ProductAll(context.Context, *common.Request) (*ProductListResp, error)
	// ProductParamVo
	// rpc ProductParamAdd(ProductParamVo) returns (ProductParamVo);
	ProductParamUpdate(context.Context, *ProductParamVo) (*common.Empty, error)
	// rpc ProductParamDel(Ids) returns (common.Empty);
	ProductParamGet(context.Context, *ProductParamVo) (*ProductParamVo, error)
	ProductParamList(context.Context, *ProductParamListReq) (*ProductParamListResp, error)
	// ProductAction 产品行为配置
	ProductActionAdd(context.Context, *ProductActionVo) (*ProductActionVo, error)
	ProductActionUpdate(context.Context, *ProductActionVo) (*common.Empty, error)
	ProductActionDel(context.Context, *common.Ids) (*common.Empty, error)
	ProductActionGet(context.Context, *ProductActionReq) (*ProductActionVo, error)
	ProductActionList(context.Context, *ProductActionListReq) (*ProductActionListRes, error)
	// AreaParamVo
	AreaParamAdd(context.Context, *AreaParamVo) (*AreaParamVo, error)
	AreaParamUpdate(context.Context, *AreaParamVo) (*AreaParamVo, error)
	AreaParamDel(context.Context, *common.Ids) (*common.Empty, error)
	AreaParamGet(context.Context, *AreaParamVo) (*AreaParamVo, error)
	AreaParamList(context.Context, *AreaParamListReq) (*AreaParamListResp, error)
	// NationalLanguage
	NationalLanguageAdd(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error)
	NationalLanguageUpdate(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error)
	NationalLanguageDel(context.Context, *common.Ids) (*common.Empty, error)
	NationalLanguageGet(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error)
	NationalLanguageList(context.Context, *NationalLanguageListReq) (*NationalLanguageListResp, error)
	// Tip
	TipAdd(context.Context, *TipVo) (*TipVo, error)
	TipUpdate(context.Context, *TipVo) (*TipVo, error)
	TipDel(context.Context, *TipDelReq) (*common.Empty, error)
	TipGet(context.Context, *TipVo) (*TipVo, error)
	TipList(context.Context, *TipListReq) (*TipListResp, error)
	// UpgradeRes 热更新代码资源管理
	UpgradeResAdd(context.Context, *UpgradeResVo) (*UpgradeResVo, error)
	UpgradeResUpdate(context.Context, *UpgradeResVo) (*common.Empty, error)
	UpgradeResDel(context.Context, *ResourceDelReq) (*common.Empty, error)
	UpgradeResGet(context.Context, *UpgradeResGetReq) (*UpgradeResVo, error)
	UpgradeResList(context.Context, *UpgradeResListReq) (*UpgradeResListResp, error)
	// UpgradePkg app 包更新管理
	UpgradePkgAdd(context.Context, *UpgradePkgVo) (*UpgradePkgVo, error)
	UpgradePkgUpdate(context.Context, *UpgradePkgVo) (*common.Empty, error)
	UpgradePkgDel(context.Context, *common.Ids) (*common.Empty, error)
	UpgradePkgGet(context.Context, *UpgradePkgGetReq) (*UpgradePkgVo, error)
	UpgradePkgList(context.Context, *UpgradePkgListReq) (*UpgradePkgListResp, error)
	// UpgradeResConfig 热更新【代码资源】配置管理，控制哪些版本地区的用户可以更新
	UpgradeResConfigAdd(context.Context, *UpgradeResConfigVo) (*UpgradeResConfigVo, error)
	UpgradeResConfigUpdate(context.Context, *UpgradeResConfigVo) (*common.Empty, error)
	UpgradeResConfigDel(context.Context, *common.Ids) (*common.Empty, error)
	UpgradeResConfigGet(context.Context, *UpgradeResConfigGetReq) (*UpgradeResConfigVo, error)
	UpgradeResConfigList(context.Context, *UpgradeResConfigListReq) (*UpgradeResConfigListResp, error)
	DictAdd(context.Context, *DictVo) (*DictVo, error)
	DictUpdate(context.Context, *DictVo) (*common.Empty, error)
	DictDel(context.Context, *common.Ids) (*common.Empty, error)
	DictGet(context.Context, *DictGetReq) (*DictVo, error)
	DictList(context.Context, *DictListReq) (*DictListResp, error)
	// UpgradePkgPlan
	UpgradePkgPlanAdd(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanUpdate(context.Context, *UpgradePkgPlanVo) (*common.Empty, error)
	UpgradePkgPlanDel(context.Context, *common.Ids) (*common.Empty, error)
	UpgradePkgPlanGet(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanList(context.Context, *UpgradePkgPlanListReq) (*UpgradePkgPlanListResp, error)
	// UpgradePkgPlanDetail
	UpgradePkgPlanDetailAdd(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailUpdate(context.Context, *UpgradePkgPlanDetailVo) (*common.Empty, error)
	UpgradePkgPlanDetailDel(context.Context, *common.Ids) (*common.Empty, error)
	UpgradePkgPlanDetailGet(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailList(context.Context, *UpgradePkgPlanDetailListReq) (*UpgradePkgPlanDetailListResp, error)
	// UpgradeResPlan
	UpgradeResPlanAdd(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error)
	UpgradeResPlanUpdate(context.Context, *UpgradeResPlanVo) (*common.Empty, error)
	UpgradeResPlanDel(context.Context, *common.Ids) (*common.Empty, error)
	UpgradeResPlanGet(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error)
	UpgradeResPlanList(context.Context, *UpgradeResPlanListReq) (*UpgradeResPlanListResp, error)
	// UpgradeResPlanDetail
	UpgradeResPlanDetailAdd(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailUpdate(context.Context, *UpgradeResPlanDetailVo) (*common.Empty, error)
	UpgradeResPlanDetailDel(context.Context, *common.Ids) (*common.Empty, error)
	UpgradeResPlanDetailGet(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailList(context.Context, *UpgradeResPlanDetailListReq) (*UpgradeResPlanDetailListResp, error)
	mustEmbedUnimplementedGoPmpClientServer()
}

// UnimplementedGoPmpClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoPmpClientServer struct{}

func (UnimplementedGoPmpClientServer) Ping(context.Context, *common.Request) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamAdd(context.Context, *GlobalParamVo) (*GlobalParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamAdd not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamUpdate(context.Context, *GlobalParamVo) (*GlobalParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamDel not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamGet(context.Context, *GlobalParamVo) (*GlobalParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamGet not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamList(context.Context, *GlobalParamListReq) (*GlobalParamListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamList not implemented")
}
func (UnimplementedGoPmpClientServer) ProductAdd(context.Context, *ProductVo) (*ProductVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAdd not implemented")
}
func (UnimplementedGoPmpClientServer) ProductUpdate(context.Context, *ProductVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) ProductDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDel not implemented")
}
func (UnimplementedGoPmpClientServer) ProductGet(context.Context, *ProductVo) (*ProductVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductGet not implemented")
}
func (UnimplementedGoPmpClientServer) ProductList(context.Context, *ProductListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedGoPmpClientServer) ProductAll(context.Context, *common.Request) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAll not implemented")
}
func (UnimplementedGoPmpClientServer) ProductParamUpdate(context.Context, *ProductParamVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductParamUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) ProductParamGet(context.Context, *ProductParamVo) (*ProductParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductParamGet not implemented")
}
func (UnimplementedGoPmpClientServer) ProductParamList(context.Context, *ProductParamListReq) (*ProductParamListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductParamList not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionAdd(context.Context, *ProductActionVo) (*ProductActionVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionAdd not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionUpdate(context.Context, *ProductActionVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionDel not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionGet(context.Context, *ProductActionReq) (*ProductActionVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionGet not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionList(context.Context, *ProductActionListReq) (*ProductActionListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionList not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamAdd(context.Context, *AreaParamVo) (*AreaParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamAdd not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamUpdate(context.Context, *AreaParamVo) (*AreaParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamDel not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamGet(context.Context, *AreaParamVo) (*AreaParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamGet not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamList(context.Context, *AreaParamListReq) (*AreaParamListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamList not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageAdd(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageAdd not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageUpdate(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageDel not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageGet(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageGet not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageList(context.Context, *NationalLanguageListReq) (*NationalLanguageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageList not implemented")
}
func (UnimplementedGoPmpClientServer) TipAdd(context.Context, *TipVo) (*TipVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipAdd not implemented")
}
func (UnimplementedGoPmpClientServer) TipUpdate(context.Context, *TipVo) (*TipVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) TipDel(context.Context, *TipDelReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipDel not implemented")
}
func (UnimplementedGoPmpClientServer) TipGet(context.Context, *TipVo) (*TipVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipGet not implemented")
}
func (UnimplementedGoPmpClientServer) TipList(context.Context, *TipListReq) (*TipListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResAdd(context.Context, *UpgradeResVo) (*UpgradeResVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResUpdate(context.Context, *UpgradeResVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResDel(context.Context, *ResourceDelReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResGet(context.Context, *UpgradeResGetReq) (*UpgradeResVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResList(context.Context, *UpgradeResListReq) (*UpgradeResListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgAdd(context.Context, *UpgradePkgVo) (*UpgradePkgVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgUpdate(context.Context, *UpgradePkgVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgGet(context.Context, *UpgradePkgGetReq) (*UpgradePkgVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgList(context.Context, *UpgradePkgListReq) (*UpgradePkgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigAdd(context.Context, *UpgradeResConfigVo) (*UpgradeResConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigUpdate(context.Context, *UpgradeResConfigVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigGet(context.Context, *UpgradeResConfigGetReq) (*UpgradeResConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigList(context.Context, *UpgradeResConfigListReq) (*UpgradeResConfigListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigList not implemented")
}
func (UnimplementedGoPmpClientServer) DictAdd(context.Context, *DictVo) (*DictVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictAdd not implemented")
}
func (UnimplementedGoPmpClientServer) DictUpdate(context.Context, *DictVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) DictDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDel not implemented")
}
func (UnimplementedGoPmpClientServer) DictGet(context.Context, *DictGetReq) (*DictVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictGet not implemented")
}
func (UnimplementedGoPmpClientServer) DictList(context.Context, *DictListReq) (*DictListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanAdd(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanUpdate(context.Context, *UpgradePkgPlanVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanGet(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanList(context.Context, *UpgradePkgPlanListReq) (*UpgradePkgPlanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailAdd(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailUpdate(context.Context, *UpgradePkgPlanDetailVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailGet(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailList(context.Context, *UpgradePkgPlanDetailListReq) (*UpgradePkgPlanDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanAdd(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanUpdate(context.Context, *UpgradeResPlanVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanGet(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanList(context.Context, *UpgradeResPlanListReq) (*UpgradeResPlanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailAdd(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailUpdate(context.Context, *UpgradeResPlanDetailVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailGet(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailList(context.Context, *UpgradeResPlanDetailListReq) (*UpgradeResPlanDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailList not implemented")
}
func (UnimplementedGoPmpClientServer) mustEmbedUnimplementedGoPmpClientServer() {}
func (UnimplementedGoPmpClientServer) testEmbeddedByValue()                     {}

// UnsafeGoPmpClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoPmpClientServer will
// result in compilation errors.
type UnsafeGoPmpClientServer interface {
	mustEmbedUnimplementedGoPmpClientServer()
}

func RegisterGoPmpClientServer(s grpc.ServiceRegistrar, srv GoPmpClientServer) {
	// If the following call pancis, it indicates UnimplementedGoPmpClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoPmpClient_ServiceDesc, srv)
}

func _GoPmpClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).Ping(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamAdd(ctx, req.(*GlobalParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamUpdate(ctx, req.(*GlobalParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamGet(ctx, req.(*GlobalParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamList(ctx, req.(*GlobalParamListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductAdd(ctx, req.(*ProductVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductUpdate(ctx, req.(*ProductVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductGet(ctx, req.(*ProductVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductAll(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductParamUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductParamUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductParamUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductParamUpdate(ctx, req.(*ProductParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductParamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductParamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductParamGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductParamGet(ctx, req.(*ProductParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductParamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductParamListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductParamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductParamList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductParamList(ctx, req.(*ProductParamListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionAdd(ctx, req.(*ProductActionVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionUpdate(ctx, req.(*ProductActionVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionGet(ctx, req.(*ProductActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionList(ctx, req.(*ProductActionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamAdd(ctx, req.(*AreaParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamUpdate(ctx, req.(*AreaParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamGet(ctx, req.(*AreaParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamList(ctx, req.(*AreaParamListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageAdd(ctx, req.(*NationalLanguageVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageUpdate(ctx, req.(*NationalLanguageVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageGet(ctx, req.(*NationalLanguageVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageList(ctx, req.(*NationalLanguageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipAdd(ctx, req.(*TipVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipUpdate(ctx, req.(*TipVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipDel(ctx, req.(*TipDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipGet(ctx, req.(*TipVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipList(ctx, req.(*TipListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResAdd(ctx, req.(*UpgradeResVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResUpdate(ctx, req.(*UpgradeResVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResDel(ctx, req.(*ResourceDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResGet(ctx, req.(*UpgradeResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResList(ctx, req.(*UpgradeResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgAdd(ctx, req.(*UpgradePkgVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgUpdate(ctx, req.(*UpgradePkgVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgGet(ctx, req.(*UpgradePkgGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgList(ctx, req.(*UpgradePkgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigAdd(ctx, req.(*UpgradeResConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigUpdate(ctx, req.(*UpgradeResConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigGet(ctx, req.(*UpgradeResConfigGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigList(ctx, req.(*UpgradeResConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictAdd(ctx, req.(*DictVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictUpdate(ctx, req.(*DictVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictGet(ctx, req.(*DictGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictList(ctx, req.(*DictListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanAdd(ctx, req.(*UpgradePkgPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanUpdate(ctx, req.(*UpgradePkgPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanGet(ctx, req.(*UpgradePkgPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanList(ctx, req.(*UpgradePkgPlanListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailAdd(ctx, req.(*UpgradePkgPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailUpdate(ctx, req.(*UpgradePkgPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailGet(ctx, req.(*UpgradePkgPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailList(ctx, req.(*UpgradePkgPlanDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanAdd(ctx, req.(*UpgradeResPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanUpdate(ctx, req.(*UpgradeResPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanGet(ctx, req.(*UpgradeResPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanList(ctx, req.(*UpgradeResPlanListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailAdd(ctx, req.(*UpgradeResPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailUpdate(ctx, req.(*UpgradeResPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailGet(ctx, req.(*UpgradeResPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailList(ctx, req.(*UpgradeResPlanDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoPmpClient_ServiceDesc is the grpc.ServiceDesc for GoPmpClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoPmpClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pmp.GoPmpClient",
	HandlerType: (*GoPmpClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoPmpClient_Ping_Handler,
		},
		{
			MethodName: "GlobalParamAdd",
			Handler:    _GoPmpClient_GlobalParamAdd_Handler,
		},
		{
			MethodName: "GlobalParamUpdate",
			Handler:    _GoPmpClient_GlobalParamUpdate_Handler,
		},
		{
			MethodName: "GlobalParamDel",
			Handler:    _GoPmpClient_GlobalParamDel_Handler,
		},
		{
			MethodName: "GlobalParamGet",
			Handler:    _GoPmpClient_GlobalParamGet_Handler,
		},
		{
			MethodName: "GlobalParamList",
			Handler:    _GoPmpClient_GlobalParamList_Handler,
		},
		{
			MethodName: "ProductAdd",
			Handler:    _GoPmpClient_ProductAdd_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _GoPmpClient_ProductUpdate_Handler,
		},
		{
			MethodName: "ProductDel",
			Handler:    _GoPmpClient_ProductDel_Handler,
		},
		{
			MethodName: "ProductGet",
			Handler:    _GoPmpClient_ProductGet_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _GoPmpClient_ProductList_Handler,
		},
		{
			MethodName: "ProductAll",
			Handler:    _GoPmpClient_ProductAll_Handler,
		},
		{
			MethodName: "ProductParamUpdate",
			Handler:    _GoPmpClient_ProductParamUpdate_Handler,
		},
		{
			MethodName: "ProductParamGet",
			Handler:    _GoPmpClient_ProductParamGet_Handler,
		},
		{
			MethodName: "ProductParamList",
			Handler:    _GoPmpClient_ProductParamList_Handler,
		},
		{
			MethodName: "ProductActionAdd",
			Handler:    _GoPmpClient_ProductActionAdd_Handler,
		},
		{
			MethodName: "ProductActionUpdate",
			Handler:    _GoPmpClient_ProductActionUpdate_Handler,
		},
		{
			MethodName: "ProductActionDel",
			Handler:    _GoPmpClient_ProductActionDel_Handler,
		},
		{
			MethodName: "ProductActionGet",
			Handler:    _GoPmpClient_ProductActionGet_Handler,
		},
		{
			MethodName: "ProductActionList",
			Handler:    _GoPmpClient_ProductActionList_Handler,
		},
		{
			MethodName: "AreaParamAdd",
			Handler:    _GoPmpClient_AreaParamAdd_Handler,
		},
		{
			MethodName: "AreaParamUpdate",
			Handler:    _GoPmpClient_AreaParamUpdate_Handler,
		},
		{
			MethodName: "AreaParamDel",
			Handler:    _GoPmpClient_AreaParamDel_Handler,
		},
		{
			MethodName: "AreaParamGet",
			Handler:    _GoPmpClient_AreaParamGet_Handler,
		},
		{
			MethodName: "AreaParamList",
			Handler:    _GoPmpClient_AreaParamList_Handler,
		},
		{
			MethodName: "NationalLanguageAdd",
			Handler:    _GoPmpClient_NationalLanguageAdd_Handler,
		},
		{
			MethodName: "NationalLanguageUpdate",
			Handler:    _GoPmpClient_NationalLanguageUpdate_Handler,
		},
		{
			MethodName: "NationalLanguageDel",
			Handler:    _GoPmpClient_NationalLanguageDel_Handler,
		},
		{
			MethodName: "NationalLanguageGet",
			Handler:    _GoPmpClient_NationalLanguageGet_Handler,
		},
		{
			MethodName: "NationalLanguageList",
			Handler:    _GoPmpClient_NationalLanguageList_Handler,
		},
		{
			MethodName: "TipAdd",
			Handler:    _GoPmpClient_TipAdd_Handler,
		},
		{
			MethodName: "TipUpdate",
			Handler:    _GoPmpClient_TipUpdate_Handler,
		},
		{
			MethodName: "TipDel",
			Handler:    _GoPmpClient_TipDel_Handler,
		},
		{
			MethodName: "TipGet",
			Handler:    _GoPmpClient_TipGet_Handler,
		},
		{
			MethodName: "TipList",
			Handler:    _GoPmpClient_TipList_Handler,
		},
		{
			MethodName: "UpgradeResAdd",
			Handler:    _GoPmpClient_UpgradeResAdd_Handler,
		},
		{
			MethodName: "UpgradeResUpdate",
			Handler:    _GoPmpClient_UpgradeResUpdate_Handler,
		},
		{
			MethodName: "UpgradeResDel",
			Handler:    _GoPmpClient_UpgradeResDel_Handler,
		},
		{
			MethodName: "UpgradeResGet",
			Handler:    _GoPmpClient_UpgradeResGet_Handler,
		},
		{
			MethodName: "UpgradeResList",
			Handler:    _GoPmpClient_UpgradeResList_Handler,
		},
		{
			MethodName: "UpgradePkgAdd",
			Handler:    _GoPmpClient_UpgradePkgAdd_Handler,
		},
		{
			MethodName: "UpgradePkgUpdate",
			Handler:    _GoPmpClient_UpgradePkgUpdate_Handler,
		},
		{
			MethodName: "UpgradePkgDel",
			Handler:    _GoPmpClient_UpgradePkgDel_Handler,
		},
		{
			MethodName: "UpgradePkgGet",
			Handler:    _GoPmpClient_UpgradePkgGet_Handler,
		},
		{
			MethodName: "UpgradePkgList",
			Handler:    _GoPmpClient_UpgradePkgList_Handler,
		},
		{
			MethodName: "UpgradeResConfigAdd",
			Handler:    _GoPmpClient_UpgradeResConfigAdd_Handler,
		},
		{
			MethodName: "UpgradeResConfigUpdate",
			Handler:    _GoPmpClient_UpgradeResConfigUpdate_Handler,
		},
		{
			MethodName: "UpgradeResConfigDel",
			Handler:    _GoPmpClient_UpgradeResConfigDel_Handler,
		},
		{
			MethodName: "UpgradeResConfigGet",
			Handler:    _GoPmpClient_UpgradeResConfigGet_Handler,
		},
		{
			MethodName: "UpgradeResConfigList",
			Handler:    _GoPmpClient_UpgradeResConfigList_Handler,
		},
		{
			MethodName: "DictAdd",
			Handler:    _GoPmpClient_DictAdd_Handler,
		},
		{
			MethodName: "DictUpdate",
			Handler:    _GoPmpClient_DictUpdate_Handler,
		},
		{
			MethodName: "DictDel",
			Handler:    _GoPmpClient_DictDel_Handler,
		},
		{
			MethodName: "DictGet",
			Handler:    _GoPmpClient_DictGet_Handler,
		},
		{
			MethodName: "DictList",
			Handler:    _GoPmpClient_DictList_Handler,
		},
		{
			MethodName: "UpgradePkgPlanAdd",
			Handler:    _GoPmpClient_UpgradePkgPlanAdd_Handler,
		},
		{
			MethodName: "UpgradePkgPlanUpdate",
			Handler:    _GoPmpClient_UpgradePkgPlanUpdate_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDel",
			Handler:    _GoPmpClient_UpgradePkgPlanDel_Handler,
		},
		{
			MethodName: "UpgradePkgPlanGet",
			Handler:    _GoPmpClient_UpgradePkgPlanGet_Handler,
		},
		{
			MethodName: "UpgradePkgPlanList",
			Handler:    _GoPmpClient_UpgradePkgPlanList_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailAdd",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailAdd_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailUpdate",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailUpdate_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailDel",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailDel_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailGet",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailGet_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailList",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailList_Handler,
		},
		{
			MethodName: "UpgradeResPlanAdd",
			Handler:    _GoPmpClient_UpgradeResPlanAdd_Handler,
		},
		{
			MethodName: "UpgradeResPlanUpdate",
			Handler:    _GoPmpClient_UpgradeResPlanUpdate_Handler,
		},
		{
			MethodName: "UpgradeResPlanDel",
			Handler:    _GoPmpClient_UpgradeResPlanDel_Handler,
		},
		{
			MethodName: "UpgradeResPlanGet",
			Handler:    _GoPmpClient_UpgradeResPlanGet_Handler,
		},
		{
			MethodName: "UpgradeResPlanList",
			Handler:    _GoPmpClient_UpgradeResPlanList_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailAdd",
			Handler:    _GoPmpClient_UpgradeResPlanDetailAdd_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailUpdate",
			Handler:    _GoPmpClient_UpgradeResPlanDetailUpdate_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailDel",
			Handler:    _GoPmpClient_UpgradeResPlanDetailDel_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailGet",
			Handler:    _GoPmpClient_UpgradeResPlanDetailGet_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailList",
			Handler:    _GoPmpClient_UpgradeResPlanDetailList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pmp.proto",
}
