// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: sys.proto

package sys

import (
	context "context"
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoSysClient_Ping_FullMethodName  = "/sys.GoSysClient/Ping"
	GoSysClient_Login_FullMethodName = "/sys.GoSysClient/Login"
)

// GoSysClientClient is the client API for GoSysClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 后续扩展
// pmp 模块：
// 登录
// 角色管理(sys_role)
// 用户管理(sys_user)
// 菜单管理(sys_menu-CRUD(5个权限))
// 字典管理(sys_dict)，组织管理(sys_dep)
// 岗位管理(sys_post)
type GoSysClientClient interface {
	Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error)
	// 登录
	Login(ctx context.Context, in *common.BaseReq, opts ...grpc.CallOption) (*common.Response, error)
}

type goSysClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSysClientClient(cc grpc.ClientConnInterface) GoSysClientClient {
	return &goSysClientClient{cc}
}

func (c *goSysClientClient) Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, GoSysClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSysClientClient) Login(ctx context.Context, in *common.BaseReq, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, GoSysClient_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSysClientServer is the server API for GoSysClient service.
// All implementations must embed UnimplementedGoSysClientServer
// for forward compatibility.
//
// 后续扩展
// pmp 模块：
// 登录
// 角色管理(sys_role)
// 用户管理(sys_user)
// 菜单管理(sys_menu-CRUD(5个权限))
// 字典管理(sys_dict)，组织管理(sys_dep)
// 岗位管理(sys_post)
type GoSysClientServer interface {
	Ping(context.Context, *common.Request) (*common.Response, error)
	// 登录
	Login(context.Context, *common.BaseReq) (*common.Response, error)
	mustEmbedUnimplementedGoSysClientServer()
}

// UnimplementedGoSysClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoSysClientServer struct{}

func (UnimplementedGoSysClientServer) Ping(context.Context, *common.Request) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoSysClientServer) Login(context.Context, *common.BaseReq) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGoSysClientServer) mustEmbedUnimplementedGoSysClientServer() {}
func (UnimplementedGoSysClientServer) testEmbeddedByValue()                     {}

// UnsafeGoSysClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoSysClientServer will
// result in compilation errors.
type UnsafeGoSysClientServer interface {
	mustEmbedUnimplementedGoSysClientServer()
}

func RegisterGoSysClientServer(s grpc.ServiceRegistrar, srv GoSysClientServer) {
	// If the following call pancis, it indicates UnimplementedGoSysClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoSysClient_ServiceDesc, srv)
}

func _GoSysClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSysClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSysClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSysClientServer).Ping(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSysClient_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.BaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSysClientServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSysClient_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSysClientServer).Login(ctx, req.(*common.BaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoSysClient_ServiceDesc is the grpc.ServiceDesc for GoSysClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoSysClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.GoSysClient",
	HandlerType: (*GoSysClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoSysClient_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GoSysClient_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys.proto",
}
