// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.4
// source: vpn.proto

package vpn

import (
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VpnTag 相关消息定义
type VpnTagVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Sort          int64                  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        common.Status          `protobuf:"varint,6,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Remark        string                 `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagVo) Reset() {
	*x = VpnTagVo{}
	mi := &file_vpn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagVo) ProtoMessage() {}

func (x *VpnTagVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagVo.ProtoReflect.Descriptor instead.
func (*VpnTagVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{0}
}

func (x *VpnTagVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnTagVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *VpnTagVo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VpnTagVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnTagVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *VpnTagVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *VpnTagVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnTagVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnTagVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type VpnTagGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnTagVo              `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagGetReq) Reset() {
	*x = VpnTagGetReq{}
	mi := &file_vpn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagGetReq) ProtoMessage() {}

func (x *VpnTagGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagGetReq.ProtoReflect.Descriptor instead.
func (*VpnTagGetReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{1}
}

func (x *VpnTagGetReq) GetVo() *VpnTagVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnTagListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnTagVo              `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagListReq) Reset() {
	*x = VpnTagListReq{}
	mi := &file_vpn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagListReq) ProtoMessage() {}

func (x *VpnTagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagListReq.ProtoReflect.Descriptor instead.
func (*VpnTagListReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{2}
}

func (x *VpnTagListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnTagListReq) GetVo() *VpnTagVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnTagListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnTagVo            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagListResp) Reset() {
	*x = VpnTagListResp{}
	mi := &file_vpn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagListResp) ProtoMessage() {}

func (x *VpnTagListResp) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagListResp.ProtoReflect.Descriptor instead.
func (*VpnTagListResp) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{3}
}

func (x *VpnTagListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnTagListResp) GetList() []*VpnTagVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnGroupVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Sort          int64                  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        common.Status          `protobuf:"varint,6,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Remark        string                 `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version       string                 `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupVo) Reset() {
	*x = VpnGroupVo{}
	mi := &file_vpn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupVo) ProtoMessage() {}

func (x *VpnGroupVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupVo.ProtoReflect.Descriptor instead.
func (*VpnGroupVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{4}
}

func (x *VpnGroupVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnGroupVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *VpnGroupVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnGroupVo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *VpnGroupVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *VpnGroupVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *VpnGroupVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnGroupVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnGroupVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnGroupVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VpnGroupAddReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnGroupVo            `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	TagIds        []int64                `protobuf:"varint,2,rep,packed,name=tagIds,proto3" json:"tagIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupAddReq) Reset() {
	*x = VpnGroupAddReq{}
	mi := &file_vpn_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupAddReq) ProtoMessage() {}

func (x *VpnGroupAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupAddReq.ProtoReflect.Descriptor instead.
func (*VpnGroupAddReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{5}
}

func (x *VpnGroupAddReq) GetVo() *VpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnGroupAddReq) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type VpnGroupGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnGroupVo            `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupGetReq) Reset() {
	*x = VpnGroupGetReq{}
	mi := &file_vpn_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupGetReq) ProtoMessage() {}

func (x *VpnGroupGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupGetReq.ProtoReflect.Descriptor instead.
func (*VpnGroupGetReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{6}
}

func (x *VpnGroupGetReq) GetVo() *VpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnGroupListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnGroupVo            `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupListReq) Reset() {
	*x = VpnGroupListReq{}
	mi := &file_vpn_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupListReq) ProtoMessage() {}

func (x *VpnGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupListReq.ProtoReflect.Descriptor instead.
func (*VpnGroupListReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{7}
}

func (x *VpnGroupListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnGroupListReq) GetVo() *VpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnGroupListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnGroupVo          `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupListResp) Reset() {
	*x = VpnGroupListResp{}
	mi := &file_vpn_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupListResp) ProtoMessage() {}

func (x *VpnGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupListResp.ProtoReflect.Descriptor instead.
func (*VpnGroupListResp) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{8}
}

func (x *VpnGroupListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnGroupListResp) GetList() []*VpnGroupVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnGroupTagVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId       int64                  `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	TagId         int64                  `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	CreateTime    int64                  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupTagVo) Reset() {
	*x = VpnGroupTagVo{}
	mi := &file_vpn_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupTagVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupTagVo) ProtoMessage() {}

func (x *VpnGroupTagVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupTagVo.ProtoReflect.Descriptor instead.
func (*VpnGroupTagVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{9}
}

func (x *VpnGroupTagVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnGroupTagVo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *VpnGroupTagVo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *VpnGroupTagVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnGroupTagVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type VpnGroupTagListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnGroupTagVo         `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	GroupIds      []int64                `protobuf:"varint,3,rep,packed,name=groupIds,proto3" json:"groupIds,omitempty"`
	TagIds        []int64                `protobuf:"varint,4,rep,packed,name=tagIds,proto3" json:"tagIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupTagListReq) Reset() {
	*x = VpnGroupTagListReq{}
	mi := &file_vpn_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupTagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupTagListReq) ProtoMessage() {}

func (x *VpnGroupTagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupTagListReq.ProtoReflect.Descriptor instead.
func (*VpnGroupTagListReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{10}
}

func (x *VpnGroupTagListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnGroupTagListReq) GetVo() *VpnGroupTagVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnGroupTagListReq) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *VpnGroupTagListReq) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type VpnGroupTagListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnGroupTagVo       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupTagListResp) Reset() {
	*x = VpnGroupTagListResp{}
	mi := &file_vpn_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupTagListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupTagListResp) ProtoMessage() {}

func (x *VpnGroupTagListResp) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupTagListResp.ProtoReflect.Descriptor instead.
func (*VpnGroupTagListResp) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{11}
}

func (x *VpnGroupTagListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnGroupTagListResp) GetList() []*VpnGroupTagVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnLocationVo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId             int64                  `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Name                string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code                string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Icon                string                 `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Type                int64                  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	DisplayPolicyConfig string                 `protobuf:"bytes,7,opt,name=displayPolicyConfig,proto3" json:"displayPolicyConfig,omitempty"`
	RoutePolicyConfig   string                 `protobuf:"bytes,8,opt,name=routePolicyConfig,proto3" json:"routePolicyConfig,omitempty"`
	Sort                int64                  `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`
	Status              common.Status          `protobuf:"varint,10,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Remark              string                 `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime          int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          int64                  `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version             string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VpnLocationVo) Reset() {
	*x = VpnLocationVo{}
	mi := &file_vpn_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationVo) ProtoMessage() {}

func (x *VpnLocationVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationVo.ProtoReflect.Descriptor instead.
func (*VpnLocationVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{12}
}

func (x *VpnLocationVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnLocationVo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *VpnLocationVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnLocationVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VpnLocationVo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *VpnLocationVo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VpnLocationVo) GetDisplayPolicyConfig() string {
	if x != nil {
		return x.DisplayPolicyConfig
	}
	return ""
}

func (x *VpnLocationVo) GetRoutePolicyConfig() string {
	if x != nil {
		return x.RoutePolicyConfig
	}
	return ""
}

func (x *VpnLocationVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *VpnLocationVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *VpnLocationVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnLocationVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnLocationVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnLocationVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VpnLocationExVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnLocationVo         `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationExVo) Reset() {
	*x = VpnLocationExVo{}
	mi := &file_vpn_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationExVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationExVo) ProtoMessage() {}

func (x *VpnLocationExVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationExVo.ProtoReflect.Descriptor instead.
func (*VpnLocationExVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{13}
}

func (x *VpnLocationExVo) GetVo() *VpnLocationVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnLocationExVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

type VpnLocationGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnLocationVo         `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationGetReq) Reset() {
	*x = VpnLocationGetReq{}
	mi := &file_vpn_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationGetReq) ProtoMessage() {}

func (x *VpnLocationGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationGetReq.ProtoReflect.Descriptor instead.
func (*VpnLocationGetReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{14}
}

func (x *VpnLocationGetReq) GetVo() *VpnLocationVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnLocationListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnLocationExVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	GroupIds      []int64                `protobuf:"varint,3,rep,packed,name=groupIds,proto3" json:"groupIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationListReq) Reset() {
	*x = VpnLocationListReq{}
	mi := &file_vpn_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationListReq) ProtoMessage() {}

func (x *VpnLocationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationListReq.ProtoReflect.Descriptor instead.
func (*VpnLocationListReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{15}
}

func (x *VpnLocationListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnLocationListReq) GetVo() *VpnLocationExVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnLocationListReq) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type VpnLocationListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnLocationExVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationListResp) Reset() {
	*x = VpnLocationListResp{}
	mi := &file_vpn_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationListResp) ProtoMessage() {}

func (x *VpnLocationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationListResp.ProtoReflect.Descriptor instead.
func (*VpnLocationListResp) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{16}
}

func (x *VpnLocationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnLocationListResp) GetList() []*VpnLocationExVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnServerVo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InstanceId        int64                  `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name              string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ip                string                 `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port              int64                  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	PingPort          int64                  `protobuf:"varint,6,opt,name=pingPort,proto3" json:"pingPort,omitempty"`
	NetConfig         string                 `protobuf:"bytes,7,opt,name=netConfig,proto3" json:"netConfig,omitempty"`
	RoutePolicyConfig string                 `protobuf:"bytes,8,opt,name=routePolicyConfig,proto3" json:"routePolicyConfig,omitempty"`
	ServerInfo        string                 `protobuf:"bytes,9,opt,name=serverInfo,proto3" json:"serverInfo,omitempty"`
	Status            common.Status          `protobuf:"varint,10,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	Remark            string                 `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime        int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime        int64                  `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version           string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VpnServerVo) Reset() {
	*x = VpnServerVo{}
	mi := &file_vpn_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerVo) ProtoMessage() {}

func (x *VpnServerVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerVo.ProtoReflect.Descriptor instead.
func (*VpnServerVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{17}
}

func (x *VpnServerVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnServerVo) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *VpnServerVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnServerVo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *VpnServerVo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *VpnServerVo) GetPingPort() int64 {
	if x != nil {
		return x.PingPort
	}
	return 0
}

func (x *VpnServerVo) GetNetConfig() string {
	if x != nil {
		return x.NetConfig
	}
	return ""
}

func (x *VpnServerVo) GetRoutePolicyConfig() string {
	if x != nil {
		return x.RoutePolicyConfig
	}
	return ""
}

func (x *VpnServerVo) GetServerInfo() string {
	if x != nil {
		return x.ServerInfo
	}
	return ""
}

func (x *VpnServerVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *VpnServerVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnServerVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnServerVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnServerVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VpnServerListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnServerVo           `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	ProductCode   string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerListReq) Reset() {
	*x = VpnServerListReq{}
	mi := &file_vpn_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerListReq) ProtoMessage() {}

func (x *VpnServerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerListReq.ProtoReflect.Descriptor instead.
func (*VpnServerListReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{18}
}

func (x *VpnServerListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnServerListReq) GetVo() *VpnServerVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnServerListReq) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

type VpnServerListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnServerVo         `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerListResp) Reset() {
	*x = VpnServerListResp{}
	mi := &file_vpn_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerListResp) ProtoMessage() {}

func (x *VpnServerListResp) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerListResp.ProtoReflect.Descriptor instead.
func (*VpnServerListResp) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{19}
}

func (x *VpnServerListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnServerListResp) GetList() []*VpnServerVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnServerAddReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnServerVo           `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	LocationIds   []int64                `protobuf:"varint,2,rep,packed,name=locationIds,proto3" json:"locationIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerAddReq) Reset() {
	*x = VpnServerAddReq{}
	mi := &file_vpn_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerAddReq) ProtoMessage() {}

func (x *VpnServerAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerAddReq.ProtoReflect.Descriptor instead.
func (*VpnServerAddReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{20}
}

func (x *VpnServerAddReq) GetVo() *VpnServerVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnServerAddReq) GetLocationIds() []int64 {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

type VpnServerLocationVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ServerId      int64                  `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	LocationId    int64                  `protobuf:"varint,3,opt,name=locationId,proto3" json:"locationId,omitempty"`
	CreateTime    int64                  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Status        common.Status          `protobuf:"varint,6,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerLocationVo) Reset() {
	*x = VpnServerLocationVo{}
	mi := &file_vpn_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerLocationVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerLocationVo) ProtoMessage() {}

func (x *VpnServerLocationVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerLocationVo.ProtoReflect.Descriptor instead.
func (*VpnServerLocationVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{21}
}

func (x *VpnServerLocationVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnServerLocationVo) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *VpnServerLocationVo) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *VpnServerLocationVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnServerLocationVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnServerLocationVo) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

type VpnServerLocationListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnServerLocationVo   `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	ServerIds     []int64                `protobuf:"varint,3,rep,packed,name=serverIds,proto3" json:"serverIds,omitempty"`
	LocationIds   []int64                `protobuf:"varint,4,rep,packed,name=locationIds,proto3" json:"locationIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerLocationListReq) Reset() {
	*x = VpnServerLocationListReq{}
	mi := &file_vpn_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerLocationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerLocationListReq) ProtoMessage() {}

func (x *VpnServerLocationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerLocationListReq.ProtoReflect.Descriptor instead.
func (*VpnServerLocationListReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{22}
}

func (x *VpnServerLocationListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnServerLocationListReq) GetVo() *VpnServerLocationVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnServerLocationListReq) GetServerIds() []int64 {
	if x != nil {
		return x.ServerIds
	}
	return nil
}

func (x *VpnServerLocationListReq) GetLocationIds() []int64 {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

type VpnServerLocationListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnServerLocationVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerLocationListResp) Reset() {
	*x = VpnServerLocationListResp{}
	mi := &file_vpn_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerLocationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerLocationListResp) ProtoMessage() {}

func (x *VpnServerLocationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerLocationListResp.ProtoReflect.Descriptor instead.
func (*VpnServerLocationListResp) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{23}
}

func (x *VpnServerLocationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnServerLocationListResp) GetList() []*VpnServerLocationVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnLocationServerCountVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocationId    int64                  `protobuf:"varint,1,opt,name=locationId,proto3" json:"locationId,omitempty"`
	ServerCount   int64                  `protobuf:"varint,2,opt,name=serverCount,proto3" json:"serverCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationServerCountVo) Reset() {
	*x = VpnLocationServerCountVo{}
	mi := &file_vpn_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationServerCountVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationServerCountVo) ProtoMessage() {}

func (x *VpnLocationServerCountVo) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationServerCountVo.ProtoReflect.Descriptor instead.
func (*VpnLocationServerCountVo) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{24}
}

func (x *VpnLocationServerCountVo) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *VpnLocationServerCountVo) GetServerCount() int64 {
	if x != nil {
		return x.ServerCount
	}
	return 0
}

type VpnLocationServerCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Status        common.Status          `protobuf:"varint,2,opt,name=status,proto3,enum=common.Status" json:"status,omitempty"`
	ServerIds     []int64                `protobuf:"varint,3,rep,packed,name=serverIds,proto3" json:"serverIds,omitempty"`
	LocationIds   []int64                `protobuf:"varint,4,rep,packed,name=locationIds,proto3" json:"locationIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationServerCountReq) Reset() {
	*x = VpnLocationServerCountReq{}
	mi := &file_vpn_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationServerCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationServerCountReq) ProtoMessage() {}

func (x *VpnLocationServerCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationServerCountReq.ProtoReflect.Descriptor instead.
func (*VpnLocationServerCountReq) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{25}
}

func (x *VpnLocationServerCountReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnLocationServerCountReq) GetStatus() common.Status {
	if x != nil {
		return x.Status
	}
	return common.Status(0)
}

func (x *VpnLocationServerCountReq) GetServerIds() []int64 {
	if x != nil {
		return x.ServerIds
	}
	return nil
}

func (x *VpnLocationServerCountReq) GetLocationIds() []int64 {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

type VpnLocationServerCountResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Total         int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnLocationServerCountVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationServerCountResp) Reset() {
	*x = VpnLocationServerCountResp{}
	mi := &file_vpn_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationServerCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationServerCountResp) ProtoMessage() {}

func (x *VpnLocationServerCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_vpn_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationServerCountResp.ProtoReflect.Descriptor instead.
func (*VpnLocationServerCountResp) Descriptor() ([]byte, []int) {
	return file_vpn_proto_rawDescGZIP(), []int{26}
}

func (x *VpnLocationServerCountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnLocationServerCountResp) GetList() []*VpnLocationServerCountVo {
	if x != nil {
		return x.List
	}
	return nil
}

var File_vpn_proto protoreflect.FileDescriptor

var file_vpn_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x76, 0x70, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x76, 0x70, 0x6e,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8,
	0x01, 0x0a, 0x08, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x0c, 0x56, 0x70, 0x6e,
	0x54, 0x61, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x54,
	0x61, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x50, 0x0a, 0x0d, 0x56, 0x70, 0x6e, 0x54,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70,
	0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x49, 0x0a, 0x0e, 0x56, 0x70,
	0x6e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x0a, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0e,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1f,
	0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x70, 0x6e,
	0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x54, 0x0a, 0x0f, 0x56, 0x70,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x70,
	0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f,
	0x22, 0x4d, 0x0a, 0x10, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x8f, 0x01, 0x0a, 0x0d, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x02, 0x76, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x97, 0x03, 0x0a, 0x0d, 0x56, 0x70, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x57, 0x0a, 0x0f, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x11, 0x56, 0x70,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x70,
	0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52,
	0x02, 0x76, 0x6f, 0x22, 0x78, 0x0a, 0x12, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x55, 0x0a,
	0x13, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56,
	0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x97, 0x03, 0x0a, 0x0b, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78,
	0x0a, 0x10, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x56, 0x70, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x0f, 0x56, 0x70, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x02,
	0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56,
	0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x22, 0xc9, 0x01, 0x0a, 0x13, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x18, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x19, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x18, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x1a,
	0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x32, 0xc0, 0x0e, 0x0a, 0x0b, 0x47, 0x6f, 0x56, 0x70, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x41, 0x64,
	0x64, 0x12, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f,
	0x1a, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12,
	0x2c, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x1a, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a,
	0x09, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67,
	0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e,
	0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70,
	0x6e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0b,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x76, 0x70,
	0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x6f, 0x12, 0x34, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0b, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x41, 0x64,
	0x64, 0x12, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x67, 0x56, 0x6f, 0x1a, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x36, 0x0a, 0x11, 0x56, 0x70, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67,
	0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x47, 0x65,
	0x74, 0x12, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x67, 0x56, 0x6f, 0x1a, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x56, 0x70, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x76,
	0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x12, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x36, 0x0a, 0x11, 0x56, 0x70, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3c, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x12, 0x16, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x76, 0x70, 0x6e, 0x2e,
	0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x44, 0x0a,
	0x0f, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e,
	0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x12, 0x14, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x76, 0x70, 0x6e, 0x2e,
	0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x12, 0x36, 0x0a, 0x0f, 0x56,
	0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x32, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12,
	0x10, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x6f, 0x1a, 0x10, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x56, 0x6f, 0x12, 0x3e, 0x0a, 0x0d, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x76, 0x70,
	0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x14, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x18, 0x2e, 0x76, 0x70,
	0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12,
	0x42, 0x0a, 0x17, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x70, 0x6e,
	0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x14, 0x56, 0x70, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12,
	0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x18, 0x2e, 0x76, 0x70, 0x6e, 0x2e,
	0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x12, 0x56, 0x0a, 0x15, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x76,
	0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x76, 0x70,
	0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x16, 0x56,
	0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x76, 0x70, 0x6e, 0x2e, 0x56, 0x70, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x31, 0x33, 0x35, 0x34, 0x32, 0x32, 0x39, 0x39, 0x36, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x62, 0x2f, 0x67, 0x6f,
	0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x76, 0x70, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_vpn_proto_rawDescOnce sync.Once
	file_vpn_proto_rawDescData []byte
)

func file_vpn_proto_rawDescGZIP() []byte {
	file_vpn_proto_rawDescOnce.Do(func() {
		file_vpn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vpn_proto_rawDesc), len(file_vpn_proto_rawDesc)))
	})
	return file_vpn_proto_rawDescData
}

var file_vpn_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_vpn_proto_goTypes = []any{
	(*VpnTagVo)(nil),                   // 0: vpn.VpnTagVo
	(*VpnTagGetReq)(nil),               // 1: vpn.VpnTagGetReq
	(*VpnTagListReq)(nil),              // 2: vpn.VpnTagListReq
	(*VpnTagListResp)(nil),             // 3: vpn.VpnTagListResp
	(*VpnGroupVo)(nil),                 // 4: vpn.VpnGroupVo
	(*VpnGroupAddReq)(nil),             // 5: vpn.VpnGroupAddReq
	(*VpnGroupGetReq)(nil),             // 6: vpn.VpnGroupGetReq
	(*VpnGroupListReq)(nil),            // 7: vpn.VpnGroupListReq
	(*VpnGroupListResp)(nil),           // 8: vpn.VpnGroupListResp
	(*VpnGroupTagVo)(nil),              // 9: vpn.VpnGroupTagVo
	(*VpnGroupTagListReq)(nil),         // 10: vpn.VpnGroupTagListReq
	(*VpnGroupTagListResp)(nil),        // 11: vpn.VpnGroupTagListResp
	(*VpnLocationVo)(nil),              // 12: vpn.VpnLocationVo
	(*VpnLocationExVo)(nil),            // 13: vpn.VpnLocationExVo
	(*VpnLocationGetReq)(nil),          // 14: vpn.VpnLocationGetReq
	(*VpnLocationListReq)(nil),         // 15: vpn.VpnLocationListReq
	(*VpnLocationListResp)(nil),        // 16: vpn.VpnLocationListResp
	(*VpnServerVo)(nil),                // 17: vpn.VpnServerVo
	(*VpnServerListReq)(nil),           // 18: vpn.VpnServerListReq
	(*VpnServerListResp)(nil),          // 19: vpn.VpnServerListResp
	(*VpnServerAddReq)(nil),            // 20: vpn.VpnServerAddReq
	(*VpnServerLocationVo)(nil),        // 21: vpn.VpnServerLocationVo
	(*VpnServerLocationListReq)(nil),   // 22: vpn.VpnServerLocationListReq
	(*VpnServerLocationListResp)(nil),  // 23: vpn.VpnServerLocationListResp
	(*VpnLocationServerCountVo)(nil),   // 24: vpn.VpnLocationServerCountVo
	(*VpnLocationServerCountReq)(nil),  // 25: vpn.VpnLocationServerCountReq
	(*VpnLocationServerCountResp)(nil), // 26: vpn.VpnLocationServerCountResp
	(common.Status)(0),                 // 27: common.Status
	(*common.Page)(nil),                // 28: common.Page
	(*common.Request)(nil),             // 29: common.Request
	(*common.TransactionReq)(nil),      // 30: common.TransactionReq
	(*common.Ids)(nil),                 // 31: common.Ids
	(*common.Response)(nil),            // 32: common.Response
	(*common.Empty)(nil),               // 33: common.Empty
}
var file_vpn_proto_depIdxs = []int32{
	27, // 0: vpn.VpnTagVo.status:type_name -> common.Status
	0,  // 1: vpn.VpnTagGetReq.vo:type_name -> vpn.VpnTagVo
	28, // 2: vpn.VpnTagListReq.page:type_name -> common.Page
	0,  // 3: vpn.VpnTagListReq.vo:type_name -> vpn.VpnTagVo
	0,  // 4: vpn.VpnTagListResp.list:type_name -> vpn.VpnTagVo
	27, // 5: vpn.VpnGroupVo.status:type_name -> common.Status
	4,  // 6: vpn.VpnGroupAddReq.vo:type_name -> vpn.VpnGroupVo
	4,  // 7: vpn.VpnGroupGetReq.vo:type_name -> vpn.VpnGroupVo
	28, // 8: vpn.VpnGroupListReq.page:type_name -> common.Page
	4,  // 9: vpn.VpnGroupListReq.vo:type_name -> vpn.VpnGroupVo
	4,  // 10: vpn.VpnGroupListResp.list:type_name -> vpn.VpnGroupVo
	28, // 11: vpn.VpnGroupTagListReq.page:type_name -> common.Page
	9,  // 12: vpn.VpnGroupTagListReq.vo:type_name -> vpn.VpnGroupTagVo
	9,  // 13: vpn.VpnGroupTagListResp.list:type_name -> vpn.VpnGroupTagVo
	27, // 14: vpn.VpnLocationVo.status:type_name -> common.Status
	12, // 15: vpn.VpnLocationExVo.vo:type_name -> vpn.VpnLocationVo
	12, // 16: vpn.VpnLocationGetReq.vo:type_name -> vpn.VpnLocationVo
	28, // 17: vpn.VpnLocationListReq.page:type_name -> common.Page
	13, // 18: vpn.VpnLocationListReq.vo:type_name -> vpn.VpnLocationExVo
	13, // 19: vpn.VpnLocationListResp.list:type_name -> vpn.VpnLocationExVo
	27, // 20: vpn.VpnServerVo.status:type_name -> common.Status
	28, // 21: vpn.VpnServerListReq.page:type_name -> common.Page
	17, // 22: vpn.VpnServerListReq.vo:type_name -> vpn.VpnServerVo
	17, // 23: vpn.VpnServerListResp.list:type_name -> vpn.VpnServerVo
	17, // 24: vpn.VpnServerAddReq.vo:type_name -> vpn.VpnServerVo
	27, // 25: vpn.VpnServerLocationVo.status:type_name -> common.Status
	28, // 26: vpn.VpnServerLocationListReq.page:type_name -> common.Page
	21, // 27: vpn.VpnServerLocationListReq.vo:type_name -> vpn.VpnServerLocationVo
	21, // 28: vpn.VpnServerLocationListResp.list:type_name -> vpn.VpnServerLocationVo
	28, // 29: vpn.VpnLocationServerCountReq.page:type_name -> common.Page
	27, // 30: vpn.VpnLocationServerCountReq.status:type_name -> common.Status
	24, // 31: vpn.VpnLocationServerCountResp.list:type_name -> vpn.VpnLocationServerCountVo
	29, // 32: vpn.GoVpnClient.Ping:input_type -> common.Request
	30, // 33: vpn.GoVpnClient.Transaction:input_type -> common.TransactionReq
	0,  // 34: vpn.GoVpnClient.VpnTagAdd:input_type -> vpn.VpnTagVo
	0,  // 35: vpn.GoVpnClient.VpnTagUpdate:input_type -> vpn.VpnTagVo
	31, // 36: vpn.GoVpnClient.VpnTagDel:input_type -> common.Ids
	1,  // 37: vpn.GoVpnClient.VpnTagGet:input_type -> vpn.VpnTagGetReq
	2,  // 38: vpn.GoVpnClient.VpnTagList:input_type -> vpn.VpnTagListReq
	5,  // 39: vpn.GoVpnClient.VpnGroupAdd:input_type -> vpn.VpnGroupAddReq
	5,  // 40: vpn.GoVpnClient.VpnGroupUpdate:input_type -> vpn.VpnGroupAddReq
	31, // 41: vpn.GoVpnClient.VpnGroupDel:input_type -> common.Ids
	7,  // 42: vpn.GoVpnClient.VpnGroupList:input_type -> vpn.VpnGroupListReq
	9,  // 43: vpn.GoVpnClient.VpnGroupTagAdd:input_type -> vpn.VpnGroupTagVo
	9,  // 44: vpn.GoVpnClient.VpnGroupTagUpdate:input_type -> vpn.VpnGroupTagVo
	31, // 45: vpn.GoVpnClient.VpnGroupTagDel:input_type -> common.Ids
	9,  // 46: vpn.GoVpnClient.VpnGroupTagGet:input_type -> vpn.VpnGroupTagVo
	10, // 47: vpn.GoVpnClient.VpnGroupTagList:input_type -> vpn.VpnGroupTagListReq
	12, // 48: vpn.GoVpnClient.VpnLocationAdd:input_type -> vpn.VpnLocationVo
	12, // 49: vpn.GoVpnClient.VpnLocationUpdate:input_type -> vpn.VpnLocationVo
	31, // 50: vpn.GoVpnClient.VpnLocationDel:input_type -> common.Ids
	14, // 51: vpn.GoVpnClient.VpnLocationGet:input_type -> vpn.VpnLocationGetReq
	15, // 52: vpn.GoVpnClient.VpnLocationList:input_type -> vpn.VpnLocationListReq
	20, // 53: vpn.GoVpnClient.VpnServerAdd:input_type -> vpn.VpnServerAddReq
	20, // 54: vpn.GoVpnClient.VpnServerUpdate:input_type -> vpn.VpnServerAddReq
	31, // 55: vpn.GoVpnClient.VpnServerDel:input_type -> common.Ids
	17, // 56: vpn.GoVpnClient.VpnServerGet:input_type -> vpn.VpnServerVo
	18, // 57: vpn.GoVpnClient.VpnServerList:input_type -> vpn.VpnServerListReq
	21, // 58: vpn.GoVpnClient.VpnServerLocationAdd:input_type -> vpn.VpnServerLocationVo
	21, // 59: vpn.GoVpnClient.VpnServerLocationUpdate:input_type -> vpn.VpnServerLocationVo
	31, // 60: vpn.GoVpnClient.VpnServerLocationDel:input_type -> common.Ids
	21, // 61: vpn.GoVpnClient.VpnServerLocationGet:input_type -> vpn.VpnServerLocationVo
	22, // 62: vpn.GoVpnClient.VpnServerLocationList:input_type -> vpn.VpnServerLocationListReq
	25, // 63: vpn.GoVpnClient.VpnLocationServerCount:input_type -> vpn.VpnLocationServerCountReq
	32, // 64: vpn.GoVpnClient.Ping:output_type -> common.Response
	33, // 65: vpn.GoVpnClient.Transaction:output_type -> common.Empty
	0,  // 66: vpn.GoVpnClient.VpnTagAdd:output_type -> vpn.VpnTagVo
	33, // 67: vpn.GoVpnClient.VpnTagUpdate:output_type -> common.Empty
	33, // 68: vpn.GoVpnClient.VpnTagDel:output_type -> common.Empty
	0,  // 69: vpn.GoVpnClient.VpnTagGet:output_type -> vpn.VpnTagVo
	3,  // 70: vpn.GoVpnClient.VpnTagList:output_type -> vpn.VpnTagListResp
	4,  // 71: vpn.GoVpnClient.VpnGroupAdd:output_type -> vpn.VpnGroupVo
	33, // 72: vpn.GoVpnClient.VpnGroupUpdate:output_type -> common.Empty
	33, // 73: vpn.GoVpnClient.VpnGroupDel:output_type -> common.Empty
	8,  // 74: vpn.GoVpnClient.VpnGroupList:output_type -> vpn.VpnGroupListResp
	9,  // 75: vpn.GoVpnClient.VpnGroupTagAdd:output_type -> vpn.VpnGroupTagVo
	33, // 76: vpn.GoVpnClient.VpnGroupTagUpdate:output_type -> common.Empty
	33, // 77: vpn.GoVpnClient.VpnGroupTagDel:output_type -> common.Empty
	9,  // 78: vpn.GoVpnClient.VpnGroupTagGet:output_type -> vpn.VpnGroupTagVo
	11, // 79: vpn.GoVpnClient.VpnGroupTagList:output_type -> vpn.VpnGroupTagListResp
	12, // 80: vpn.GoVpnClient.VpnLocationAdd:output_type -> vpn.VpnLocationVo
	33, // 81: vpn.GoVpnClient.VpnLocationUpdate:output_type -> common.Empty
	33, // 82: vpn.GoVpnClient.VpnLocationDel:output_type -> common.Empty
	12, // 83: vpn.GoVpnClient.VpnLocationGet:output_type -> vpn.VpnLocationVo
	16, // 84: vpn.GoVpnClient.VpnLocationList:output_type -> vpn.VpnLocationListResp
	17, // 85: vpn.GoVpnClient.VpnServerAdd:output_type -> vpn.VpnServerVo
	33, // 86: vpn.GoVpnClient.VpnServerUpdate:output_type -> common.Empty
	33, // 87: vpn.GoVpnClient.VpnServerDel:output_type -> common.Empty
	17, // 88: vpn.GoVpnClient.VpnServerGet:output_type -> vpn.VpnServerVo
	19, // 89: vpn.GoVpnClient.VpnServerList:output_type -> vpn.VpnServerListResp
	21, // 90: vpn.GoVpnClient.VpnServerLocationAdd:output_type -> vpn.VpnServerLocationVo
	33, // 91: vpn.GoVpnClient.VpnServerLocationUpdate:output_type -> common.Empty
	33, // 92: vpn.GoVpnClient.VpnServerLocationDel:output_type -> common.Empty
	21, // 93: vpn.GoVpnClient.VpnServerLocationGet:output_type -> vpn.VpnServerLocationVo
	23, // 94: vpn.GoVpnClient.VpnServerLocationList:output_type -> vpn.VpnServerLocationListResp
	26, // 95: vpn.GoVpnClient.VpnLocationServerCount:output_type -> vpn.VpnLocationServerCountResp
	64, // [64:96] is the sub-list for method output_type
	32, // [32:64] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_vpn_proto_init() }
func file_vpn_proto_init() {
	if File_vpn_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vpn_proto_rawDesc), len(file_vpn_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vpn_proto_goTypes,
		DependencyIndexes: file_vpn_proto_depIdxs,
		MessageInfos:      file_vpn_proto_msgTypes,
	}.Build()
	File_vpn_proto = out.File
	file_vpn_proto_goTypes = nil
	file_vpn_proto_depIdxs = nil
}
