// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: vpn.proto

package vpn

import (
	context "context"
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoVpnClient_Ping_FullMethodName                    = "/vpn.GoVpnClient/Ping"
	GoVpnClient_Transaction_FullMethodName             = "/vpn.GoVpnClient/Transaction"
	GoVpnClient_VpnTagAdd_FullMethodName               = "/vpn.GoVpnClient/VpnTagAdd"
	GoVpnClient_VpnTagUpdate_FullMethodName            = "/vpn.GoVpnClient/VpnTagUpdate"
	GoVpnClient_VpnTagDel_FullMethodName               = "/vpn.GoVpnClient/VpnTagDel"
	GoVpnClient_VpnTagGet_FullMethodName               = "/vpn.GoVpnClient/VpnTagGet"
	GoVpnClient_VpnTagList_FullMethodName              = "/vpn.GoVpnClient/VpnTagList"
	GoVpnClient_VpnGroupAdd_FullMethodName             = "/vpn.GoVpnClient/VpnGroupAdd"
	GoVpnClient_VpnGroupUpdate_FullMethodName          = "/vpn.GoVpnClient/VpnGroupUpdate"
	GoVpnClient_VpnGroupDel_FullMethodName             = "/vpn.GoVpnClient/VpnGroupDel"
	GoVpnClient_VpnGroupList_FullMethodName            = "/vpn.GoVpnClient/VpnGroupList"
	GoVpnClient_VpnGroupTagAdd_FullMethodName          = "/vpn.GoVpnClient/VpnGroupTagAdd"
	GoVpnClient_VpnGroupTagUpdate_FullMethodName       = "/vpn.GoVpnClient/VpnGroupTagUpdate"
	GoVpnClient_VpnGroupTagDel_FullMethodName          = "/vpn.GoVpnClient/VpnGroupTagDel"
	GoVpnClient_VpnGroupTagGet_FullMethodName          = "/vpn.GoVpnClient/VpnGroupTagGet"
	GoVpnClient_VpnGroupTagList_FullMethodName         = "/vpn.GoVpnClient/VpnGroupTagList"
	GoVpnClient_VpnLocationAdd_FullMethodName          = "/vpn.GoVpnClient/VpnLocationAdd"
	GoVpnClient_VpnLocationUpdate_FullMethodName       = "/vpn.GoVpnClient/VpnLocationUpdate"
	GoVpnClient_VpnLocationDel_FullMethodName          = "/vpn.GoVpnClient/VpnLocationDel"
	GoVpnClient_VpnLocationGet_FullMethodName          = "/vpn.GoVpnClient/VpnLocationGet"
	GoVpnClient_VpnLocationList_FullMethodName         = "/vpn.GoVpnClient/VpnLocationList"
	GoVpnClient_VpnServerAdd_FullMethodName            = "/vpn.GoVpnClient/VpnServerAdd"
	GoVpnClient_VpnServerUpdate_FullMethodName         = "/vpn.GoVpnClient/VpnServerUpdate"
	GoVpnClient_VpnServerDel_FullMethodName            = "/vpn.GoVpnClient/VpnServerDel"
	GoVpnClient_VpnServerGet_FullMethodName            = "/vpn.GoVpnClient/VpnServerGet"
	GoVpnClient_VpnServerList_FullMethodName           = "/vpn.GoVpnClient/VpnServerList"
	GoVpnClient_VpnServerLocationAdd_FullMethodName    = "/vpn.GoVpnClient/VpnServerLocationAdd"
	GoVpnClient_VpnServerLocationUpdate_FullMethodName = "/vpn.GoVpnClient/VpnServerLocationUpdate"
	GoVpnClient_VpnServerLocationDel_FullMethodName    = "/vpn.GoVpnClient/VpnServerLocationDel"
	GoVpnClient_VpnServerLocationGet_FullMethodName    = "/vpn.GoVpnClient/VpnServerLocationGet"
	GoVpnClient_VpnServerLocationList_FullMethodName   = "/vpn.GoVpnClient/VpnServerLocationList"
	GoVpnClient_VpnLocationServerCount_FullMethodName  = "/vpn.GoVpnClient/VpnLocationServerCount"
)

// GoVpnClientClient is the client API for GoVpnClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// govpn 模块，VPN相关服务
type GoVpnClientClient interface {
	Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error)
	// 表的事务操作
	Transaction(ctx context.Context, in *common.TransactionReq, opts ...grpc.CallOption) (*common.Empty, error)
	// VpnTag
	VpnTagAdd(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*VpnTagVo, error)
	VpnTagUpdate(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*common.Empty, error)
	VpnTagDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	VpnTagGet(ctx context.Context, in *VpnTagGetReq, opts ...grpc.CallOption) (*VpnTagVo, error)
	VpnTagList(ctx context.Context, in *VpnTagListReq, opts ...grpc.CallOption) (*VpnTagListResp, error)
	// VpnGroup
	VpnGroupAdd(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*VpnGroupVo, error)
	VpnGroupUpdate(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*common.Empty, error)
	VpnGroupDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	// rpc VpnGroupGet(VpnGroupGetReq) returns (VpnGroupVo);
	VpnGroupList(ctx context.Context, in *VpnGroupListReq, opts ...grpc.CallOption) (*VpnGroupListResp, error)
	// VpnGroupTag
	VpnGroupTagAdd(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error)
	VpnGroupTagUpdate(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*common.Empty, error)
	VpnGroupTagDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	VpnGroupTagGet(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error)
	VpnGroupTagList(ctx context.Context, in *VpnGroupTagListReq, opts ...grpc.CallOption) (*VpnGroupTagListResp, error)
	// VpnLocation
	VpnLocationAdd(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*VpnLocationVo, error)
	VpnLocationUpdate(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*common.Empty, error)
	VpnLocationDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	VpnLocationGet(ctx context.Context, in *VpnLocationGetReq, opts ...grpc.CallOption) (*VpnLocationVo, error)
	VpnLocationList(ctx context.Context, in *VpnLocationListReq, opts ...grpc.CallOption) (*VpnLocationListResp, error)
	// VpnServer
	VpnServerAdd(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*VpnServerVo, error)
	VpnServerUpdate(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*common.Empty, error)
	VpnServerDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	VpnServerGet(ctx context.Context, in *VpnServerVo, opts ...grpc.CallOption) (*VpnServerVo, error)
	VpnServerList(ctx context.Context, in *VpnServerListReq, opts ...grpc.CallOption) (*VpnServerListResp, error)
	// VpnServerLocation
	VpnServerLocationAdd(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error)
	VpnServerLocationUpdate(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*common.Empty, error)
	VpnServerLocationDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	VpnServerLocationGet(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error)
	VpnServerLocationList(ctx context.Context, in *VpnServerLocationListReq, opts ...grpc.CallOption) (*VpnServerLocationListResp, error)
	// VpnLocationServerCount
	VpnLocationServerCount(ctx context.Context, in *VpnLocationServerCountReq, opts ...grpc.CallOption) (*VpnLocationServerCountResp, error)
}

type goVpnClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoVpnClientClient(cc grpc.ClientConnInterface) GoVpnClientClient {
	return &goVpnClientClient{cc}
}

func (c *goVpnClientClient) Ping(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, GoVpnClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) Transaction(ctx context.Context, in *common.TransactionReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_Transaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagAdd(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*VpnTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagUpdate(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagGet(ctx context.Context, in *VpnTagGetReq, opts ...grpc.CallOption) (*VpnTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagList(ctx context.Context, in *VpnTagListReq, opts ...grpc.CallOption) (*VpnTagListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnTagListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupAdd(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*VpnGroupVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupUpdate(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupList(ctx context.Context, in *VpnGroupListReq, opts ...grpc.CallOption) (*VpnGroupListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagAdd(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagUpdate(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagGet(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagList(ctx context.Context, in *VpnGroupTagListReq, opts ...grpc.CallOption) (*VpnGroupTagListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupTagListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationAdd(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*VpnLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationUpdate(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationGet(ctx context.Context, in *VpnLocationGetReq, opts ...grpc.CallOption) (*VpnLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationList(ctx context.Context, in *VpnLocationListReq, opts ...grpc.CallOption) (*VpnLocationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerAdd(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*VpnServerVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerUpdate(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerGet(ctx context.Context, in *VpnServerVo, opts ...grpc.CallOption) (*VpnServerVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerList(ctx context.Context, in *VpnServerListReq, opts ...grpc.CallOption) (*VpnServerListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationAdd(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationUpdate(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationGet(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationList(ctx context.Context, in *VpnServerLocationListReq, opts ...grpc.CallOption) (*VpnServerLocationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerLocationListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationServerCount(ctx context.Context, in *VpnLocationServerCountReq, opts ...grpc.CallOption) (*VpnLocationServerCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationServerCountResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationServerCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoVpnClientServer is the server API for GoVpnClient service.
// All implementations must embed UnimplementedGoVpnClientServer
// for forward compatibility.
//
// govpn 模块，VPN相关服务
type GoVpnClientServer interface {
	Ping(context.Context, *common.Request) (*common.Response, error)
	// 表的事务操作
	Transaction(context.Context, *common.TransactionReq) (*common.Empty, error)
	// VpnTag
	VpnTagAdd(context.Context, *VpnTagVo) (*VpnTagVo, error)
	VpnTagUpdate(context.Context, *VpnTagVo) (*common.Empty, error)
	VpnTagDel(context.Context, *common.Ids) (*common.Empty, error)
	VpnTagGet(context.Context, *VpnTagGetReq) (*VpnTagVo, error)
	VpnTagList(context.Context, *VpnTagListReq) (*VpnTagListResp, error)
	// VpnGroup
	VpnGroupAdd(context.Context, *VpnGroupAddReq) (*VpnGroupVo, error)
	VpnGroupUpdate(context.Context, *VpnGroupAddReq) (*common.Empty, error)
	VpnGroupDel(context.Context, *common.Ids) (*common.Empty, error)
	// rpc VpnGroupGet(VpnGroupGetReq) returns (VpnGroupVo);
	VpnGroupList(context.Context, *VpnGroupListReq) (*VpnGroupListResp, error)
	// VpnGroupTag
	VpnGroupTagAdd(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error)
	VpnGroupTagUpdate(context.Context, *VpnGroupTagVo) (*common.Empty, error)
	VpnGroupTagDel(context.Context, *common.Ids) (*common.Empty, error)
	VpnGroupTagGet(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error)
	VpnGroupTagList(context.Context, *VpnGroupTagListReq) (*VpnGroupTagListResp, error)
	// VpnLocation
	VpnLocationAdd(context.Context, *VpnLocationVo) (*VpnLocationVo, error)
	VpnLocationUpdate(context.Context, *VpnLocationVo) (*common.Empty, error)
	VpnLocationDel(context.Context, *common.Ids) (*common.Empty, error)
	VpnLocationGet(context.Context, *VpnLocationGetReq) (*VpnLocationVo, error)
	VpnLocationList(context.Context, *VpnLocationListReq) (*VpnLocationListResp, error)
	// VpnServer
	VpnServerAdd(context.Context, *VpnServerAddReq) (*VpnServerVo, error)
	VpnServerUpdate(context.Context, *VpnServerAddReq) (*common.Empty, error)
	VpnServerDel(context.Context, *common.Ids) (*common.Empty, error)
	VpnServerGet(context.Context, *VpnServerVo) (*VpnServerVo, error)
	VpnServerList(context.Context, *VpnServerListReq) (*VpnServerListResp, error)
	// VpnServerLocation
	VpnServerLocationAdd(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error)
	VpnServerLocationUpdate(context.Context, *VpnServerLocationVo) (*common.Empty, error)
	VpnServerLocationDel(context.Context, *common.Ids) (*common.Empty, error)
	VpnServerLocationGet(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error)
	VpnServerLocationList(context.Context, *VpnServerLocationListReq) (*VpnServerLocationListResp, error)
	// VpnLocationServerCount
	VpnLocationServerCount(context.Context, *VpnLocationServerCountReq) (*VpnLocationServerCountResp, error)
	mustEmbedUnimplementedGoVpnClientServer()
}

// UnimplementedGoVpnClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoVpnClientServer struct{}

func (UnimplementedGoVpnClientServer) Ping(context.Context, *common.Request) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoVpnClientServer) Transaction(context.Context, *common.TransactionReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagAdd(context.Context, *VpnTagVo) (*VpnTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagUpdate(context.Context, *VpnTagVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagGet(context.Context, *VpnTagGetReq) (*VpnTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagList(context.Context, *VpnTagListReq) (*VpnTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupAdd(context.Context, *VpnGroupAddReq) (*VpnGroupVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupUpdate(context.Context, *VpnGroupAddReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupList(context.Context, *VpnGroupListReq) (*VpnGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagAdd(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagUpdate(context.Context, *VpnGroupTagVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagGet(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagList(context.Context, *VpnGroupTagListReq) (*VpnGroupTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationAdd(context.Context, *VpnLocationVo) (*VpnLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationUpdate(context.Context, *VpnLocationVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationGet(context.Context, *VpnLocationGetReq) (*VpnLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationList(context.Context, *VpnLocationListReq) (*VpnLocationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerAdd(context.Context, *VpnServerAddReq) (*VpnServerVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerUpdate(context.Context, *VpnServerAddReq) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerGet(context.Context, *VpnServerVo) (*VpnServerVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerList(context.Context, *VpnServerListReq) (*VpnServerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationAdd(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationUpdate(context.Context, *VpnServerLocationVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationGet(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationList(context.Context, *VpnServerLocationListReq) (*VpnServerLocationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationServerCount(context.Context, *VpnLocationServerCountReq) (*VpnLocationServerCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationServerCount not implemented")
}
func (UnimplementedGoVpnClientServer) mustEmbedUnimplementedGoVpnClientServer() {}
func (UnimplementedGoVpnClientServer) testEmbeddedByValue()                     {}

// UnsafeGoVpnClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoVpnClientServer will
// result in compilation errors.
type UnsafeGoVpnClientServer interface {
	mustEmbedUnimplementedGoVpnClientServer()
}

func RegisterGoVpnClientServer(s grpc.ServiceRegistrar, srv GoVpnClientServer) {
	// If the following call pancis, it indicates UnimplementedGoVpnClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoVpnClient_ServiceDesc, srv)
}

func _GoVpnClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).Ping(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_Transaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).Transaction(ctx, req.(*common.TransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagAdd(ctx, req.(*VpnTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagUpdate(ctx, req.(*VpnTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagGet(ctx, req.(*VpnTagGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagList(ctx, req.(*VpnTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupAdd(ctx, req.(*VpnGroupAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupUpdate(ctx, req.(*VpnGroupAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupList(ctx, req.(*VpnGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagAdd(ctx, req.(*VpnGroupTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagUpdate(ctx, req.(*VpnGroupTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagGet(ctx, req.(*VpnGroupTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagList(ctx, req.(*VpnGroupTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationAdd(ctx, req.(*VpnLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationUpdate(ctx, req.(*VpnLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationGet(ctx, req.(*VpnLocationGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationList(ctx, req.(*VpnLocationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerAdd(ctx, req.(*VpnServerAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerUpdate(ctx, req.(*VpnServerAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerGet(ctx, req.(*VpnServerVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerList(ctx, req.(*VpnServerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationAdd(ctx, req.(*VpnServerLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationUpdate(ctx, req.(*VpnServerLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationGet(ctx, req.(*VpnServerLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationList(ctx, req.(*VpnServerLocationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationServerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationServerCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationServerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationServerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationServerCount(ctx, req.(*VpnLocationServerCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoVpnClient_ServiceDesc is the grpc.ServiceDesc for GoVpnClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoVpnClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vpn.GoVpnClient",
	HandlerType: (*GoVpnClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoVpnClient_Ping_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _GoVpnClient_Transaction_Handler,
		},
		{
			MethodName: "VpnTagAdd",
			Handler:    _GoVpnClient_VpnTagAdd_Handler,
		},
		{
			MethodName: "VpnTagUpdate",
			Handler:    _GoVpnClient_VpnTagUpdate_Handler,
		},
		{
			MethodName: "VpnTagDel",
			Handler:    _GoVpnClient_VpnTagDel_Handler,
		},
		{
			MethodName: "VpnTagGet",
			Handler:    _GoVpnClient_VpnTagGet_Handler,
		},
		{
			MethodName: "VpnTagList",
			Handler:    _GoVpnClient_VpnTagList_Handler,
		},
		{
			MethodName: "VpnGroupAdd",
			Handler:    _GoVpnClient_VpnGroupAdd_Handler,
		},
		{
			MethodName: "VpnGroupUpdate",
			Handler:    _GoVpnClient_VpnGroupUpdate_Handler,
		},
		{
			MethodName: "VpnGroupDel",
			Handler:    _GoVpnClient_VpnGroupDel_Handler,
		},
		{
			MethodName: "VpnGroupList",
			Handler:    _GoVpnClient_VpnGroupList_Handler,
		},
		{
			MethodName: "VpnGroupTagAdd",
			Handler:    _GoVpnClient_VpnGroupTagAdd_Handler,
		},
		{
			MethodName: "VpnGroupTagUpdate",
			Handler:    _GoVpnClient_VpnGroupTagUpdate_Handler,
		},
		{
			MethodName: "VpnGroupTagDel",
			Handler:    _GoVpnClient_VpnGroupTagDel_Handler,
		},
		{
			MethodName: "VpnGroupTagGet",
			Handler:    _GoVpnClient_VpnGroupTagGet_Handler,
		},
		{
			MethodName: "VpnGroupTagList",
			Handler:    _GoVpnClient_VpnGroupTagList_Handler,
		},
		{
			MethodName: "VpnLocationAdd",
			Handler:    _GoVpnClient_VpnLocationAdd_Handler,
		},
		{
			MethodName: "VpnLocationUpdate",
			Handler:    _GoVpnClient_VpnLocationUpdate_Handler,
		},
		{
			MethodName: "VpnLocationDel",
			Handler:    _GoVpnClient_VpnLocationDel_Handler,
		},
		{
			MethodName: "VpnLocationGet",
			Handler:    _GoVpnClient_VpnLocationGet_Handler,
		},
		{
			MethodName: "VpnLocationList",
			Handler:    _GoVpnClient_VpnLocationList_Handler,
		},
		{
			MethodName: "VpnServerAdd",
			Handler:    _GoVpnClient_VpnServerAdd_Handler,
		},
		{
			MethodName: "VpnServerUpdate",
			Handler:    _GoVpnClient_VpnServerUpdate_Handler,
		},
		{
			MethodName: "VpnServerDel",
			Handler:    _GoVpnClient_VpnServerDel_Handler,
		},
		{
			MethodName: "VpnServerGet",
			Handler:    _GoVpnClient_VpnServerGet_Handler,
		},
		{
			MethodName: "VpnServerList",
			Handler:    _GoVpnClient_VpnServerList_Handler,
		},
		{
			MethodName: "VpnServerLocationAdd",
			Handler:    _GoVpnClient_VpnServerLocationAdd_Handler,
		},
		{
			MethodName: "VpnServerLocationUpdate",
			Handler:    _GoVpnClient_VpnServerLocationUpdate_Handler,
		},
		{
			MethodName: "VpnServerLocationDel",
			Handler:    _GoVpnClient_VpnServerLocationDel_Handler,
		},
		{
			MethodName: "VpnServerLocationGet",
			Handler:    _GoVpnClient_VpnServerLocationGet_Handler,
		},
		{
			MethodName: "VpnServerLocationList",
			Handler:    _GoVpnClient_VpnServerLocationList_Handler,
		},
		{
			MethodName: "VpnLocationServerCount",
			Handler:    _GoVpnClient_VpnLocationServerCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpn.proto",
}
