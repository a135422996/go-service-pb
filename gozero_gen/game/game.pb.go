// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.4
// source: game.proto

package game

import (
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pkg           string                 `protobuf:"bytes,3,opt,name=pkg,proto3" json:"pkg,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Status        int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameVo) Reset() {
	*x = GameVo{}
	mi := &file_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameVo) ProtoMessage() {}

func (x *GameVo) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameVo.ProtoReflect.Descriptor instead.
func (*GameVo) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{0}
}

func (x *GameVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameVo) GetPkg() string {
	if x != nil {
		return x.Pkg
	}
	return ""
}

func (x *GameVo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GameVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GameVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GameVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type GameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *GameVo                `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameReq) Reset() {
	*x = GameReq{}
	mi := &file_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReq) ProtoMessage() {}

func (x *GameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReq.ProtoReflect.Descriptor instead.
func (*GameReq) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{1}
}

func (x *GameReq) GetVo() *GameVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type GameListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Pkgs          []string               `protobuf:"bytes,2,rep,name=pkgs,proto3" json:"pkgs,omitempty"`
	Vo            *GameVo                `protobuf:"bytes,3,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameListReq) Reset() {
	*x = GameListReq{}
	mi := &file_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListReq) ProtoMessage() {}

func (x *GameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListReq.ProtoReflect.Descriptor instead.
func (*GameListReq) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{2}
}

func (x *GameListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GameListReq) GetPkgs() []string {
	if x != nil {
		return x.Pkgs
	}
	return nil
}

func (x *GameListReq) GetVo() *GameVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type GameListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*GameVo              `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameListRes) Reset() {
	*x = GameListRes{}
	mi := &file_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListRes) ProtoMessage() {}

func (x *GameListRes) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListRes.ProtoReflect.Descriptor instead.
func (*GameListRes) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{3}
}

func (x *GameListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GameListRes) GetList() []*GameVo {
	if x != nil {
		return x.List
	}
	return nil
}

type RelGameRankVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GameId        int64                  `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RankId        int64                  `protobuf:"varint,3,opt,name=rankId,proto3" json:"rankId,omitempty"`
	Weight        int64                  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	CreateTime    int64                  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankVo) Reset() {
	*x = RelGameRankVo{}
	mi := &file_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankVo) ProtoMessage() {}

func (x *RelGameRankVo) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankVo.ProtoReflect.Descriptor instead.
func (*RelGameRankVo) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{4}
}

func (x *RelGameRankVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelGameRankVo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RelGameRankVo) GetRankId() int64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *RelGameRankVo) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RelGameRankVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RelGameRankVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type RelGameRankReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *RelGameRankVo         `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankReq) Reset() {
	*x = RelGameRankReq{}
	mi := &file_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankReq) ProtoMessage() {}

func (x *RelGameRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankReq.ProtoReflect.Descriptor instead.
func (*RelGameRankReq) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{5}
}

func (x *RelGameRankReq) GetVo() *RelGameRankVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameRankListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *RelGameRankVo         `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankListReq) Reset() {
	*x = RelGameRankListReq{}
	mi := &file_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankListReq) ProtoMessage() {}

func (x *RelGameRankListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankListReq.ProtoReflect.Descriptor instead.
func (*RelGameRankListReq) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{6}
}

func (x *RelGameRankListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *RelGameRankListReq) GetVo() *RelGameRankVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameRankListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*RelGameRankVo       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankListRes) Reset() {
	*x = RelGameRankListRes{}
	mi := &file_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankListRes) ProtoMessage() {}

func (x *RelGameRankListRes) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankListRes.ProtoReflect.Descriptor instead.
func (*RelGameRankListRes) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{7}
}

func (x *RelGameRankListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RelGameRankListRes) GetList() []*RelGameRankVo {
	if x != nil {
		return x.List
	}
	return nil
}

type RelGameVpnGroupVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GameId        int64                  `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	ProductCode   string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	VpnGroupId    int64                  `protobuf:"varint,4,opt,name=vpnGroupId,proto3" json:"vpnGroupId,omitempty"`
	Status        int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupVo) Reset() {
	*x = RelGameVpnGroupVo{}
	mi := &file_game_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupVo) ProtoMessage() {}

func (x *RelGameVpnGroupVo) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupVo.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupVo) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{8}
}

func (x *RelGameVpnGroupVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RelGameVpnGroupVo) GetVpnGroupId() int64 {
	if x != nil {
		return x.VpnGroupId
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type RelGameVpnGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *RelGameVpnGroupVo     `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupReq) Reset() {
	*x = RelGameVpnGroupReq{}
	mi := &file_game_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupReq) ProtoMessage() {}

func (x *RelGameVpnGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupReq.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupReq) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{9}
}

func (x *RelGameVpnGroupReq) GetVo() *RelGameVpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameVpnGroupListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *common.Page           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	GameIds       []int64                `protobuf:"varint,2,rep,packed,name=gameIds,proto3" json:"gameIds,omitempty"`
	Vo            *RelGameVpnGroupVo     `protobuf:"bytes,3,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupListReq) Reset() {
	*x = RelGameVpnGroupListReq{}
	mi := &file_game_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupListReq) ProtoMessage() {}

func (x *RelGameVpnGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupListReq.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupListReq) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{10}
}

func (x *RelGameVpnGroupListReq) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *RelGameVpnGroupListReq) GetGameIds() []int64 {
	if x != nil {
		return x.GameIds
	}
	return nil
}

func (x *RelGameVpnGroupListReq) GetVo() *RelGameVpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameVpnGroupListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*RelGameVpnGroupVo   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupListRes) Reset() {
	*x = RelGameVpnGroupListRes{}
	mi := &file_game_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupListRes) ProtoMessage() {}

func (x *RelGameVpnGroupListRes) ProtoReflect() protoreflect.Message {
	mi := &file_game_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupListRes.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupListRes) Descriptor() ([]byte, []int) {
	return file_game_proto_rawDescGZIP(), []int{11}
}

func (x *RelGameVpnGroupListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RelGameVpnGroupListRes) GetList() []*RelGameVpnGroupVo {
	if x != nil {
		return x.List
	}
	return nil
}

var File_game_proto protoreflect.FileDescriptor

var file_game_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xaa, 0x01, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6b, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6b,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x27, 0x0a,
	0x07, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x61, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6b, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6b, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x45, 0x0a, 0x0b, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0e, 0x52, 0x65,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x02,
	0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x53,
	0x0a, 0x12, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x27, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x7d, 0x0a, 0x16, 0x52, 0x65,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5b, 0x0a, 0x16, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x32, 0x8e, 0x07, 0x0a, 0x0c, 0x47, 0x6f, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x41,
	0x64, 0x64, 0x12, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f,
	0x1a, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x12, 0x29,
	0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64,
	0x73, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x12, 0x30, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x47, 0x61,
	0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f,
	0x1a, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x12, 0x37, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x6c,
	0x12, 0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0e,
	0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x12, 0x14,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x1a,
	0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x12, 0x3f, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x12, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x12,
	0x0b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65,
	0x74, 0x12, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x6f, 0x12, 0x51, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x31, 0x33, 0x35, 0x34, 0x32, 0x32, 0x39, 0x39, 0x36,
	0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x62, 0x2f, 0x67,
	0x6f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_game_proto_rawDescOnce sync.Once
	file_game_proto_rawDescData []byte
)

func file_game_proto_rawDescGZIP() []byte {
	file_game_proto_rawDescOnce.Do(func() {
		file_game_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_game_proto_rawDesc), len(file_game_proto_rawDesc)))
	})
	return file_game_proto_rawDescData
}

var file_game_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_game_proto_goTypes = []any{
	(*GameVo)(nil),                 // 0: game.GameVo
	(*GameReq)(nil),                // 1: game.GameReq
	(*GameListReq)(nil),            // 2: game.GameListReq
	(*GameListRes)(nil),            // 3: game.GameListRes
	(*RelGameRankVo)(nil),          // 4: game.RelGameRankVo
	(*RelGameRankReq)(nil),         // 5: game.RelGameRankReq
	(*RelGameRankListReq)(nil),     // 6: game.RelGameRankListReq
	(*RelGameRankListRes)(nil),     // 7: game.RelGameRankListRes
	(*RelGameVpnGroupVo)(nil),      // 8: game.RelGameVpnGroupVo
	(*RelGameVpnGroupReq)(nil),     // 9: game.RelGameVpnGroupReq
	(*RelGameVpnGroupListReq)(nil), // 10: game.RelGameVpnGroupListReq
	(*RelGameVpnGroupListRes)(nil), // 11: game.RelGameVpnGroupListRes
	(*common.Page)(nil),            // 12: common.Page
	(*common.Ids)(nil),             // 13: common.Ids
	(*common.Request)(nil),         // 14: common.Request
	(*common.Empty)(nil),           // 15: common.Empty
}
var file_game_proto_depIdxs = []int32{
	0,  // 0: game.GameReq.vo:type_name -> game.GameVo
	12, // 1: game.GameListReq.page:type_name -> common.Page
	0,  // 2: game.GameListReq.vo:type_name -> game.GameVo
	0,  // 3: game.GameListRes.list:type_name -> game.GameVo
	4,  // 4: game.RelGameRankReq.vo:type_name -> game.RelGameRankVo
	12, // 5: game.RelGameRankListReq.page:type_name -> common.Page
	4,  // 6: game.RelGameRankListReq.vo:type_name -> game.RelGameRankVo
	4,  // 7: game.RelGameRankListRes.list:type_name -> game.RelGameRankVo
	8,  // 8: game.RelGameVpnGroupReq.vo:type_name -> game.RelGameVpnGroupVo
	12, // 9: game.RelGameVpnGroupListReq.page:type_name -> common.Page
	8,  // 10: game.RelGameVpnGroupListReq.vo:type_name -> game.RelGameVpnGroupVo
	8,  // 11: game.RelGameVpnGroupListRes.list:type_name -> game.RelGameVpnGroupVo
	0,  // 12: game.GoGameClient.GameAdd:input_type -> game.GameVo
	0,  // 13: game.GoGameClient.GameUpdate:input_type -> game.GameVo
	13, // 14: game.GoGameClient.GameDel:input_type -> common.Ids
	1,  // 15: game.GoGameClient.GameGet:input_type -> game.GameReq
	2,  // 16: game.GoGameClient.GameList:input_type -> game.GameListReq
	14, // 17: game.GoGameClient.GameAll:input_type -> common.Request
	4,  // 18: game.GoGameClient.RelGameRankAdd:input_type -> game.RelGameRankVo
	4,  // 19: game.GoGameClient.RelGameRankUpdate:input_type -> game.RelGameRankVo
	13, // 20: game.GoGameClient.RelGameRankDel:input_type -> common.Ids
	5,  // 21: game.GoGameClient.RelGameRankGet:input_type -> game.RelGameRankReq
	6,  // 22: game.GoGameClient.RelGameRankList:input_type -> game.RelGameRankListReq
	8,  // 23: game.GoGameClient.RelGameVpnGroupAdd:input_type -> game.RelGameVpnGroupVo
	8,  // 24: game.GoGameClient.RelGameVpnGroupUpdate:input_type -> game.RelGameVpnGroupVo
	13, // 25: game.GoGameClient.RelGameVpnGroupDel:input_type -> common.Ids
	9,  // 26: game.GoGameClient.RelGameVpnGroupGet:input_type -> game.RelGameVpnGroupReq
	10, // 27: game.GoGameClient.RelGameVpnGroupList:input_type -> game.RelGameVpnGroupListReq
	0,  // 28: game.GoGameClient.GameAdd:output_type -> game.GameVo
	15, // 29: game.GoGameClient.GameUpdate:output_type -> common.Empty
	15, // 30: game.GoGameClient.GameDel:output_type -> common.Empty
	0,  // 31: game.GoGameClient.GameGet:output_type -> game.GameVo
	3,  // 32: game.GoGameClient.GameList:output_type -> game.GameListRes
	3,  // 33: game.GoGameClient.GameAll:output_type -> game.GameListRes
	4,  // 34: game.GoGameClient.RelGameRankAdd:output_type -> game.RelGameRankVo
	15, // 35: game.GoGameClient.RelGameRankUpdate:output_type -> common.Empty
	15, // 36: game.GoGameClient.RelGameRankDel:output_type -> common.Empty
	4,  // 37: game.GoGameClient.RelGameRankGet:output_type -> game.RelGameRankVo
	7,  // 38: game.GoGameClient.RelGameRankList:output_type -> game.RelGameRankListRes
	8,  // 39: game.GoGameClient.RelGameVpnGroupAdd:output_type -> game.RelGameVpnGroupVo
	15, // 40: game.GoGameClient.RelGameVpnGroupUpdate:output_type -> common.Empty
	15, // 41: game.GoGameClient.RelGameVpnGroupDel:output_type -> common.Empty
	8,  // 42: game.GoGameClient.RelGameVpnGroupGet:output_type -> game.RelGameVpnGroupVo
	11, // 43: game.GoGameClient.RelGameVpnGroupList:output_type -> game.RelGameVpnGroupListRes
	28, // [28:44] is the sub-list for method output_type
	12, // [12:28] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_game_proto_init() }
func file_game_proto_init() {
	if File_game_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_game_proto_rawDesc), len(file_game_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_game_proto_goTypes,
		DependencyIndexes: file_game_proto_depIdxs,
		MessageInfos:      file_game_proto_msgTypes,
	}.Build()
	File_game_proto = out.File
	file_game_proto_goTypes = nil
	file_game_proto_depIdxs = nil
}
