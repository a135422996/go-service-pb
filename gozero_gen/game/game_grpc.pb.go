// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: game.proto

package game

import (
	context "context"
	common "github.com/a135422996/go-service-pb/gozero_gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoGameClient_GameAdd_FullMethodName               = "/game.GoGameClient/GameAdd"
	GoGameClient_GameUpdate_FullMethodName            = "/game.GoGameClient/GameUpdate"
	GoGameClient_GameDel_FullMethodName               = "/game.GoGameClient/GameDel"
	GoGameClient_GameGet_FullMethodName               = "/game.GoGameClient/GameGet"
	GoGameClient_GameList_FullMethodName              = "/game.GoGameClient/GameList"
	GoGameClient_GameAll_FullMethodName               = "/game.GoGameClient/GameAll"
	GoGameClient_RelGameRankAdd_FullMethodName        = "/game.GoGameClient/RelGameRankAdd"
	GoGameClient_RelGameRankUpdate_FullMethodName     = "/game.GoGameClient/RelGameRankUpdate"
	GoGameClient_RelGameRankDel_FullMethodName        = "/game.GoGameClient/RelGameRankDel"
	GoGameClient_RelGameRankGet_FullMethodName        = "/game.GoGameClient/RelGameRankGet"
	GoGameClient_RelGameRankList_FullMethodName       = "/game.GoGameClient/RelGameRankList"
	GoGameClient_RelGameVpnGroupAdd_FullMethodName    = "/game.GoGameClient/RelGameVpnGroupAdd"
	GoGameClient_RelGameVpnGroupUpdate_FullMethodName = "/game.GoGameClient/RelGameVpnGroupUpdate"
	GoGameClient_RelGameVpnGroupDel_FullMethodName    = "/game.GoGameClient/RelGameVpnGroupDel"
	GoGameClient_RelGameVpnGroupGet_FullMethodName    = "/game.GoGameClient/RelGameVpnGroupGet"
	GoGameClient_RelGameVpnGroupList_FullMethodName   = "/game.GoGameClient/RelGameVpnGroupList"
)

// GoGameClientClient is the client API for GoGameClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoGameClientClient interface {
	// 加速器游戏管理
	GameAdd(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*GameVo, error)
	GameUpdate(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*common.Empty, error)
	GameDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	GameGet(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameVo, error)
	GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRes, error)
	GameAll(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*GameListRes, error)
	// 游戏榜单关联关系
	RelGameRankAdd(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*RelGameRankVo, error)
	RelGameRankUpdate(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*common.Empty, error)
	RelGameRankDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	RelGameRankGet(ctx context.Context, in *RelGameRankReq, opts ...grpc.CallOption) (*RelGameRankVo, error)
	RelGameRankList(ctx context.Context, in *RelGameRankListReq, opts ...grpc.CallOption) (*RelGameRankListRes, error)
	// 游戏地域关联关系
	RelGameVpnGroupAdd(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupUpdate(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*common.Empty, error)
	RelGameVpnGroupDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error)
	RelGameVpnGroupGet(ctx context.Context, in *RelGameVpnGroupReq, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupList(ctx context.Context, in *RelGameVpnGroupListReq, opts ...grpc.CallOption) (*RelGameVpnGroupListRes, error)
}

type goGameClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoGameClientClient(cc grpc.ClientConnInterface) GoGameClientClient {
	return &goGameClientClient{cc}
}

func (c *goGameClientClient) GameAdd(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*GameVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameVo)
	err := c.cc.Invoke(ctx, GoGameClient_GameAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameUpdate(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoGameClient_GameUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoGameClient_GameDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameGet(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameVo)
	err := c.cc.Invoke(ctx, GoGameClient_GameGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameListRes)
	err := c.cc.Invoke(ctx, GoGameClient_GameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameAll(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*GameListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameListRes)
	err := c.cc.Invoke(ctx, GoGameClient_GameAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankAdd(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*RelGameRankVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameRankVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankUpdate(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankGet(ctx context.Context, in *RelGameRankReq, opts ...grpc.CallOption) (*RelGameRankVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameRankVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankList(ctx context.Context, in *RelGameRankListReq, opts ...grpc.CallOption) (*RelGameRankListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameRankListRes)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupAdd(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameVpnGroupVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupUpdate(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupDel(ctx context.Context, in *common.Ids, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupGet(ctx context.Context, in *RelGameVpnGroupReq, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameVpnGroupVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupList(ctx context.Context, in *RelGameVpnGroupListReq, opts ...grpc.CallOption) (*RelGameVpnGroupListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameVpnGroupListRes)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoGameClientServer is the server API for GoGameClient service.
// All implementations must embed UnimplementedGoGameClientServer
// for forward compatibility.
type GoGameClientServer interface {
	// 加速器游戏管理
	GameAdd(context.Context, *GameVo) (*GameVo, error)
	GameUpdate(context.Context, *GameVo) (*common.Empty, error)
	GameDel(context.Context, *common.Ids) (*common.Empty, error)
	GameGet(context.Context, *GameReq) (*GameVo, error)
	GameList(context.Context, *GameListReq) (*GameListRes, error)
	GameAll(context.Context, *common.Request) (*GameListRes, error)
	// 游戏榜单关联关系
	RelGameRankAdd(context.Context, *RelGameRankVo) (*RelGameRankVo, error)
	RelGameRankUpdate(context.Context, *RelGameRankVo) (*common.Empty, error)
	RelGameRankDel(context.Context, *common.Ids) (*common.Empty, error)
	RelGameRankGet(context.Context, *RelGameRankReq) (*RelGameRankVo, error)
	RelGameRankList(context.Context, *RelGameRankListReq) (*RelGameRankListRes, error)
	// 游戏地域关联关系
	RelGameVpnGroupAdd(context.Context, *RelGameVpnGroupVo) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupUpdate(context.Context, *RelGameVpnGroupVo) (*common.Empty, error)
	RelGameVpnGroupDel(context.Context, *common.Ids) (*common.Empty, error)
	RelGameVpnGroupGet(context.Context, *RelGameVpnGroupReq) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupList(context.Context, *RelGameVpnGroupListReq) (*RelGameVpnGroupListRes, error)
	mustEmbedUnimplementedGoGameClientServer()
}

// UnimplementedGoGameClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoGameClientServer struct{}

func (UnimplementedGoGameClientServer) GameAdd(context.Context, *GameVo) (*GameVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameAdd not implemented")
}
func (UnimplementedGoGameClientServer) GameUpdate(context.Context, *GameVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameUpdate not implemented")
}
func (UnimplementedGoGameClientServer) GameDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameDel not implemented")
}
func (UnimplementedGoGameClientServer) GameGet(context.Context, *GameReq) (*GameVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameGet not implemented")
}
func (UnimplementedGoGameClientServer) GameList(context.Context, *GameListReq) (*GameListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameList not implemented")
}
func (UnimplementedGoGameClientServer) GameAll(context.Context, *common.Request) (*GameListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameAll not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankAdd(context.Context, *RelGameRankVo) (*RelGameRankVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankAdd not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankUpdate(context.Context, *RelGameRankVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankUpdate not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankDel not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankGet(context.Context, *RelGameRankReq) (*RelGameRankVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankGet not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankList(context.Context, *RelGameRankListReq) (*RelGameRankListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankList not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupAdd(context.Context, *RelGameVpnGroupVo) (*RelGameVpnGroupVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupAdd not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupUpdate(context.Context, *RelGameVpnGroupVo) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupUpdate not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupDel(context.Context, *common.Ids) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupDel not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupGet(context.Context, *RelGameVpnGroupReq) (*RelGameVpnGroupVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupGet not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupList(context.Context, *RelGameVpnGroupListReq) (*RelGameVpnGroupListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupList not implemented")
}
func (UnimplementedGoGameClientServer) mustEmbedUnimplementedGoGameClientServer() {}
func (UnimplementedGoGameClientServer) testEmbeddedByValue()                      {}

// UnsafeGoGameClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoGameClientServer will
// result in compilation errors.
type UnsafeGoGameClientServer interface {
	mustEmbedUnimplementedGoGameClientServer()
}

func RegisterGoGameClientServer(s grpc.ServiceRegistrar, srv GoGameClientServer) {
	// If the following call pancis, it indicates UnimplementedGoGameClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoGameClient_ServiceDesc, srv)
}

func _GoGameClient_GameAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameAdd(ctx, req.(*GameVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameUpdate(ctx, req.(*GameVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameGet(ctx, req.(*GameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameList(ctx, req.(*GameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameAll(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankAdd(ctx, req.(*RelGameRankVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankUpdate(ctx, req.(*RelGameRankVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankGet(ctx, req.(*RelGameRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankList(ctx, req.(*RelGameRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupAdd(ctx, req.(*RelGameVpnGroupVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupUpdate(ctx, req.(*RelGameVpnGroupVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupDel(ctx, req.(*common.Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupGet(ctx, req.(*RelGameVpnGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupList(ctx, req.(*RelGameVpnGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoGameClient_ServiceDesc is the grpc.ServiceDesc for GoGameClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoGameClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GoGameClient",
	HandlerType: (*GoGameClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameAdd",
			Handler:    _GoGameClient_GameAdd_Handler,
		},
		{
			MethodName: "GameUpdate",
			Handler:    _GoGameClient_GameUpdate_Handler,
		},
		{
			MethodName: "GameDel",
			Handler:    _GoGameClient_GameDel_Handler,
		},
		{
			MethodName: "GameGet",
			Handler:    _GoGameClient_GameGet_Handler,
		},
		{
			MethodName: "GameList",
			Handler:    _GoGameClient_GameList_Handler,
		},
		{
			MethodName: "GameAll",
			Handler:    _GoGameClient_GameAll_Handler,
		},
		{
			MethodName: "RelGameRankAdd",
			Handler:    _GoGameClient_RelGameRankAdd_Handler,
		},
		{
			MethodName: "RelGameRankUpdate",
			Handler:    _GoGameClient_RelGameRankUpdate_Handler,
		},
		{
			MethodName: "RelGameRankDel",
			Handler:    _GoGameClient_RelGameRankDel_Handler,
		},
		{
			MethodName: "RelGameRankGet",
			Handler:    _GoGameClient_RelGameRankGet_Handler,
		},
		{
			MethodName: "RelGameRankList",
			Handler:    _GoGameClient_RelGameRankList_Handler,
		},
		{
			MethodName: "RelGameVpnGroupAdd",
			Handler:    _GoGameClient_RelGameVpnGroupAdd_Handler,
		},
		{
			MethodName: "RelGameVpnGroupUpdate",
			Handler:    _GoGameClient_RelGameVpnGroupUpdate_Handler,
		},
		{
			MethodName: "RelGameVpnGroupDel",
			Handler:    _GoGameClient_RelGameVpnGroupDel_Handler,
		},
		{
			MethodName: "RelGameVpnGroupGet",
			Handler:    _GoGameClient_RelGameVpnGroupGet_Handler,
		},
		{
			MethodName: "RelGameVpnGroupList",
			Handler:    _GoGameClient_RelGameVpnGroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
