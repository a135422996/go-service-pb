// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.4
// source: gorpc.proto

package gorpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 根据需要增加状态
type CommonResultCode int32

const (
	CommonResultCode_Success CommonResultCode = 0
)

// Enum value maps for CommonResultCode.
var (
	CommonResultCode_name = map[int32]string{
		0: "Success",
	}
	CommonResultCode_value = map[string]int32{
		"Success": 0,
	}
)

func (x CommonResultCode) Enum() *CommonResultCode {
	p := new(CommonResultCode)
	*p = x
	return p
}

func (x CommonResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_gorpc_proto_enumTypes[0].Descriptor()
}

func (CommonResultCode) Type() protoreflect.EnumType {
	return &file_gorpc_proto_enumTypes[0]
}

func (x CommonResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonResultCode.Descriptor instead.
func (CommonResultCode) EnumDescriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{0}
}

type Status int32

const (
	Status_UnknownStatus Status = 0
	Status_StatusValid   Status = 1
	Status_StatusInValid Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UnknownStatus",
		1: "StatusValid",
		2: "StatusInValid",
	}
	Status_value = map[string]int32{
		"UnknownStatus": 0,
		"StatusValid":   1,
		"StatusInValid": 2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_gorpc_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_gorpc_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{1}
}

type BoolInt int32

const (
	BoolInt_BoolIntUnknown BoolInt = 0
	BoolInt_BoolIntTrue    BoolInt = 1
	BoolInt_BoolIntFalse   BoolInt = 2
)

// Enum value maps for BoolInt.
var (
	BoolInt_name = map[int32]string{
		0: "BoolIntUnknown",
		1: "BoolIntTrue",
		2: "BoolIntFalse",
	}
	BoolInt_value = map[string]int32{
		"BoolIntUnknown": 0,
		"BoolIntTrue":    1,
		"BoolIntFalse":   2,
	}
)

func (x BoolInt) Enum() *BoolInt {
	p := new(BoolInt)
	*p = x
	return p
}

func (x BoolInt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoolInt) Descriptor() protoreflect.EnumDescriptor {
	return file_gorpc_proto_enumTypes[2].Descriptor()
}

func (BoolInt) Type() protoreflect.EnumType {
	return &file_gorpc_proto_enumTypes[2]
}

func (x BoolInt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoolInt.Descriptor instead.
func (BoolInt) EnumDescriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{2}
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_gorpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{0}
}

type Int64SelectController struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int64                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Exclude       bool                   `protobuf:"varint,2,opt,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64SelectController) Reset() {
	*x = Int64SelectController{}
	mi := &file_gorpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64SelectController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64SelectController) ProtoMessage() {}

func (x *Int64SelectController) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64SelectController.ProtoReflect.Descriptor instead.
func (*Int64SelectController) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{1}
}

func (x *Int64SelectController) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Int64SelectController) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type IntSelectController struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Exclude       bool                   `protobuf:"varint,2,opt,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntSelectController) Reset() {
	*x = IntSelectController{}
	mi := &file_gorpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntSelectController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntSelectController) ProtoMessage() {}

func (x *IntSelectController) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntSelectController.ProtoReflect.Descriptor instead.
func (*IntSelectController) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{2}
}

func (x *IntSelectController) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *IntSelectController) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type StringSelectController struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Exclude       bool                   `protobuf:"varint,2,opt,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringSelectController) Reset() {
	*x = StringSelectController{}
	mi := &file_gorpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringSelectController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSelectController) ProtoMessage() {}

func (x *StringSelectController) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSelectController.ProtoReflect.Descriptor instead.
func (*StringSelectController) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{3}
}

func (x *StringSelectController) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StringSelectController) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type Page struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        int64                  `protobuf:"varint,1,opt,name=pageNo,proto3" json:"pageNo,omitempty"`
	PageSize      int64                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	StartTime     int64                  `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	SortBy        []*Page_OrderItem      `protobuf:"bytes,5,rep,name=sortBy,proto3" json:"sortBy,omitempty"`
	IgnoreTotal   bool                   `protobuf:"varint,6,opt,name=ignoreTotal,proto3" json:"ignoreTotal,omitempty"` // 忽略总条数
	IgnoreStat    bool                   `protobuf:"varint,7,opt,name=ignoreStat,proto3" json:"ignoreStat,omitempty"`   // 忽略总条数
	IgnoreList    bool                   `protobuf:"varint,8,opt,name=ignoreList,proto3" json:"ignoreList,omitempty"`   // 忽略列表
	Ids           []int64                `protobuf:"varint,9,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	GroupBy       []string               `protobuf:"bytes,10,rep,name=groupBy,proto3" json:"groupBy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Page) Reset() {
	*x = Page{}
	mi := &file_gorpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{4}
}

func (x *Page) GetPageNo() int64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *Page) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *Page) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Page) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Page) GetSortBy() []*Page_OrderItem {
	if x != nil {
		return x.SortBy
	}
	return nil
}

func (x *Page) GetIgnoreTotal() bool {
	if x != nil {
		return x.IgnoreTotal
	}
	return false
}

func (x *Page) GetIgnoreStat() bool {
	if x != nil {
		return x.IgnoreStat
	}
	return false
}

func (x *Page) GetIgnoreList() bool {
	if x != nil {
		return x.IgnoreList
	}
	return false
}

func (x *Page) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Page) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

type CommonResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          CommonResultCode       `protobuf:"varint,1,opt,name=code,proto3,enum=gorpc.CommonResultCode" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonResult) Reset() {
	*x = CommonResult{}
	mi := &file_gorpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResult) ProtoMessage() {}

func (x *CommonResult) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResult.ProtoReflect.Descriptor instead.
func (*CommonResult) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{5}
}

func (x *CommonResult) GetCode() CommonResultCode {
	if x != nil {
		return x.Code
	}
	return CommonResultCode_Success
}

func (x *CommonResult) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TimeZoneOffset int64                  `protobuf:"varint,1,opt,name=timeZoneOffset,proto3" json:"timeZoneOffset,omitempty"`
	Lan            string                 `protobuf:"bytes,2,opt,name=lan,proto3" json:"lan,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BaseReq) Reset() {
	*x = BaseReq{}
	mi := &file_gorpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseReq) ProtoMessage() {}

func (x *BaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseReq.ProtoReflect.Descriptor instead.
func (*BaseReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{6}
}

func (x *BaseReq) GetTimeZoneOffset() int64 {
	if x != nil {
		return x.TimeZoneOffset
	}
	return 0
}

func (x *BaseReq) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

type DeleteIdResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FailedIds     []int64                `protobuf:"varint,1,rep,packed,name=failedIds,proto3" json:"failedIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteIdResp) Reset() {
	*x = DeleteIdResp{}
	mi := &file_gorpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdResp) ProtoMessage() {}

func (x *DeleteIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdResp.ProtoReflect.Descriptor instead.
func (*DeleteIdResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteIdResp) GetFailedIds() []int64 {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

type Ids struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ids) Reset() {
	*x = Ids{}
	mi := &file_gorpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{8}
}

func (x *Ids) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_gorpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{9}
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_gorpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{10}
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type TransactionOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         string                 `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`     // 表名
	Operate       string                 `protobuf:"bytes,2,opt,name=operate,proto3" json:"operate,omitempty"` // delete,insert,update
	Data          string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // json格式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionOperation) Reset() {
	*x = TransactionOperation{}
	mi := &file_gorpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionOperation) ProtoMessage() {}

func (x *TransactionOperation) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionOperation.ProtoReflect.Descriptor instead.
func (*TransactionOperation) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{11}
}

func (x *TransactionOperation) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *TransactionOperation) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *TransactionOperation) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type TransactionReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Transactions  []*TransactionOperation `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionReq) Reset() {
	*x = TransactionReq{}
	mi := &file_gorpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReq) ProtoMessage() {}

func (x *TransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReq.ProtoReflect.Descriptor instead.
func (*TransactionReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionReq) GetTransactions() []*TransactionOperation {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GameVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pkg           string                 `protobuf:"bytes,3,opt,name=pkg,proto3" json:"pkg,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Status        int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameVo) Reset() {
	*x = GameVo{}
	mi := &file_gorpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameVo) ProtoMessage() {}

func (x *GameVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameVo.ProtoReflect.Descriptor instead.
func (*GameVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{13}
}

func (x *GameVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameVo) GetPkg() string {
	if x != nil {
		return x.Pkg
	}
	return ""
}

func (x *GameVo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GameVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GameVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GameVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type GameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *GameVo                `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameReq) Reset() {
	*x = GameReq{}
	mi := &file_gorpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReq) ProtoMessage() {}

func (x *GameReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReq.ProtoReflect.Descriptor instead.
func (*GameReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{14}
}

func (x *GameReq) GetVo() *GameVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type GameListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Pkgs          []string               `protobuf:"bytes,2,rep,name=pkgs,proto3" json:"pkgs,omitempty"`
	Vo            *GameVo                `protobuf:"bytes,3,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameListReq) Reset() {
	*x = GameListReq{}
	mi := &file_gorpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListReq) ProtoMessage() {}

func (x *GameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListReq.ProtoReflect.Descriptor instead.
func (*GameListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{15}
}

func (x *GameListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GameListReq) GetPkgs() []string {
	if x != nil {
		return x.Pkgs
	}
	return nil
}

func (x *GameListReq) GetVo() *GameVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type GameListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*GameVo              `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameListRes) Reset() {
	*x = GameListRes{}
	mi := &file_gorpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListRes) ProtoMessage() {}

func (x *GameListRes) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListRes.ProtoReflect.Descriptor instead.
func (*GameListRes) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{16}
}

func (x *GameListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GameListRes) GetList() []*GameVo {
	if x != nil {
		return x.List
	}
	return nil
}

type RelGameRankVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GameId        int64                  `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RankId        int64                  `protobuf:"varint,3,opt,name=rankId,proto3" json:"rankId,omitempty"`
	Weight        int64                  `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	CreateTime    int64                  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankVo) Reset() {
	*x = RelGameRankVo{}
	mi := &file_gorpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankVo) ProtoMessage() {}

func (x *RelGameRankVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankVo.ProtoReflect.Descriptor instead.
func (*RelGameRankVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{17}
}

func (x *RelGameRankVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelGameRankVo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RelGameRankVo) GetRankId() int64 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *RelGameRankVo) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RelGameRankVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RelGameRankVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type RelGameRankReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *RelGameRankVo         `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankReq) Reset() {
	*x = RelGameRankReq{}
	mi := &file_gorpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankReq) ProtoMessage() {}

func (x *RelGameRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankReq.ProtoReflect.Descriptor instead.
func (*RelGameRankReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{18}
}

func (x *RelGameRankReq) GetVo() *RelGameRankVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameRankListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *RelGameRankVo         `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankListReq) Reset() {
	*x = RelGameRankListReq{}
	mi := &file_gorpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankListReq) ProtoMessage() {}

func (x *RelGameRankListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankListReq.ProtoReflect.Descriptor instead.
func (*RelGameRankListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{19}
}

func (x *RelGameRankListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *RelGameRankListReq) GetVo() *RelGameRankVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameRankListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*RelGameRankVo       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameRankListRes) Reset() {
	*x = RelGameRankListRes{}
	mi := &file_gorpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameRankListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameRankListRes) ProtoMessage() {}

func (x *RelGameRankListRes) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameRankListRes.ProtoReflect.Descriptor instead.
func (*RelGameRankListRes) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{20}
}

func (x *RelGameRankListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RelGameRankListRes) GetList() []*RelGameRankVo {
	if x != nil {
		return x.List
	}
	return nil
}

type RelGameVpnGroupVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GameId        int64                  `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	ProductCode   string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	VpnGroupId    int64                  `protobuf:"varint,4,opt,name=vpnGroupId,proto3" json:"vpnGroupId,omitempty"`
	Status        int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupVo) Reset() {
	*x = RelGameVpnGroupVo{}
	mi := &file_gorpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupVo) ProtoMessage() {}

func (x *RelGameVpnGroupVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupVo.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{21}
}

func (x *RelGameVpnGroupVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *RelGameVpnGroupVo) GetVpnGroupId() int64 {
	if x != nil {
		return x.VpnGroupId
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RelGameVpnGroupVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type RelGameVpnGroupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *RelGameVpnGroupVo     `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupReq) Reset() {
	*x = RelGameVpnGroupReq{}
	mi := &file_gorpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupReq) ProtoMessage() {}

func (x *RelGameVpnGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupReq.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{22}
}

func (x *RelGameVpnGroupReq) GetVo() *RelGameVpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameVpnGroupListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	GameIds       []int64                `protobuf:"varint,2,rep,packed,name=gameIds,proto3" json:"gameIds,omitempty"`
	Vo            *RelGameVpnGroupVo     `protobuf:"bytes,3,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupListReq) Reset() {
	*x = RelGameVpnGroupListReq{}
	mi := &file_gorpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupListReq) ProtoMessage() {}

func (x *RelGameVpnGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupListReq.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{23}
}

func (x *RelGameVpnGroupListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *RelGameVpnGroupListReq) GetGameIds() []int64 {
	if x != nil {
		return x.GameIds
	}
	return nil
}

func (x *RelGameVpnGroupListReq) GetVo() *RelGameVpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type RelGameVpnGroupListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*RelGameVpnGroupVo   `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelGameVpnGroupListRes) Reset() {
	*x = RelGameVpnGroupListRes{}
	mi := &file_gorpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelGameVpnGroupListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelGameVpnGroupListRes) ProtoMessage() {}

func (x *RelGameVpnGroupListRes) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelGameVpnGroupListRes.ProtoReflect.Descriptor instead.
func (*RelGameVpnGroupListRes) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{24}
}

func (x *RelGameVpnGroupListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RelGameVpnGroupListRes) GetList() []*RelGameVpnGroupVo {
	if x != nil {
		return x.List
	}
	return nil
}

type I18NVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *I18NVo) Reset() {
	*x = I18NVo{}
	mi := &file_gorpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *I18NVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I18NVo) ProtoMessage() {}

func (x *I18NVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I18NVo.ProtoReflect.Descriptor instead.
func (*I18NVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{25}
}

func (x *I18NVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *I18NVo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpgradeResVo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title              string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Path               string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	FileMd5            string                 `protobuf:"bytes,4,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	FilePath           string                 `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
	MetadataId         string                 `protobuf:"bytes,6,opt,name=metadataId,proto3" json:"metadataId,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	RuntimeVersion     string                 `protobuf:"bytes,8,opt,name=runtimeVersion,proto3" json:"runtimeVersion,omitempty"`
	RuntimeVersionCode int64                  `protobuf:"varint,9,opt,name=runtimeVersionCode,proto3" json:"runtimeVersionCode,omitempty"`
	AppVersionName     string                 `protobuf:"bytes,10,opt,name=appVersionName,proto3" json:"appVersionName,omitempty"`
	AppVersionCode     int64                  `protobuf:"varint,11,opt,name=appVersionCode,proto3" json:"appVersionCode,omitempty"`
	Status             Status                 `protobuf:"varint,12,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Remark             string                 `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime         int64                  `protobuf:"varint,14,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime         int64                  `protobuf:"varint,15,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ResSize            int64                  `protobuf:"varint,16,opt,name=resSize,proto3" json:"resSize,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpgradeResVo) Reset() {
	*x = UpgradeResVo{}
	mi := &file_gorpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResVo) ProtoMessage() {}

func (x *UpgradeResVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResVo.ProtoReflect.Descriptor instead.
func (*UpgradeResVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{26}
}

func (x *UpgradeResVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradeResVo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpgradeResVo) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UpgradeResVo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpgradeResVo) GetMetadataId() string {
	if x != nil {
		return x.MetadataId
	}
	return ""
}

func (x *UpgradeResVo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpgradeResVo) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *UpgradeResVo) GetRuntimeVersionCode() int64 {
	if x != nil {
		return x.RuntimeVersionCode
	}
	return 0
}

func (x *UpgradeResVo) GetAppVersionName() string {
	if x != nil {
		return x.AppVersionName
	}
	return ""
}

func (x *UpgradeResVo) GetAppVersionCode() int64 {
	if x != nil {
		return x.AppVersionCode
	}
	return 0
}

func (x *UpgradeResVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UpgradeResVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpgradeResVo) GetResSize() int64 {
	if x != nil {
		return x.ResSize
	}
	return 0
}

type UpgradeResConfigVo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductId             int64                  `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Platform              string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel               string                 `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	ResId                 int64                  `protobuf:"varint,5,opt,name=resId,proto3" json:"resId,omitempty"`
	IsForceUpdate         int64                  `protobuf:"varint,6,opt,name=isForceUpdate,proto3" json:"isForceUpdate,omitempty"`
	ForceIntro            string                 `protobuf:"bytes,7,opt,name=forceIntro,proto3" json:"forceIntro,omitempty"`
	AreaConfigs           string                 `protobuf:"bytes,8,opt,name=areaConfigs,proto3" json:"areaConfigs,omitempty"`
	VersionConfigs        string                 `protobuf:"bytes,9,opt,name=versionConfigs,proto3" json:"versionConfigs,omitempty"`
	Interval              int64                  `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
	UpgradeRate           int64                  `protobuf:"varint,11,opt,name=upgradeRate,proto3" json:"upgradeRate,omitempty"`
	Intro                 string                 `protobuf:"bytes,12,opt,name=intro,proto3" json:"intro,omitempty"`
	Apis                  string                 `protobuf:"bytes,13,opt,name=apis,proto3" json:"apis,omitempty"`
	Status                Status                 `protobuf:"varint,14,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Remark                string                 `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`
	UserIds               string                 `protobuf:"bytes,16,opt,name=userIds,proto3" json:"userIds,omitempty"`
	CreateTime            int64                  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime            int64                  `protobuf:"varint,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ForceVersionConfigs   string                 `protobuf:"bytes,19,opt,name=forceVersionConfigs,proto3" json:"forceVersionConfigs,omitempty"`
	ForceAreaConfigs      string                 `protobuf:"bytes,20,opt,name=forceAreaConfigs,proto3" json:"forceAreaConfigs,omitempty"`
	RuntimeVersionConfigs string                 `protobuf:"bytes,21,opt,name=runtimeVersionConfigs,proto3" json:"runtimeVersionConfigs,omitempty"`
	Title                 string                 `protobuf:"bytes,22,opt,name=title,proto3" json:"title,omitempty"`
	IsSilent              int64                  `protobuf:"varint,23,opt,name=isSilent,proto3" json:"isSilent,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UpgradeResConfigVo) Reset() {
	*x = UpgradeResConfigVo{}
	mi := &file_gorpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigVo) ProtoMessage() {}

func (x *UpgradeResConfigVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigVo.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{27}
}

func (x *UpgradeResConfigVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResConfigVo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpgradeResConfigVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpgradeResConfigVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpgradeResConfigVo) GetResId() int64 {
	if x != nil {
		return x.ResId
	}
	return 0
}

func (x *UpgradeResConfigVo) GetIsForceUpdate() int64 {
	if x != nil {
		return x.IsForceUpdate
	}
	return 0
}

func (x *UpgradeResConfigVo) GetForceIntro() string {
	if x != nil {
		return x.ForceIntro
	}
	return ""
}

func (x *UpgradeResConfigVo) GetAreaConfigs() string {
	if x != nil {
		return x.AreaConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetVersionConfigs() string {
	if x != nil {
		return x.VersionConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *UpgradeResConfigVo) GetUpgradeRate() int64 {
	if x != nil {
		return x.UpgradeRate
	}
	return 0
}

func (x *UpgradeResConfigVo) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *UpgradeResConfigVo) GetApis() string {
	if x != nil {
		return x.Apis
	}
	return ""
}

func (x *UpgradeResConfigVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UpgradeResConfigVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResConfigVo) GetUserIds() string {
	if x != nil {
		return x.UserIds
	}
	return ""
}

func (x *UpgradeResConfigVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResConfigVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpgradeResConfigVo) GetForceVersionConfigs() string {
	if x != nil {
		return x.ForceVersionConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetForceAreaConfigs() string {
	if x != nil {
		return x.ForceAreaConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetRuntimeVersionConfigs() string {
	if x != nil {
		return x.RuntimeVersionConfigs
	}
	return ""
}

func (x *UpgradeResConfigVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradeResConfigVo) GetIsSilent() int64 {
	if x != nil {
		return x.IsSilent
	}
	return 0
}

type UpgradePkgVo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductId           int64                  `protobuf:"varint,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Platform            string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel             string                 `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	VersionCode         int64                  `protobuf:"varint,5,opt,name=versionCode,proto3" json:"versionCode,omitempty"`
	VersionName         string                 `protobuf:"bytes,6,opt,name=versionName,proto3" json:"versionName,omitempty"`
	FileMd5             string                 `protobuf:"bytes,7,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	AreaConfigs         string                 `protobuf:"bytes,8,opt,name=areaConfigs,proto3" json:"areaConfigs,omitempty"`
	VersionConfigs      string                 `protobuf:"bytes,9,opt,name=versionConfigs,proto3" json:"versionConfigs,omitempty"`
	Interval            int64                  `protobuf:"varint,10,opt,name=interval,proto3" json:"interval,omitempty"`
	UpgradeRate         int64                  `protobuf:"varint,11,opt,name=upgradeRate,proto3" json:"upgradeRate,omitempty"`
	Intro               string                 `protobuf:"bytes,12,opt,name=intro,proto3" json:"intro,omitempty"`
	AppStoreUrl         string                 `protobuf:"bytes,13,opt,name=appStoreUrl,proto3" json:"appStoreUrl,omitempty"`
	Url                 string                 `protobuf:"bytes,14,opt,name=url,proto3" json:"url,omitempty"`
	OnlineUrls          string                 `protobuf:"bytes,15,opt,name=onlineUrls,proto3" json:"onlineUrls,omitempty"`
	UserIds             string                 `protobuf:"bytes,16,opt,name=userIds,proto3" json:"userIds,omitempty"`
	IsForceUpdate       int64                  `protobuf:"varint,17,opt,name=isForceUpdate,proto3" json:"isForceUpdate,omitempty"`
	ForceIntro          string                 `protobuf:"bytes,18,opt,name=forceIntro,proto3" json:"forceIntro,omitempty"`
	ForceVersionConfigs string                 `protobuf:"bytes,19,opt,name=forceVersionConfigs,proto3" json:"forceVersionConfigs,omitempty"`
	Status              Status                 `protobuf:"varint,20,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Remark              string                 `protobuf:"bytes,21,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime          int64                  `protobuf:"varint,22,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          int64                  `protobuf:"varint,23,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Title               string                 `protobuf:"bytes,24,opt,name=title,proto3" json:"title,omitempty"`
	ForceAreaConfigs    string                 `protobuf:"bytes,25,opt,name=forceAreaConfigs,proto3" json:"forceAreaConfigs,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpgradePkgVo) Reset() {
	*x = UpgradePkgVo{}
	mi := &file_gorpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgVo) ProtoMessage() {}

func (x *UpgradePkgVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgVo.ProtoReflect.Descriptor instead.
func (*UpgradePkgVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{28}
}

func (x *UpgradePkgVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradePkgVo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpgradePkgVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpgradePkgVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpgradePkgVo) GetVersionCode() int64 {
	if x != nil {
		return x.VersionCode
	}
	return 0
}

func (x *UpgradePkgVo) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *UpgradePkgVo) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UpgradePkgVo) GetAreaConfigs() string {
	if x != nil {
		return x.AreaConfigs
	}
	return ""
}

func (x *UpgradePkgVo) GetVersionConfigs() string {
	if x != nil {
		return x.VersionConfigs
	}
	return ""
}

func (x *UpgradePkgVo) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *UpgradePkgVo) GetUpgradeRate() int64 {
	if x != nil {
		return x.UpgradeRate
	}
	return 0
}

func (x *UpgradePkgVo) GetIntro() string {
	if x != nil {
		return x.Intro
	}
	return ""
}

func (x *UpgradePkgVo) GetAppStoreUrl() string {
	if x != nil {
		return x.AppStoreUrl
	}
	return ""
}

func (x *UpgradePkgVo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpgradePkgVo) GetOnlineUrls() string {
	if x != nil {
		return x.OnlineUrls
	}
	return ""
}

func (x *UpgradePkgVo) GetUserIds() string {
	if x != nil {
		return x.UserIds
	}
	return ""
}

func (x *UpgradePkgVo) GetIsForceUpdate() int64 {
	if x != nil {
		return x.IsForceUpdate
	}
	return 0
}

func (x *UpgradePkgVo) GetForceIntro() string {
	if x != nil {
		return x.ForceIntro
	}
	return ""
}

func (x *UpgradePkgVo) GetForceVersionConfigs() string {
	if x != nil {
		return x.ForceVersionConfigs
	}
	return ""
}

func (x *UpgradePkgVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UpgradePkgVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradePkgVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradePkgVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *UpgradePkgVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradePkgVo) GetForceAreaConfigs() string {
	if x != nil {
		return x.ForceAreaConfigs
	}
	return ""
}

type UpgradeResConfigGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Id            int64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResConfigGetReq) Reset() {
	*x = UpgradeResConfigGetReq{}
	mi := &file_gorpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigGetReq) ProtoMessage() {}

func (x *UpgradeResConfigGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigGetReq.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{29}
}

func (x *UpgradeResConfigGetReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResConfigGetReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpgradeResConfigListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResConfigVo    `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResConfigListReq) Reset() {
	*x = UpgradeResConfigListReq{}
	mi := &file_gorpc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigListReq) ProtoMessage() {}

func (x *UpgradeResConfigListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{30}
}

func (x *UpgradeResConfigListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResConfigListReq) GetVo() *UpgradeResConfigVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResConfigListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResConfigVo  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResConfigListResp) Reset() {
	*x = UpgradeResConfigListResp{}
	mi := &file_gorpc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResConfigListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResConfigListResp) ProtoMessage() {}

func (x *UpgradeResConfigListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResConfigListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResConfigListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{31}
}

func (x *UpgradeResConfigListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResConfigListResp) GetList() []*UpgradeResConfigVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradePkgGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *UpgradePkgVo          `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgGetReq) Reset() {
	*x = UpgradePkgGetReq{}
	mi := &file_gorpc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgGetReq) ProtoMessage() {}

func (x *UpgradePkgGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgGetReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{32}
}

func (x *UpgradePkgGetReq) GetVo() *UpgradePkgVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradePkgListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradePkgVo          `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgListReq) Reset() {
	*x = UpgradePkgListReq{}
	mi := &file_gorpc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgListReq) ProtoMessage() {}

func (x *UpgradePkgListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgListReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{33}
}

func (x *UpgradePkgListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradePkgListReq) GetVo() *UpgradePkgVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradePkgListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradePkgVo        `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgListResp) Reset() {
	*x = UpgradePkgListResp{}
	mi := &file_gorpc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgListResp) ProtoMessage() {}

func (x *UpgradePkgListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgListResp.ProtoReflect.Descriptor instead.
func (*UpgradePkgListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{34}
}

func (x *UpgradePkgListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradePkgListResp) GetList() []*UpgradePkgVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradeResGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *UpgradeResVo          `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResGetReq) Reset() {
	*x = UpgradeResGetReq{}
	mi := &file_gorpc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResGetReq) ProtoMessage() {}

func (x *UpgradeResGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResGetReq.ProtoReflect.Descriptor instead.
func (*UpgradeResGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{35}
}

func (x *UpgradeResGetReq) GetVo() *UpgradeResVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResVo          `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResListReq) Reset() {
	*x = UpgradeResListReq{}
	mi := &file_gorpc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResListReq) ProtoMessage() {}

func (x *UpgradeResListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{36}
}

func (x *UpgradeResListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResListReq) GetVo() *UpgradeResVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResVo        `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResListResp) Reset() {
	*x = UpgradeResListResp{}
	mi := &file_gorpc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResListResp) ProtoMessage() {}

func (x *UpgradeResListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{37}
}

func (x *UpgradeResListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResListResp) GetList() []*UpgradeResVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ResourceDelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	FileMd5       string                 `protobuf:"bytes,2,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceDelReq) Reset() {
	*x = ResourceDelReq{}
	mi := &file_gorpc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDelReq) ProtoMessage() {}

func (x *ResourceDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDelReq.ProtoReflect.Descriptor instead.
func (*ResourceDelReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{38}
}

func (x *ResourceDelReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ResourceDelReq) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

type ConfigGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // ID
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` // 类型标识
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigGetReq) Reset() {
	*x = ConfigGetReq{}
	mi := &file_gorpc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetReq) ProtoMessage() {}

func (x *ConfigGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetReq.ProtoReflect.Descriptor instead.
func (*ConfigGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{39}
}

func (x *ConfigGetReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfigGetReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// GlobalParam
type GlobalParamVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParamKey      string                 `protobuf:"bytes,2,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	ParamValue    string                 `protobuf:"bytes,3,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	ValueType     string                 `protobuf:"bytes,4,opt,name=valueType,proto3" json:"valueType,omitempty"`
	MinValue      float32                `protobuf:"fixed32,5,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue      float32                `protobuf:"fixed32,6,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Editable      BoolInt                `protobuf:"varint,8,opt,name=editable,proto3,enum=gorpc.BoolInt" json:"editable,omitempty"`
	Nullable      BoolInt                `protobuf:"varint,9,opt,name=nullable,proto3,enum=gorpc.BoolInt" json:"nullable,omitempty"`
	Hidden        BoolInt                `protobuf:"varint,10,opt,name=hidden,proto3,enum=gorpc.BoolInt" json:"hidden,omitempty"`
	MutiLang      BoolInt                `protobuf:"varint,11,opt,name=mutiLang,proto3,enum=gorpc.BoolInt" json:"mutiLang,omitempty"`
	Sort          int64                  `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
	ApiExport     BoolInt                `protobuf:"varint,14,opt,name=apiExport,proto3,enum=gorpc.BoolInt" json:"apiExport,omitempty"`
	ApiExportName string                 `protobuf:"bytes,15,opt,name=apiExportName,proto3" json:"apiExportName,omitempty"`
	CreateTime    int64                  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalParamVo) Reset() {
	*x = GlobalParamVo{}
	mi := &file_gorpc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalParamVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalParamVo) ProtoMessage() {}

func (x *GlobalParamVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalParamVo.ProtoReflect.Descriptor instead.
func (*GlobalParamVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{40}
}

func (x *GlobalParamVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GlobalParamVo) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

func (x *GlobalParamVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *GlobalParamVo) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *GlobalParamVo) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *GlobalParamVo) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *GlobalParamVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GlobalParamVo) GetEditable() BoolInt {
	if x != nil {
		return x.Editable
	}
	return BoolInt_BoolIntUnknown
}

func (x *GlobalParamVo) GetNullable() BoolInt {
	if x != nil {
		return x.Nullable
	}
	return BoolInt_BoolIntUnknown
}

func (x *GlobalParamVo) GetHidden() BoolInt {
	if x != nil {
		return x.Hidden
	}
	return BoolInt_BoolIntUnknown
}

func (x *GlobalParamVo) GetMutiLang() BoolInt {
	if x != nil {
		return x.MutiLang
	}
	return BoolInt_BoolIntUnknown
}

func (x *GlobalParamVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *GlobalParamVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *GlobalParamVo) GetApiExport() BoolInt {
	if x != nil {
		return x.ApiExport
	}
	return BoolInt_BoolIntUnknown
}

func (x *GlobalParamVo) GetApiExportName() string {
	if x != nil {
		return x.ApiExportName
	}
	return ""
}

func (x *GlobalParamVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GlobalParamVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type GlobalParamListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *GlobalParamVo         `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalParamListReq) Reset() {
	*x = GlobalParamListReq{}
	mi := &file_gorpc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalParamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalParamListReq) ProtoMessage() {}

func (x *GlobalParamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalParamListReq.ProtoReflect.Descriptor instead.
func (*GlobalParamListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{41}
}

func (x *GlobalParamListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GlobalParamListReq) GetVo() *GlobalParamVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type GlobalParamListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*GlobalParamVo       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalParamListResp) Reset() {
	*x = GlobalParamListResp{}
	mi := &file_gorpc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalParamListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalParamListResp) ProtoMessage() {}

func (x *GlobalParamListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalParamListResp.ProtoReflect.Descriptor instead.
func (*GlobalParamListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{42}
}

func (x *GlobalParamListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GlobalParamListResp) GetList() []*GlobalParamVo {
	if x != nil {
		return x.List
	}
	return nil
}

// Product
type ProductVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Domain        string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Status        Status                 `protobuf:"varint,5,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Langs         string                 `protobuf:"bytes,6,opt,name=langs,proto3" json:"langs,omitempty"`
	DefaultLang   string                 `protobuf:"bytes,7,opt,name=defaultLang,proto3" json:"defaultLang,omitempty"`
	Remark        string                 `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductVo) Reset() {
	*x = ProductVo{}
	mi := &file_gorpc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductVo) ProtoMessage() {}

func (x *ProductVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductVo.ProtoReflect.Descriptor instead.
func (*ProductVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{43}
}

func (x *ProductVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductVo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ProductVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *ProductVo) GetLangs() string {
	if x != nil {
		return x.Langs
	}
	return ""
}

func (x *ProductVo) GetDefaultLang() string {
	if x != nil {
		return x.DefaultLang
	}
	return ""
}

func (x *ProductVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ProductVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ProductVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ProductListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *ProductVo             `protobuf:"bytes,4,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductListReq) Reset() {
	*x = ProductListReq{}
	mi := &file_gorpc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListReq) ProtoMessage() {}

func (x *ProductListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListReq.ProtoReflect.Descriptor instead.
func (*ProductListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{44}
}

func (x *ProductListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductListReq) GetVo() *ProductVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductVo           `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductListResp) Reset() {
	*x = ProductListResp{}
	mi := &file_gorpc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListResp) ProtoMessage() {}

func (x *ProductListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListResp.ProtoReflect.Descriptor instead.
func (*ProductListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{45}
}

func (x *ProductListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductListResp) GetList() []*ProductVo {
	if x != nil {
		return x.List
	}
	return nil
}

// ProductParam
type ProductParamVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParamKey      string                 `protobuf:"bytes,3,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	ParamValue    string                 `protobuf:"bytes,4,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	ValueType     string                 `protobuf:"bytes,5,opt,name=valueType,proto3" json:"valueType,omitempty"`
	MinValue      float32                `protobuf:"fixed32,6,opt,name=minValue,proto3" json:"minValue,omitempty"`
	MaxValue      float32                `protobuf:"fixed32,7,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	Name          string                 `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Editable      bool                   `protobuf:"varint,9,opt,name=editable,proto3" json:"editable,omitempty"`
	Nullable      bool                   `protobuf:"varint,10,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Hidden        bool                   `protobuf:"varint,11,opt,name=hidden,proto3" json:"hidden,omitempty"`
	MutiLang      bool                   `protobuf:"varint,12,opt,name=mutiLang,proto3" json:"mutiLang,omitempty"`
	Sort          int64                  `protobuf:"varint,13,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,14,opt,name=remark,proto3" json:"remark,omitempty"`
	ApiExport     bool                   `protobuf:"varint,15,opt,name=apiExport,proto3" json:"apiExport,omitempty"`
	ApiExportName string                 `protobuf:"bytes,16,opt,name=apiExportName,proto3" json:"apiExportName,omitempty"`
	CreateTime    int64                  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductParamVo) Reset() {
	*x = ProductParamVo{}
	mi := &file_gorpc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductParamVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductParamVo) ProtoMessage() {}

func (x *ProductParamVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductParamVo.ProtoReflect.Descriptor instead.
func (*ProductParamVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{46}
}

func (x *ProductParamVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductParamVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ProductParamVo) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

func (x *ProductParamVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *ProductParamVo) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *ProductParamVo) GetMinValue() float32 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *ProductParamVo) GetMaxValue() float32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ProductParamVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductParamVo) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *ProductParamVo) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *ProductParamVo) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ProductParamVo) GetMutiLang() bool {
	if x != nil {
		return x.MutiLang
	}
	return false
}

func (x *ProductParamVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductParamVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ProductParamVo) GetApiExport() bool {
	if x != nil {
		return x.ApiExport
	}
	return false
}

func (x *ProductParamVo) GetApiExportName() string {
	if x != nil {
		return x.ApiExportName
	}
	return ""
}

func (x *ProductParamVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ProductParamVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ProductParamListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *ProductParamVo        `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductParamListReq) Reset() {
	*x = ProductParamListReq{}
	mi := &file_gorpc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductParamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductParamListReq) ProtoMessage() {}

func (x *ProductParamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductParamListReq.ProtoReflect.Descriptor instead.
func (*ProductParamListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{47}
}

func (x *ProductParamListReq) GetVo() *ProductParamVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductParamListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductParamVo      `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductParamListResp) Reset() {
	*x = ProductParamListResp{}
	mi := &file_gorpc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductParamListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductParamListResp) ProtoMessage() {}

func (x *ProductParamListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductParamListResp.ProtoReflect.Descriptor instead.
func (*ProductParamListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{48}
}

func (x *ProductParamListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductParamListResp) GetList() []*ProductParamVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ProductActionVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ImgUrl        string                 `protobuf:"bytes,3,opt,name=imgUrl,proto3" json:"imgUrl,omitempty"`
	ActionType    string                 `protobuf:"bytes,4,opt,name=actionType,proto3" json:"actionType,omitempty"`
	ActionData    string                 `protobuf:"bytes,5,opt,name=actionData,proto3" json:"actionData,omitempty"`
	Title         string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Status        int64                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionVo) Reset() {
	*x = ProductActionVo{}
	mi := &file_gorpc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionVo) ProtoMessage() {}

func (x *ProductActionVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionVo.ProtoReflect.Descriptor instead.
func (*ProductActionVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{49}
}

func (x *ProductActionVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductActionVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ProductActionVo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *ProductActionVo) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *ProductActionVo) GetActionData() string {
	if x != nil {
		return x.ActionData
	}
	return ""
}

func (x *ProductActionVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProductActionVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductActionVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ProductActionVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type ProductActionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *ProductActionVo       `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionReq) Reset() {
	*x = ProductActionReq{}
	mi := &file_gorpc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionReq) ProtoMessage() {}

func (x *ProductActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionReq.ProtoReflect.Descriptor instead.
func (*ProductActionReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{50}
}

func (x *ProductActionReq) GetVo() *ProductActionVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductActionListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *ProductActionVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionListReq) Reset() {
	*x = ProductActionListReq{}
	mi := &file_gorpc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionListReq) ProtoMessage() {}

func (x *ProductActionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionListReq.ProtoReflect.Descriptor instead.
func (*ProductActionListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{51}
}

func (x *ProductActionListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductActionListReq) GetVo() *ProductActionVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type ProductActionListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*ProductActionVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductActionListRes) Reset() {
	*x = ProductActionListRes{}
	mi := &file_gorpc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductActionListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductActionListRes) ProtoMessage() {}

func (x *ProductActionListRes) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductActionListRes.ProtoReflect.Descriptor instead.
func (*ProductActionListRes) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{52}
}

func (x *ProductActionListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductActionListRes) GetList() []*ProductActionVo {
	if x != nil {
		return x.List
	}
	return nil
}

// AreaParam
type AreaParamVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Areas         string                 `protobuf:"bytes,4,opt,name=areas,proto3" json:"areas,omitempty"`
	ParamValue    string                 `protobuf:"bytes,5,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	Status        Status                 `protobuf:"varint,6,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Sort          int64                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version       string                 `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreaParamVo) Reset() {
	*x = AreaParamVo{}
	mi := &file_gorpc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaParamVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaParamVo) ProtoMessage() {}

func (x *AreaParamVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaParamVo.ProtoReflect.Descriptor instead.
func (*AreaParamVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{53}
}

func (x *AreaParamVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AreaParamVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *AreaParamVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AreaParamVo) GetAreas() string {
	if x != nil {
		return x.Areas
	}
	return ""
}

func (x *AreaParamVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *AreaParamVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *AreaParamVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AreaParamVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AreaParamVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AreaParamVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AreaParamVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AreaParamListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *AreaParamVo           `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreaParamListReq) Reset() {
	*x = AreaParamListReq{}
	mi := &file_gorpc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaParamListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaParamListReq) ProtoMessage() {}

func (x *AreaParamListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaParamListReq.ProtoReflect.Descriptor instead.
func (*AreaParamListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{54}
}

func (x *AreaParamListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AreaParamListReq) GetVo() *AreaParamVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AreaParamListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AreaParamVo         `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreaParamListResp) Reset() {
	*x = AreaParamListResp{}
	mi := &file_gorpc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaParamListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaParamListResp) ProtoMessage() {}

func (x *AreaParamListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaParamListResp.ProtoReflect.Descriptor instead.
func (*AreaParamListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{55}
}

func (x *AreaParamListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AreaParamListResp) GetList() []*AreaParamVo {
	if x != nil {
		return x.List
	}
	return nil
}

type DictVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParentId      int64                  `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty"`
	DataType      string                 `protobuf:"bytes,4,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Payload       string                 `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Sort          int64                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        int64                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Remark        string                 `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictVo) Reset() {
	*x = DictVo{}
	mi := &file_gorpc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictVo) ProtoMessage() {}

func (x *DictVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictVo.ProtoReflect.Descriptor instead.
func (*DictVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{56}
}

func (x *DictVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DictVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *DictVo) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *DictVo) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *DictVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DictVo) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *DictVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DictVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DictVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *DictVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DictVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type DictGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *DictVo                `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictGetReq) Reset() {
	*x = DictGetReq{}
	mi := &file_gorpc_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictGetReq) ProtoMessage() {}

func (x *DictGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictGetReq.ProtoReflect.Descriptor instead.
func (*DictGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{57}
}

func (x *DictGetReq) GetVo() *DictVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type DictListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *DictVo                `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictListReq) Reset() {
	*x = DictListReq{}
	mi := &file_gorpc_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictListReq) ProtoMessage() {}

func (x *DictListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictListReq.ProtoReflect.Descriptor instead.
func (*DictListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{58}
}

func (x *DictListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DictListReq) GetVo() *DictVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type DictListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*DictVo              `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DictListResp) Reset() {
	*x = DictListResp{}
	mi := &file_gorpc_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictListResp) ProtoMessage() {}

func (x *DictListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictListResp.ProtoReflect.Descriptor instead.
func (*DictListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{59}
}

func (x *DictListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DictListResp) GetList() []*DictVo {
	if x != nil {
		return x.List
	}
	return nil
}

// NationalLanguage
type NationalLanguageVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TbName        string                 `protobuf:"bytes,2,opt,name=tbName,proto3" json:"tbName,omitempty"`
	TbRowId       int64                  `protobuf:"varint,3,opt,name=tbRowId,proto3" json:"tbRowId,omitempty"`
	TbFieldName   string                 `protobuf:"bytes,4,opt,name=tbFieldName,proto3" json:"tbFieldName,omitempty"`
	Lan           string                 `protobuf:"bytes,5,opt,name=lan,proto3" json:"lan,omitempty"`
	Value         string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Status        Status                 `protobuf:"varint,7,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreateTime    int64                  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NationalLanguageVo) Reset() {
	*x = NationalLanguageVo{}
	mi := &file_gorpc_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NationalLanguageVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalLanguageVo) ProtoMessage() {}

func (x *NationalLanguageVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalLanguageVo.ProtoReflect.Descriptor instead.
func (*NationalLanguageVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{60}
}

func (x *NationalLanguageVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NationalLanguageVo) GetTbName() string {
	if x != nil {
		return x.TbName
	}
	return ""
}

func (x *NationalLanguageVo) GetTbRowId() int64 {
	if x != nil {
		return x.TbRowId
	}
	return 0
}

func (x *NationalLanguageVo) GetTbFieldName() string {
	if x != nil {
		return x.TbFieldName
	}
	return ""
}

func (x *NationalLanguageVo) GetLan() string {
	if x != nil {
		return x.Lan
	}
	return ""
}

func (x *NationalLanguageVo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *NationalLanguageVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *NationalLanguageVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *NationalLanguageVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type NationalLanguageListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *NationalLanguageVo    `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NationalLanguageListReq) Reset() {
	*x = NationalLanguageListReq{}
	mi := &file_gorpc_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NationalLanguageListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalLanguageListReq) ProtoMessage() {}

func (x *NationalLanguageListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalLanguageListReq.ProtoReflect.Descriptor instead.
func (*NationalLanguageListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{61}
}

func (x *NationalLanguageListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *NationalLanguageListReq) GetVo() *NationalLanguageVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type NationalLanguageListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*NationalLanguageVo  `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NationalLanguageListResp) Reset() {
	*x = NationalLanguageListResp{}
	mi := &file_gorpc_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NationalLanguageListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalLanguageListResp) ProtoMessage() {}

func (x *NationalLanguageListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalLanguageListResp.ProtoReflect.Descriptor instead.
func (*NationalLanguageListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{62}
}

func (x *NationalLanguageListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NationalLanguageListResp) GetList() []*NationalLanguageVo {
	if x != nil {
		return x.List
	}
	return nil
}

// Tip
type TipVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParamKey      string                 `protobuf:"bytes,3,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	ParamValue    string                 `protobuf:"bytes,4,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
	I18Ns         []*I18NVo              `protobuf:"bytes,5,rep,name=i18ns,proto3" json:"i18ns,omitempty"`
	Code          string                 `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	ShowType      int64                  `protobuf:"varint,7,opt,name=showType,proto3" json:"showType,omitempty"`
	Sort          int64                  `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`
	Remark        string                 `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipVo) Reset() {
	*x = TipVo{}
	mi := &file_gorpc_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipVo) ProtoMessage() {}

func (x *TipVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipVo.ProtoReflect.Descriptor instead.
func (*TipVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{63}
}

func (x *TipVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TipVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TipVo) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

func (x *TipVo) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *TipVo) GetI18Ns() []*I18NVo {
	if x != nil {
		return x.I18Ns
	}
	return nil
}

func (x *TipVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TipVo) GetShowType() int64 {
	if x != nil {
		return x.ShowType
	}
	return 0
}

func (x *TipVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TipVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TipVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TipVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type TipListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *TipVo                 `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipListReq) Reset() {
	*x = TipListReq{}
	mi := &file_gorpc_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipListReq) ProtoMessage() {}

func (x *TipListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipListReq.ProtoReflect.Descriptor instead.
func (*TipListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{64}
}

func (x *TipListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TipListReq) GetVo() *TipVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type TipListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*TipVo               `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipListResp) Reset() {
	*x = TipListResp{}
	mi := &file_gorpc_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipListResp) ProtoMessage() {}

func (x *TipListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipListResp.ProtoReflect.Descriptor instead.
func (*TipListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{65}
}

func (x *TipListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TipListResp) GetList() []*TipVo {
	if x != nil {
		return x.List
	}
	return nil
}

type TipKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductCode   string                 `protobuf:"bytes,1,opt,name=productCode,proto3" json:"productCode,omitempty"`
	ParamKey      string                 `protobuf:"bytes,2,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipKey) Reset() {
	*x = TipKey{}
	mi := &file_gorpc_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipKey) ProtoMessage() {}

func (x *TipKey) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipKey.ProtoReflect.Descriptor instead.
func (*TipKey) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{66}
}

func (x *TipKey) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *TipKey) GetParamKey() string {
	if x != nil {
		return x.ParamKey
	}
	return ""
}

type TipDelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Keys          []*TipKey              `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipDelReq) Reset() {
	*x = TipDelReq{}
	mi := &file_gorpc_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipDelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipDelReq) ProtoMessage() {}

func (x *TipDelReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipDelReq.ProtoReflect.Descriptor instead.
func (*TipDelReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{67}
}

func (x *TipDelReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TipDelReq) GetKeys() []*TipKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type UpgradePkgPlanVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"` // 产品code
	Areas         string                 `protobuf:"bytes,3,opt,name=areas,proto3" json:"areas,omitempty"`             // 地区列表
	Sort          int64                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        Status                 `protobuf:"varint,5,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"` // 状态
	Remark        string                 `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanVo) Reset() {
	*x = UpgradePkgPlanVo{}
	mi := &file_gorpc_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanVo) ProtoMessage() {}

func (x *UpgradePkgPlanVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanVo.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{68}
}

func (x *UpgradePkgPlanVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradePkgPlanVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UpgradePkgPlanVo) GetAreas() string {
	if x != nil {
		return x.Areas
	}
	return ""
}

func (x *UpgradePkgPlanVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpgradePkgPlanVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UpgradePkgPlanVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradePkgPlanVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradePkgPlanVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradePkgPlanDetailVo struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Id                       int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlanId                   int64                  `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`                                     // 方案ID
	Platform                 string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`                                  // 平台
	Channel                  string                 `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`                                    // 渠道
	Name                     string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                          // 名称
	Ver                      int64                  `protobuf:"varint,6,opt,name=ver,proto3" json:"ver,omitempty"`                                           // 版本号
	Url                      string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`                                            // 商店地址
	WebsiteUrl               string                 `protobuf:"bytes,8,opt,name=websiteUrl,proto3" json:"websiteUrl,omitempty"`                              // 官网地址
	DirectUrl                string                 `protobuf:"bytes,9,opt,name=directUrl,proto3" json:"directUrl,omitempty"`                                // 直接下载地址
	Md5                      string                 `protobuf:"bytes,10,opt,name=md5,proto3" json:"md5,omitempty"`                                           // MD5
	Info                     string                 `protobuf:"bytes,11,opt,name=info,proto3" json:"info,omitempty"`                                         // 更新信息
	TestUpgradePolicyConfig  string                 `protobuf:"bytes,12,opt,name=testUpgradePolicyConfig,proto3" json:"testUpgradePolicyConfig,omitempty"`   // 测试更新策略配置
	UpgradePolicyConfig      string                 `protobuf:"bytes,13,opt,name=upgradePolicyConfig,proto3" json:"upgradePolicyConfig,omitempty"`           // 更新策略配置
	ForceUpgradePolicyConfig string                 `protobuf:"bytes,14,opt,name=forceUpgradePolicyConfig,proto3" json:"forceUpgradePolicyConfig,omitempty"` // 强制更新策略
	Status                   Status                 `protobuf:"varint,15,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`                  // 状态
	Remark                   string                 `protobuf:"bytes,16,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime               int64                  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime               int64                  `protobuf:"varint,18,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpgradePkgPlanDetailVo) Reset() {
	*x = UpgradePkgPlanDetailVo{}
	mi := &file_gorpc_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanDetailVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanDetailVo) ProtoMessage() {}

func (x *UpgradePkgPlanDetailVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanDetailVo.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanDetailVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{69}
}

func (x *UpgradePkgPlanDetailVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetVer() int64 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetWebsiteUrl() string {
	if x != nil {
		return x.WebsiteUrl
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetDirectUrl() string {
	if x != nil {
		return x.DirectUrl
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetTestUpgradePolicyConfig() string {
	if x != nil {
		return x.TestUpgradePolicyConfig
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetUpgradePolicyConfig() string {
	if x != nil {
		return x.UpgradePolicyConfig
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetForceUpgradePolicyConfig() string {
	if x != nil {
		return x.ForceUpgradePolicyConfig
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UpgradePkgPlanDetailVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradePkgPlanDetailVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradePkgPlanDetailVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradePkgPlanListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradePkgPlanVo      `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanListReq) Reset() {
	*x = UpgradePkgPlanListReq{}
	mi := &file_gorpc_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanListReq) ProtoMessage() {}

func (x *UpgradePkgPlanListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanListReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{70}
}

func (x *UpgradePkgPlanListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradePkgPlanListReq) GetVo() *UpgradePkgPlanVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradePkgPlanListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradePkgPlanVo    `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanListResp) Reset() {
	*x = UpgradePkgPlanListResp{}
	mi := &file_gorpc_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanListResp) ProtoMessage() {}

func (x *UpgradePkgPlanListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanListResp.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{71}
}

func (x *UpgradePkgPlanListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradePkgPlanListResp) GetList() []*UpgradePkgPlanVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradePkgPlanDetailListReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Page          *Page                   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradePkgPlanDetailVo `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	PlanIds       []int64                 `protobuf:"varint,3,rep,packed,name=planIds,proto3" json:"planIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanDetailListReq) Reset() {
	*x = UpgradePkgPlanDetailListReq{}
	mi := &file_gorpc_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanDetailListReq) ProtoMessage() {}

func (x *UpgradePkgPlanDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanDetailListReq.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanDetailListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{72}
}

func (x *UpgradePkgPlanDetailListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradePkgPlanDetailListReq) GetVo() *UpgradePkgPlanDetailVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *UpgradePkgPlanDetailListReq) GetPlanIds() []int64 {
	if x != nil {
		return x.PlanIds
	}
	return nil
}

type UpgradePkgPlanDetailListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Total         int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradePkgPlanDetailVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradePkgPlanDetailListResp) Reset() {
	*x = UpgradePkgPlanDetailListResp{}
	mi := &file_gorpc_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradePkgPlanDetailListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePkgPlanDetailListResp) ProtoMessage() {}

func (x *UpgradePkgPlanDetailListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePkgPlanDetailListResp.ProtoReflect.Descriptor instead.
func (*UpgradePkgPlanDetailListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{73}
}

func (x *UpgradePkgPlanDetailListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradePkgPlanDetailListResp) GetList() []*UpgradePkgPlanDetailVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradeResPlanVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"` // 产品code
	Areas         string                 `protobuf:"bytes,3,opt,name=areas,proto3" json:"areas,omitempty"`             // 地区列表
	Sort          int64                  `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        Status                 `protobuf:"varint,5,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"` // 状态
	Remark        string                 `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanVo) Reset() {
	*x = UpgradeResPlanVo{}
	mi := &file_gorpc_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanVo) ProtoMessage() {}

func (x *UpgradeResPlanVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanVo.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{74}
}

func (x *UpgradeResPlanVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResPlanVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *UpgradeResPlanVo) GetAreas() string {
	if x != nil {
		return x.Areas
	}
	return ""
}

func (x *UpgradeResPlanVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *UpgradeResPlanVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UpgradeResPlanVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResPlanVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResPlanVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradeResPlanDetailVo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // ID
	PlanId             int64                  `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`                          // 方案ID
	Title              string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	Path               string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`                               // 解压后的资源路径
	FileMd5            string                 `protobuf:"bytes,5,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`                         // zip文件md5值
	FilePath           string                 `protobuf:"bytes,6,opt,name=filePath,proto3" json:"filePath,omitempty"`                       // zip文件路径
	ResSize            int64                  `protobuf:"varint,7,opt,name=resSize,proto3" json:"resSize,omitempty"`                        // 资源大小
	MetadataId         string                 `protobuf:"bytes,8,opt,name=metadataId,proto3" json:"metadataId,omitempty"`                   // metadata.json文件内容sh256 hash值
	CreatedAt          string                 `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                     // new Date(metadataStat.birthtime).toISOString()
	RuntimeVersion     string                 `protobuf:"bytes,10,opt,name=runtimeVersion,proto3" json:"runtimeVersion,omitempty"`          // expo sdk 版本
	RuntimeVersionCode int64                  `protobuf:"varint,11,opt,name=runtimeVersionCode,proto3" json:"runtimeVersionCode,omitempty"` // 资源版本号
	AppVersionName     string                 `protobuf:"bytes,12,opt,name=appVersionName,proto3" json:"appVersionName,omitempty"`          // app 版本名称
	AppVersionCode     int64                  `protobuf:"varint,13,opt,name=appVersionCode,proto3" json:"appVersionCode,omitempty"`         // app 版本号
	Status             Status                 `protobuf:"varint,14,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`       // 状态,1=正常,2=冻结
	Remark             string                 `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`                          // 备注
	CreateTime         int64                  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`                 // 创建时间秒
	UpdateTime         int64                  `protobuf:"varint,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`                 // 修改时间秒
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpgradeResPlanDetailVo) Reset() {
	*x = UpgradeResPlanDetailVo{}
	mi := &file_gorpc_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanDetailVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanDetailVo) ProtoMessage() {}

func (x *UpgradeResPlanDetailVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanDetailVo.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanDetailVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{75}
}

func (x *UpgradeResPlanDetailVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetPlanId() int64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetResSize() int64 {
	if x != nil {
		return x.ResSize
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetMetadataId() string {
	if x != nil {
		return x.MetadataId
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetRuntimeVersionCode() int64 {
	if x != nil {
		return x.RuntimeVersionCode
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetAppVersionName() string {
	if x != nil {
		return x.AppVersionName
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetAppVersionCode() int64 {
	if x != nil {
		return x.AppVersionCode
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UpgradeResPlanDetailVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpgradeResPlanDetailVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UpgradeResPlanDetailVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UpgradeResPlanListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResPlanVo      `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanListReq) Reset() {
	*x = UpgradeResPlanListReq{}
	mi := &file_gorpc_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanListReq) ProtoMessage() {}

func (x *UpgradeResPlanListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{76}
}

func (x *UpgradeResPlanListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResPlanListReq) GetVo() *UpgradeResPlanVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UpgradeResPlanListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResPlanVo    `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanListResp) Reset() {
	*x = UpgradeResPlanListResp{}
	mi := &file_gorpc_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanListResp) ProtoMessage() {}

func (x *UpgradeResPlanListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{77}
}

func (x *UpgradeResPlanListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResPlanListResp) GetList() []*UpgradeResPlanVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UpgradeResPlanDetailListReq struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Page          *Page                   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UpgradeResPlanDetailVo `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	PlanIds       []int64                 `protobuf:"varint,3,rep,packed,name=planIds,proto3" json:"planIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanDetailListReq) Reset() {
	*x = UpgradeResPlanDetailListReq{}
	mi := &file_gorpc_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanDetailListReq) ProtoMessage() {}

func (x *UpgradeResPlanDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanDetailListReq.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanDetailListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{78}
}

func (x *UpgradeResPlanDetailListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UpgradeResPlanDetailListReq) GetVo() *UpgradeResPlanDetailVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *UpgradeResPlanDetailListReq) GetPlanIds() []int64 {
	if x != nil {
		return x.PlanIds
	}
	return nil
}

type UpgradeResPlanDetailListResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Total         int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UpgradeResPlanDetailVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeResPlanDetailListResp) Reset() {
	*x = UpgradeResPlanDetailListResp{}
	mi := &file_gorpc_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeResPlanDetailListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeResPlanDetailListResp) ProtoMessage() {}

func (x *UpgradeResPlanDetailListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeResPlanDetailListResp.ProtoReflect.Descriptor instead.
func (*UpgradeResPlanDetailListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{79}
}

func (x *UpgradeResPlanDetailListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UpgradeResPlanDetailListResp) GetList() []*UpgradeResPlanDetailVo {
	if x != nil {
		return x.List
	}
	return nil
}

// Account
type AccountVo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserUuid          string                 `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`                               // 用户UUID
	ProductCode       string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`                         // 产品ID
	Username          string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                               // 用户名
	Password          string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                               // 密码
	AccountKey        string                 `protobuf:"bytes,6,opt,name=accountKey,proto3" json:"accountKey,omitempty"`                           // 账号KEY
	AccountPassword   string                 `protobuf:"bytes,7,opt,name=accountPassword,proto3" json:"accountPassword,omitempty"`                 // 账号密码
	WhitelistUser     BoolInt                `protobuf:"varint,8,opt,name=whitelistUser,proto3,enum=gorpc.BoolInt" json:"whitelistUser,omitempty"` // 白名单用户
	Area              string                 `protobuf:"bytes,9,opt,name=area,proto3" json:"area,omitempty"`                                       // 指定地区
	AccountType       int64                  `protobuf:"varint,10,opt,name=accountType,proto3" json:"accountType,omitempty"`                       // 账号类型
	RegistMode        int64                  `protobuf:"varint,11,opt,name=registMode,proto3" json:"registMode,omitempty"`                         // 注册方式
	Activated         BoolInt                `protobuf:"varint,12,opt,name=activated,proto3,enum=gorpc.BoolInt" json:"activated,omitempty"`        // 是否激活
	Config            string                 `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`                                  // 配置
	Status            Status                 `protobuf:"varint,14,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`               // 状态
	Remark            string                 `protobuf:"bytes,15,opt,name=remark,proto3" json:"remark,omitempty"`                                  // 备注
	DeviceId          string                 `protobuf:"bytes,16,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                              // 设备ID
	Platform          string                 `protobuf:"bytes,17,opt,name=platform,proto3" json:"platform,omitempty"`                              // 平台
	Channel           string                 `protobuf:"bytes,18,opt,name=channel,proto3" json:"channel,omitempty"`                                // 渠道
	DeviceModel       string                 `protobuf:"bytes,19,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`                        // 设备型号
	DeviceOs          string                 `protobuf:"bytes,20,opt,name=deviceOs,proto3" json:"deviceOs,omitempty"`                              // 设备系统
	Timezone          int64                  `protobuf:"varint,21,opt,name=timezone,proto3" json:"timezone,omitempty"`                             // 时区
	Lang              string                 `protobuf:"bytes,22,opt,name=lang,proto3" json:"lang,omitempty"`                                      // 语言
	AppVer            int64                  `protobuf:"varint,23,opt,name=appVer,proto3" json:"appVer,omitempty"`                                 // 产品版本号
	Ip                string                 `protobuf:"bytes,24,opt,name=ip,proto3" json:"ip,omitempty"`
	Country           string                 `protobuf:"bytes,25,opt,name=country,proto3" json:"country,omitempty"`   // 国家
	Province          string                 `protobuf:"bytes,26,opt,name=province,proto3" json:"province,omitempty"` // 省份
	City              string                 `protobuf:"bytes,27,opt,name=city,proto3" json:"city,omitempty"`         // 城市
	Isp               string                 `protobuf:"bytes,28,opt,name=isp,proto3" json:"isp,omitempty"`           // ISP
	CreateTime        int64                  `protobuf:"varint,29,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime        int64                  `protobuf:"varint,30,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version           string                 `protobuf:"bytes,31,opt,name=version,proto3" json:"version,omitempty"`                      // 数据版本
	SessionId         string                 `protobuf:"bytes,32,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                  // 登录凭证
	SessionCreateTime int64                  `protobuf:"varint,33,opt,name=sessionCreateTime,proto3" json:"sessionCreateTime,omitempty"` // 凭证创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccountVo) Reset() {
	*x = AccountVo{}
	mi := &file_gorpc_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountVo) ProtoMessage() {}

func (x *AccountVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountVo.ProtoReflect.Descriptor instead.
func (*AccountVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{80}
}

func (x *AccountVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountVo) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AccountVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *AccountVo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountVo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AccountVo) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *AccountVo) GetAccountPassword() string {
	if x != nil {
		return x.AccountPassword
	}
	return ""
}

func (x *AccountVo) GetWhitelistUser() BoolInt {
	if x != nil {
		return x.WhitelistUser
	}
	return BoolInt_BoolIntUnknown
}

func (x *AccountVo) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *AccountVo) GetAccountType() int64 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *AccountVo) GetRegistMode() int64 {
	if x != nil {
		return x.RegistMode
	}
	return 0
}

func (x *AccountVo) GetActivated() BoolInt {
	if x != nil {
		return x.Activated
	}
	return BoolInt_BoolIntUnknown
}

func (x *AccountVo) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *AccountVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *AccountVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AccountVo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AccountVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *AccountVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *AccountVo) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *AccountVo) GetDeviceOs() string {
	if x != nil {
		return x.DeviceOs
	}
	return ""
}

func (x *AccountVo) GetTimezone() int64 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

func (x *AccountVo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *AccountVo) GetAppVer() int64 {
	if x != nil {
		return x.AppVer
	}
	return 0
}

func (x *AccountVo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AccountVo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AccountVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *AccountVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AccountVo) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *AccountVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *AccountVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AccountVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AccountVo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AccountVo) GetSessionCreateTime() int64 {
	if x != nil {
		return x.SessionCreateTime
	}
	return 0
}

type AccountListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *AccountVo             `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountListReq) Reset() {
	*x = AccountListReq{}
	mi := &file_gorpc_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountListReq) ProtoMessage() {}

func (x *AccountListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountListReq.ProtoReflect.Descriptor instead.
func (*AccountListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{81}
}

func (x *AccountListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AccountListReq) GetVo() *AccountVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AccountListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AccountVo           `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountListResp) Reset() {
	*x = AccountListResp{}
	mi := &file_gorpc_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountListResp) ProtoMessage() {}

func (x *AccountListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountListResp.ProtoReflect.Descriptor instead.
func (*AccountListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{82}
}

func (x *AccountListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AccountListResp) GetList() []*AccountVo {
	if x != nil {
		return x.List
	}
	return nil
}

// AccountDevice
type AccountDeviceVo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId         int64                  `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`                 // 用户ID
	DeviceId          int64                  `protobuf:"varint,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                   // 设备ID
	SessionId         string                 `protobuf:"bytes,4,opt,name=sessionId,proto3" json:"sessionId,omitempty"`                  // 登录凭证
	SessionCreateTime int64                  `protobuf:"varint,5,opt,name=sessionCreateTime,proto3" json:"sessionCreateTime,omitempty"` // 凭证创建时间
	UpdateTime        int64                  `protobuf:"varint,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreateTime        int64                  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccountDeviceVo) Reset() {
	*x = AccountDeviceVo{}
	mi := &file_gorpc_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountDeviceVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDeviceVo) ProtoMessage() {}

func (x *AccountDeviceVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDeviceVo.ProtoReflect.Descriptor instead.
func (*AccountDeviceVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{83}
}

func (x *AccountDeviceVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccountDeviceVo) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AccountDeviceVo) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *AccountDeviceVo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AccountDeviceVo) GetSessionCreateTime() int64 {
	if x != nil {
		return x.SessionCreateTime
	}
	return 0
}

func (x *AccountDeviceVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *AccountDeviceVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AccountDeviceListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *AccountDeviceVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountDeviceListReq) Reset() {
	*x = AccountDeviceListReq{}
	mi := &file_gorpc_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountDeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDeviceListReq) ProtoMessage() {}

func (x *AccountDeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDeviceListReq.ProtoReflect.Descriptor instead.
func (*AccountDeviceListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{84}
}

func (x *AccountDeviceListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AccountDeviceListReq) GetVo() *AccountDeviceVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type AccountDeviceListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*AccountDeviceVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountDeviceListResp) Reset() {
	*x = AccountDeviceListResp{}
	mi := &file_gorpc_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountDeviceListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDeviceListResp) ProtoMessage() {}

func (x *AccountDeviceListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDeviceListResp.ProtoReflect.Descriptor instead.
func (*AccountDeviceListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{85}
}

func (x *AccountDeviceListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AccountDeviceListResp) GetList() []*AccountDeviceVo {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceVo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode     string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	DeviceId        string                 `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	AccountKey      string                 `protobuf:"bytes,4,opt,name=accountKey,proto3" json:"accountKey,omitempty"`
	AccountPassword string                 `protobuf:"bytes,5,opt,name=accountPassword,proto3" json:"accountPassword,omitempty"`
	Platform        string                 `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Channel         string                 `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
	DeviceModel     string                 `protobuf:"bytes,8,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`
	DeviceOs        string                 `protobuf:"bytes,9,opt,name=deviceOs,proto3" json:"deviceOs,omitempty"`
	Timezone        int64                  `protobuf:"varint,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Lang            string                 `protobuf:"bytes,11,opt,name=lang,proto3" json:"lang,omitempty"`
	AppVer          int64                  `protobuf:"varint,12,opt,name=appVer,proto3" json:"appVer,omitempty"`
	Ip              string                 `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	Country         string                 `protobuf:"bytes,14,opt,name=country,proto3" json:"country,omitempty"`
	Province        string                 `protobuf:"bytes,15,opt,name=province,proto3" json:"province,omitempty"`
	City            string                 `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	Isp             string                 `protobuf:"bytes,17,opt,name=isp,proto3" json:"isp,omitempty"`
	CreateTime      int64                  `protobuf:"varint,18,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime      int64                  `protobuf:"varint,19,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Status          int64                  `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`
	Refer           string                 `protobuf:"bytes,21,opt,name=refer,proto3" json:"refer,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeviceVo) Reset() {
	*x = DeviceVo{}
	mi := &file_gorpc_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVo) ProtoMessage() {}

func (x *DeviceVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVo.ProtoReflect.Descriptor instead.
func (*DeviceVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{86}
}

func (x *DeviceVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *DeviceVo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceVo) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *DeviceVo) GetAccountPassword() string {
	if x != nil {
		return x.AccountPassword
	}
	return ""
}

func (x *DeviceVo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeviceVo) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *DeviceVo) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *DeviceVo) GetDeviceOs() string {
	if x != nil {
		return x.DeviceOs
	}
	return ""
}

func (x *DeviceVo) GetTimezone() int64 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

func (x *DeviceVo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *DeviceVo) GetAppVer() int64 {
	if x != nil {
		return x.AppVer
	}
	return 0
}

func (x *DeviceVo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceVo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *DeviceVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *DeviceVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DeviceVo) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *DeviceVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DeviceVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *DeviceVo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceVo) GetRefer() string {
	if x != nil {
		return x.Refer
	}
	return ""
}

type DeviceListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *DeviceVo              `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceListReq) Reset() {
	*x = DeviceListReq{}
	mi := &file_gorpc_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListReq) ProtoMessage() {}

func (x *DeviceListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListReq.ProtoReflect.Descriptor instead.
func (*DeviceListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{87}
}

func (x *DeviceListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceListReq) GetVo() *DeviceVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type DeviceListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*DeviceVo            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceListRes) Reset() {
	*x = DeviceListRes{}
	mi := &file_gorpc_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListRes) ProtoMessage() {}

func (x *DeviceListRes) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListRes.ProtoReflect.Descriptor instead.
func (*DeviceListRes) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{88}
}

func (x *DeviceListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceListRes) GetList() []*DeviceVo {
	if x != nil {
		return x.List
	}
	return nil
}

type UserAppConfigVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId      string                 `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Key           string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Status        Status                 `protobuf:"varint,5,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	CreateTime    int64                  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigVo) Reset() {
	*x = UserAppConfigVo{}
	mi := &file_gorpc_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigVo) ProtoMessage() {}

func (x *UserAppConfigVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigVo.ProtoReflect.Descriptor instead.
func (*UserAppConfigVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{89}
}

func (x *UserAppConfigVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAppConfigVo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *UserAppConfigVo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserAppConfigVo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UserAppConfigVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *UserAppConfigVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserAppConfigVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type UserAppConfigGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *UserAppConfigVo       `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigGetReq) Reset() {
	*x = UserAppConfigGetReq{}
	mi := &file_gorpc_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigGetReq) ProtoMessage() {}

func (x *UserAppConfigGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigGetReq.ProtoReflect.Descriptor instead.
func (*UserAppConfigGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{90}
}

func (x *UserAppConfigGetReq) GetVo() *UserAppConfigVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UserAppConfigListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *UserAppConfigVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigListReq) Reset() {
	*x = UserAppConfigListReq{}
	mi := &file_gorpc_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigListReq) ProtoMessage() {}

func (x *UserAppConfigListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigListReq.ProtoReflect.Descriptor instead.
func (*UserAppConfigListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{91}
}

func (x *UserAppConfigListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UserAppConfigListReq) GetVo() *UserAppConfigVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type UserAppConfigListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UserAppConfigVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAppConfigListRes) Reset() {
	*x = UserAppConfigListRes{}
	mi := &file_gorpc_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAppConfigListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAppConfigListRes) ProtoMessage() {}

func (x *UserAppConfigListRes) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAppConfigListRes.ProtoReflect.Descriptor instead.
func (*UserAppConfigListRes) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{92}
}

func (x *UserAppConfigListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserAppConfigListRes) GetList() []*UserAppConfigVo {
	if x != nil {
		return x.List
	}
	return nil
}

// VpnTag 相关消息定义
type VpnTagVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Sort          int64                  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        Status                 `protobuf:"varint,6,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Remark        string                 `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagVo) Reset() {
	*x = VpnTagVo{}
	mi := &file_gorpc_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagVo) ProtoMessage() {}

func (x *VpnTagVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagVo.ProtoReflect.Descriptor instead.
func (*VpnTagVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{93}
}

func (x *VpnTagVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnTagVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *VpnTagVo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VpnTagVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnTagVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *VpnTagVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *VpnTagVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnTagVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnTagVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type VpnTagGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnTagVo              `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagGetReq) Reset() {
	*x = VpnTagGetReq{}
	mi := &file_gorpc_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagGetReq) ProtoMessage() {}

func (x *VpnTagGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagGetReq.ProtoReflect.Descriptor instead.
func (*VpnTagGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{94}
}

func (x *VpnTagGetReq) GetVo() *VpnTagVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnTagListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnTagVo              `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagListReq) Reset() {
	*x = VpnTagListReq{}
	mi := &file_gorpc_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagListReq) ProtoMessage() {}

func (x *VpnTagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagListReq.ProtoReflect.Descriptor instead.
func (*VpnTagListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{95}
}

func (x *VpnTagListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnTagListReq) GetVo() *VpnTagVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnTagListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnTagVo            `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnTagListResp) Reset() {
	*x = VpnTagListResp{}
	mi := &file_gorpc_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnTagListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnTagListResp) ProtoMessage() {}

func (x *VpnTagListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnTagListResp.ProtoReflect.Descriptor instead.
func (*VpnTagListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{96}
}

func (x *VpnTagListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnTagListResp) GetList() []*VpnTagVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnGroupVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Sort          int64                  `protobuf:"varint,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Status        Status                 `protobuf:"varint,6,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Remark        string                 `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime    int64                  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version       string                 `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupVo) Reset() {
	*x = VpnGroupVo{}
	mi := &file_gorpc_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupVo) ProtoMessage() {}

func (x *VpnGroupVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupVo.ProtoReflect.Descriptor instead.
func (*VpnGroupVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{97}
}

func (x *VpnGroupVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnGroupVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *VpnGroupVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnGroupVo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *VpnGroupVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *VpnGroupVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *VpnGroupVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnGroupVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnGroupVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnGroupVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VpnGroupAddReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnGroupVo            `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	TagIds        []int64                `protobuf:"varint,2,rep,packed,name=tagIds,proto3" json:"tagIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupAddReq) Reset() {
	*x = VpnGroupAddReq{}
	mi := &file_gorpc_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupAddReq) ProtoMessage() {}

func (x *VpnGroupAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupAddReq.ProtoReflect.Descriptor instead.
func (*VpnGroupAddReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{98}
}

func (x *VpnGroupAddReq) GetVo() *VpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnGroupAddReq) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type VpnGroupGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnGroupVo            `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupGetReq) Reset() {
	*x = VpnGroupGetReq{}
	mi := &file_gorpc_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupGetReq) ProtoMessage() {}

func (x *VpnGroupGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupGetReq.ProtoReflect.Descriptor instead.
func (*VpnGroupGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{99}
}

func (x *VpnGroupGetReq) GetVo() *VpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnGroupListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnGroupVo            `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupListReq) Reset() {
	*x = VpnGroupListReq{}
	mi := &file_gorpc_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupListReq) ProtoMessage() {}

func (x *VpnGroupListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupListReq.ProtoReflect.Descriptor instead.
func (*VpnGroupListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{100}
}

func (x *VpnGroupListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnGroupListReq) GetVo() *VpnGroupVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnGroupListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnGroupVo          `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupListResp) Reset() {
	*x = VpnGroupListResp{}
	mi := &file_gorpc_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupListResp) ProtoMessage() {}

func (x *VpnGroupListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupListResp.ProtoReflect.Descriptor instead.
func (*VpnGroupListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{101}
}

func (x *VpnGroupListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnGroupListResp) GetList() []*VpnGroupVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnGroupTagVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId       int64                  `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	TagId         int64                  `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	CreateTime    int64                  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupTagVo) Reset() {
	*x = VpnGroupTagVo{}
	mi := &file_gorpc_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupTagVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupTagVo) ProtoMessage() {}

func (x *VpnGroupTagVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupTagVo.ProtoReflect.Descriptor instead.
func (*VpnGroupTagVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{102}
}

func (x *VpnGroupTagVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnGroupTagVo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *VpnGroupTagVo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *VpnGroupTagVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnGroupTagVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type VpnGroupTagListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnGroupTagVo         `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	GroupIds      []int64                `protobuf:"varint,3,rep,packed,name=groupIds,proto3" json:"groupIds,omitempty"`
	TagIds        []int64                `protobuf:"varint,4,rep,packed,name=tagIds,proto3" json:"tagIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupTagListReq) Reset() {
	*x = VpnGroupTagListReq{}
	mi := &file_gorpc_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupTagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupTagListReq) ProtoMessage() {}

func (x *VpnGroupTagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupTagListReq.ProtoReflect.Descriptor instead.
func (*VpnGroupTagListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{103}
}

func (x *VpnGroupTagListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnGroupTagListReq) GetVo() *VpnGroupTagVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnGroupTagListReq) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *VpnGroupTagListReq) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

type VpnGroupTagListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnGroupTagVo       `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnGroupTagListResp) Reset() {
	*x = VpnGroupTagListResp{}
	mi := &file_gorpc_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnGroupTagListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnGroupTagListResp) ProtoMessage() {}

func (x *VpnGroupTagListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnGroupTagListResp.ProtoReflect.Descriptor instead.
func (*VpnGroupTagListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{104}
}

func (x *VpnGroupTagListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnGroupTagListResp) GetList() []*VpnGroupTagVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnLocationVo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId             int64                  `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Name                string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code                string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Icon                string                 `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Type                int64                  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	DisplayPolicyConfig string                 `protobuf:"bytes,7,opt,name=displayPolicyConfig,proto3" json:"displayPolicyConfig,omitempty"`
	RoutePolicyConfig   string                 `protobuf:"bytes,8,opt,name=routePolicyConfig,proto3" json:"routePolicyConfig,omitempty"`
	Sort                int64                  `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`
	Status              Status                 `protobuf:"varint,10,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Remark              string                 `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime          int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          int64                  `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version             string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VpnLocationVo) Reset() {
	*x = VpnLocationVo{}
	mi := &file_gorpc_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationVo) ProtoMessage() {}

func (x *VpnLocationVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationVo.ProtoReflect.Descriptor instead.
func (*VpnLocationVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{105}
}

func (x *VpnLocationVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnLocationVo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *VpnLocationVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnLocationVo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VpnLocationVo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *VpnLocationVo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *VpnLocationVo) GetDisplayPolicyConfig() string {
	if x != nil {
		return x.DisplayPolicyConfig
	}
	return ""
}

func (x *VpnLocationVo) GetRoutePolicyConfig() string {
	if x != nil {
		return x.RoutePolicyConfig
	}
	return ""
}

func (x *VpnLocationVo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *VpnLocationVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *VpnLocationVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnLocationVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnLocationVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnLocationVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VpnLocationExVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnLocationVo         `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	ProductCode   string                 `protobuf:"bytes,2,opt,name=productCode,proto3" json:"productCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationExVo) Reset() {
	*x = VpnLocationExVo{}
	mi := &file_gorpc_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationExVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationExVo) ProtoMessage() {}

func (x *VpnLocationExVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationExVo.ProtoReflect.Descriptor instead.
func (*VpnLocationExVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{106}
}

func (x *VpnLocationExVo) GetVo() *VpnLocationVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnLocationExVo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

type VpnLocationGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnLocationVo         `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationGetReq) Reset() {
	*x = VpnLocationGetReq{}
	mi := &file_gorpc_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationGetReq) ProtoMessage() {}

func (x *VpnLocationGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationGetReq.ProtoReflect.Descriptor instead.
func (*VpnLocationGetReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{107}
}

func (x *VpnLocationGetReq) GetVo() *VpnLocationVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

type VpnLocationListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnLocationExVo       `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	GroupIds      []int64                `protobuf:"varint,3,rep,packed,name=groupIds,proto3" json:"groupIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationListReq) Reset() {
	*x = VpnLocationListReq{}
	mi := &file_gorpc_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationListReq) ProtoMessage() {}

func (x *VpnLocationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationListReq.ProtoReflect.Descriptor instead.
func (*VpnLocationListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{108}
}

func (x *VpnLocationListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnLocationListReq) GetVo() *VpnLocationExVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnLocationListReq) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type VpnLocationListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnLocationExVo     `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationListResp) Reset() {
	*x = VpnLocationListResp{}
	mi := &file_gorpc_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationListResp) ProtoMessage() {}

func (x *VpnLocationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationListResp.ProtoReflect.Descriptor instead.
func (*VpnLocationListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{109}
}

func (x *VpnLocationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnLocationListResp) GetList() []*VpnLocationExVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnServerVo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InstanceId        int64                  `protobuf:"varint,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	Name              string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ip                string                 `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port              int64                  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	PingPort          int64                  `protobuf:"varint,6,opt,name=pingPort,proto3" json:"pingPort,omitempty"`
	NetConfig         string                 `protobuf:"bytes,7,opt,name=netConfig,proto3" json:"netConfig,omitempty"`
	RoutePolicyConfig string                 `protobuf:"bytes,8,opt,name=routePolicyConfig,proto3" json:"routePolicyConfig,omitempty"`
	ServerInfo        string                 `protobuf:"bytes,9,opt,name=serverInfo,proto3" json:"serverInfo,omitempty"`
	Status            Status                 `protobuf:"varint,10,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	Remark            string                 `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime        int64                  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime        int64                  `protobuf:"varint,13,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Version           string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VpnServerVo) Reset() {
	*x = VpnServerVo{}
	mi := &file_gorpc_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerVo) ProtoMessage() {}

func (x *VpnServerVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerVo.ProtoReflect.Descriptor instead.
func (*VpnServerVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{110}
}

func (x *VpnServerVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnServerVo) GetInstanceId() int64 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *VpnServerVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VpnServerVo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *VpnServerVo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *VpnServerVo) GetPingPort() int64 {
	if x != nil {
		return x.PingPort
	}
	return 0
}

func (x *VpnServerVo) GetNetConfig() string {
	if x != nil {
		return x.NetConfig
	}
	return ""
}

func (x *VpnServerVo) GetRoutePolicyConfig() string {
	if x != nil {
		return x.RoutePolicyConfig
	}
	return ""
}

func (x *VpnServerVo) GetServerInfo() string {
	if x != nil {
		return x.ServerInfo
	}
	return ""
}

func (x *VpnServerVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *VpnServerVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *VpnServerVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnServerVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnServerVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type VpnServerListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnServerVo           `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	ProductCode   string                 `protobuf:"bytes,3,opt,name=productCode,proto3" json:"productCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerListReq) Reset() {
	*x = VpnServerListReq{}
	mi := &file_gorpc_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerListReq) ProtoMessage() {}

func (x *VpnServerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerListReq.ProtoReflect.Descriptor instead.
func (*VpnServerListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{111}
}

func (x *VpnServerListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnServerListReq) GetVo() *VpnServerVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnServerListReq) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

type VpnServerListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnServerVo         `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerListResp) Reset() {
	*x = VpnServerListResp{}
	mi := &file_gorpc_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerListResp) ProtoMessage() {}

func (x *VpnServerListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerListResp.ProtoReflect.Descriptor instead.
func (*VpnServerListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{112}
}

func (x *VpnServerListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnServerListResp) GetList() []*VpnServerVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnServerAddReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vo            *VpnServerVo           `protobuf:"bytes,1,opt,name=vo,proto3" json:"vo,omitempty"`
	LocationIds   []int64                `protobuf:"varint,2,rep,packed,name=locationIds,proto3" json:"locationIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerAddReq) Reset() {
	*x = VpnServerAddReq{}
	mi := &file_gorpc_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerAddReq) ProtoMessage() {}

func (x *VpnServerAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerAddReq.ProtoReflect.Descriptor instead.
func (*VpnServerAddReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{113}
}

func (x *VpnServerAddReq) GetVo() *VpnServerVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnServerAddReq) GetLocationIds() []int64 {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

type VpnServerLocationVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ServerId      int64                  `protobuf:"varint,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	LocationId    int64                  `protobuf:"varint,3,opt,name=locationId,proto3" json:"locationId,omitempty"`
	CreateTime    int64                  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime    int64                  `protobuf:"varint,5,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Status        Status                 `protobuf:"varint,6,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerLocationVo) Reset() {
	*x = VpnServerLocationVo{}
	mi := &file_gorpc_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerLocationVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerLocationVo) ProtoMessage() {}

func (x *VpnServerLocationVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerLocationVo.ProtoReflect.Descriptor instead.
func (*VpnServerLocationVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{114}
}

func (x *VpnServerLocationVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VpnServerLocationVo) GetServerId() int64 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *VpnServerLocationVo) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *VpnServerLocationVo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *VpnServerLocationVo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *VpnServerLocationVo) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

type VpnServerLocationListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Vo            *VpnServerLocationVo   `protobuf:"bytes,2,opt,name=vo,proto3" json:"vo,omitempty"`
	ServerIds     []int64                `protobuf:"varint,3,rep,packed,name=serverIds,proto3" json:"serverIds,omitempty"`
	LocationIds   []int64                `protobuf:"varint,4,rep,packed,name=locationIds,proto3" json:"locationIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerLocationListReq) Reset() {
	*x = VpnServerLocationListReq{}
	mi := &file_gorpc_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerLocationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerLocationListReq) ProtoMessage() {}

func (x *VpnServerLocationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerLocationListReq.ProtoReflect.Descriptor instead.
func (*VpnServerLocationListReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{115}
}

func (x *VpnServerLocationListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnServerLocationListReq) GetVo() *VpnServerLocationVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *VpnServerLocationListReq) GetServerIds() []int64 {
	if x != nil {
		return x.ServerIds
	}
	return nil
}

func (x *VpnServerLocationListReq) GetLocationIds() []int64 {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

type VpnServerLocationListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnServerLocationVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnServerLocationListResp) Reset() {
	*x = VpnServerLocationListResp{}
	mi := &file_gorpc_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnServerLocationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnServerLocationListResp) ProtoMessage() {}

func (x *VpnServerLocationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnServerLocationListResp.ProtoReflect.Descriptor instead.
func (*VpnServerLocationListResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{116}
}

func (x *VpnServerLocationListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnServerLocationListResp) GetList() []*VpnServerLocationVo {
	if x != nil {
		return x.List
	}
	return nil
}

type VpnLocationServerCountVo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocationId    int64                  `protobuf:"varint,1,opt,name=locationId,proto3" json:"locationId,omitempty"`
	ServerCount   int64                  `protobuf:"varint,2,opt,name=serverCount,proto3" json:"serverCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationServerCountVo) Reset() {
	*x = VpnLocationServerCountVo{}
	mi := &file_gorpc_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationServerCountVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationServerCountVo) ProtoMessage() {}

func (x *VpnLocationServerCountVo) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationServerCountVo.ProtoReflect.Descriptor instead.
func (*VpnLocationServerCountVo) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{117}
}

func (x *VpnLocationServerCountVo) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *VpnLocationServerCountVo) GetServerCount() int64 {
	if x != nil {
		return x.ServerCount
	}
	return 0
}

type VpnLocationServerCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Status        Status                 `protobuf:"varint,2,opt,name=status,proto3,enum=gorpc.Status" json:"status,omitempty"`
	ServerIds     []int64                `protobuf:"varint,3,rep,packed,name=serverIds,proto3" json:"serverIds,omitempty"`
	LocationIds   []int64                `protobuf:"varint,4,rep,packed,name=locationIds,proto3" json:"locationIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationServerCountReq) Reset() {
	*x = VpnLocationServerCountReq{}
	mi := &file_gorpc_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationServerCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationServerCountReq) ProtoMessage() {}

func (x *VpnLocationServerCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationServerCountReq.ProtoReflect.Descriptor instead.
func (*VpnLocationServerCountReq) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{118}
}

func (x *VpnLocationServerCountReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *VpnLocationServerCountReq) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

func (x *VpnLocationServerCountReq) GetServerIds() []int64 {
	if x != nil {
		return x.ServerIds
	}
	return nil
}

func (x *VpnLocationServerCountReq) GetLocationIds() []int64 {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

type VpnLocationServerCountResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Total         int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List          []*VpnLocationServerCountVo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnLocationServerCountResp) Reset() {
	*x = VpnLocationServerCountResp{}
	mi := &file_gorpc_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnLocationServerCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnLocationServerCountResp) ProtoMessage() {}

func (x *VpnLocationServerCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnLocationServerCountResp.ProtoReflect.Descriptor instead.
func (*VpnLocationServerCountResp) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{119}
}

func (x *VpnLocationServerCountResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VpnLocationServerCountResp) GetList() []*VpnLocationServerCountVo {
	if x != nil {
		return x.List
	}
	return nil
}

type Page_OrderItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Column        string                 `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Asc           bool                   `protobuf:"varint,2,opt,name=asc,proto3" json:"asc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Page_OrderItem) Reset() {
	*x = Page_OrderItem{}
	mi := &file_gorpc_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Page_OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page_OrderItem) ProtoMessage() {}

func (x *Page_OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_gorpc_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page_OrderItem.ProtoReflect.Descriptor instead.
func (*Page_OrderItem) Descriptor() ([]byte, []int) {
	return file_gorpc_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Page_OrderItem) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Page_OrderItem) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

var File_gorpc_proto protoreflect.FileDescriptor

var file_gorpc_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x49, 0x0a,
	0x15, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0xe6, 0x02,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x1a,
	0x35, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x61, 0x73, 0x63, 0x22, 0x4d, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x43, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x6e, 0x22, 0x2c, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0x17, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5a, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x06, 0x47, 0x61,
	0x6d, 0x65, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6b, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6b, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f,
	0x22, 0x61, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6b, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6b, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x52,
	0x02, 0x76, 0x6f, 0x22, 0x46, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5b, 0x0a,
	0x12, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x54, 0x0a, 0x12, 0x52, 0x65,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xd5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x28,
	0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x7d, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x02, 0x76, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5c, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x06, 0x49, 0x31, 0x38, 0x6e, 0x56, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x03, 0x0a, 0x0c, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x05, 0x0a, 0x12, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70,
	0x69, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x22, 0x95, 0x06, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67,
	0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x72, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x49, 0x0a, 0x16, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5f, 0x0a, 0x18, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x10,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56,
	0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x59, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f,
	0x22, 0x53, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x59,
	0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x53, 0x0a, 0x12, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3c,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x22, 0x32, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xb1, 0x04, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74,
	0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x69,
	0x4c, 0x61, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x69,
	0x4c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x2c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x49, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x02,
	0x76, 0x6f, 0x22, 0x4d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x84, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x75, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6d, 0x75, 0x74, 0x69, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x25, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x57, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x89, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5f, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x58, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x10, 0x41,
	0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x22, 0x51, 0x0a, 0x11, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x06, 0x44, 0x69, 0x63, 0x74,
	0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b,
	0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02,
	0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x4d, 0x0a, 0x0b, 0x44,
	0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x47, 0x0a, 0x0c, 0x44, 0x69,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x62, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x62, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a,
	0x17, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x22, 0x5f, 0x0a, 0x18, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x05, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x69, 0x31, 0x38, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x56, 0x6f, 0x52, 0x05, 0x69, 0x31, 0x38,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4b,
	0x0a, 0x0a, 0x54, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x45, 0x0a, 0x0b, 0x54,
	0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x46, 0x0a, 0x06, 0x54, 0x69, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x09, 0x54, 0x69,
	0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x69, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xed, 0x01, 0x0a,
	0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb9, 0x04, 0x0a,
	0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x64, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x65, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x74, 0x65, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a,
	0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x15, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5b, 0x0a, 0x16, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x73, 0x22, 0x67, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x10,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x04, 0x0a, 0x16,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a,
	0x15, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f,
	0x22, 0x5b, 0x0a, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x87, 0x01,
	0x0a, 0x1b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x1c, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xd6, 0x07, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34,
	0x0a, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x0e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x02,
	0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x4d,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe7, 0x01,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x59, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xb8, 0x04, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x73, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x22, 0x51,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x4a, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcc, 0x01,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x5f, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x58, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x56, 0x70, 0x6e, 0x54, 0x61,
	0x67, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x2f, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x22, 0x51, 0x0a, 0x0d, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x22, 0x4b, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x93, 0x02, 0x0a, 0x0a, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x25,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x55, 0x0a, 0x0f, 0x56, 0x70, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f,
	0x22, 0x4f, 0x0a, 0x10, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x67, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x76,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x13, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x96, 0x03, 0x0a,
	0x0d, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0f, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x56, 0x6f, 0x12, 0x24, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x39, 0x0a, 0x11, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x22, 0x79, 0x0a, 0x12, 0x56,
	0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x13, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x96, 0x03, 0x0a, 0x0b, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x10, 0x56, 0x70, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x02, 0x76, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x52, 0x02, 0x76,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x11, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x0f, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x02, 0x76, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22,
	0xc8, 0x01, 0x0a, 0x13, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x56,
	0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x52, 0x02, 0x76, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x19, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x18, 0x56, 0x70, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x1a, 0x56,
	0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x2a, 0x1f, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x2a, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74,
	0x54, 0x72, 0x75, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e,
	0x74, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x10, 0x02, 0x32, 0x9a, 0x07, 0x0a, 0x0c, 0x47, 0x6f, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x64, 0x64, 0x12, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x6f, 0x12, 0x29, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x1a,
	0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x07, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x6f, 0x12, 0x32, 0x0a, 0x08,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x0e, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x64,
	0x64, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x12, 0x37, 0x0a,
	0x11, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x56,
	0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x52, 0x65,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x12, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x1a, 0x18, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x6f, 0x12, 0x3f, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f,
	0x12, 0x53, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x32, 0xe7, 0x24, 0x0a, 0x0b, 0x47, 0x6f, 0x50, 0x6d, 0x70, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x64, 0x64,
	0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x3f, 0x0a, 0x11,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x2a, 0x0a,
	0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x12,
	0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56,
	0x6f, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x64, 0x64, 0x12,
	0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56,
	0x6f, 0x1a, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x6f, 0x12, 0x2f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x10, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x3c,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0e, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a,
	0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74,
	0x12, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x4b,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12,
	0x3b, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x17,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12,
	0x4d, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x12, 0x12,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x6f, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x12, 0x39, 0x0a, 0x0f, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a, 0x12, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56,
	0x6f, 0x12, 0x28, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x44, 0x65,
	0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x41,
	0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x6f, 0x1a,
	0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x56, 0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65,
	0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x12, 0x19,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x56, 0x6f, 0x12, 0x4e, 0x0a, 0x16, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x56, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x56, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x54,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x12, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69,
	0x70, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70, 0x56,
	0x6f, 0x12, 0x27, 0x0a, 0x09, 0x54, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x12, 0x28, 0x0a, 0x06, 0x54, 0x69,
	0x70, 0x44, 0x65, 0x6c, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x54, 0x69, 0x70, 0x47, 0x65, 0x74, 0x12, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x70, 0x56, 0x6f, 0x12, 0x30, 0x0a, 0x07, 0x54, 0x69,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0d,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x56, 0x6f, 0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f, 0x12, 0x35, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x56, 0x6f,
	0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x12,
	0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x56, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0d, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f,
	0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6b, 0x67, 0x56, 0x6f, 0x12, 0x35, 0x0a, 0x10, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6b, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f, 0x1a, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0d,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6b, 0x67, 0x56, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a,
	0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x64, 0x64, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x1a,
	0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12, 0x41, 0x0a, 0x16, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x1a,
	0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f,
	0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12,
	0x57, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x07, 0x44, 0x69, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x12, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x56, 0x6f, 0x1a, 0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56,
	0x6f, 0x12, 0x29, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x1a, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x07,
	0x44, 0x69, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2b, 0x0a, 0x07, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x0d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x56, 0x6f, 0x12, 0x33,
	0x0a, 0x08, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56,
	0x6f, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12, 0x3d, 0x0a, 0x14, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x11, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x12, 0x0a,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12,
	0x51, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x57, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x49, 0x0a, 0x1a, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65,
	0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x17, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x56, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x22, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x6b, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x11, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x17,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f,
	0x12, 0x3d, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56,
	0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45,
	0x0a, 0x11, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x47, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x1a, 0x17, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x56, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x56, 0x6f, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56,
	0x6f, 0x12, 0x49, 0x0a, 0x1a, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x0c,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x17,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x57, 0x0a, 0x17, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x1a, 0x1d, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x50, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x60, 0x0a, 0x0b, 0x47, 0x6f, 0x53, 0x79, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x0e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xee, 0x09, 0x0a, 0x0c, 0x47, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12, 0x45, 0x0a, 0x13, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f,
	0x12, 0x2c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47,
	0x65, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x6f, 0x12, 0x4d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x12, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x6f, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x6f, 0x12, 0x30, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x12, 0x25, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a,
	0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a,
	0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x0f, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x12, 0x38, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x1a, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x33, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x1a, 0x10, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x26, 0x0a,
	0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x6f, 0x1a, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x12, 0x45, 0x0a, 0x13, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f,
	0x12, 0x2c, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73,
	0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42,
	0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x32, 0xfe, 0x0e, 0x0a, 0x0b, 0x47, 0x6f, 0x56, 0x70, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x09, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x12, 0x0f, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x1a, 0x0f, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x2d,
	0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x1a,
	0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a,
	0x09, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x47, 0x65,
	0x74, 0x12, 0x13, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x70, 0x6e, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x56, 0x70, 0x6e, 0x54, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70,
	0x6e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x37, 0x0a, 0x0b, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x6f, 0x12, 0x35, 0x0a, 0x0e, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0b, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x56,
	0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0e,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x41, 0x64, 0x64, 0x12, 0x14,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x61, 0x67, 0x56, 0x6f, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x37, 0x0a, 0x11, 0x56, 0x70,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x67, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x61, 0x67, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64,
	0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3c, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x47, 0x65,
	0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x56, 0x6f, 0x12, 0x48, 0x0a,
	0x0f, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a,
	0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x37, 0x0a, 0x11, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a,
	0x0a, 0x0e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x12, 0x0a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x56, 0x70,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x48, 0x0a, 0x0f,
	0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x56, 0x6f, 0x12, 0x37, 0x0a, 0x0f, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e,
	0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0c, 0x56,
	0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x12, 0x0a, 0x2e, 0x67, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x12, 0x42, 0x0a,
	0x0d, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4e, 0x0a, 0x14, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x12, 0x43, 0x0a, 0x17, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x12, 0x0a,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x0c, 0x2e, 0x67, 0x6f, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x56, 0x70, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x1a, 0x1a, 0x2e, 0x67,
	0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x56, 0x70, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x16, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x70, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x67, 0x6f, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_gorpc_proto_rawDescOnce sync.Once
	file_gorpc_proto_rawDescData []byte
)

func file_gorpc_proto_rawDescGZIP() []byte {
	file_gorpc_proto_rawDescOnce.Do(func() {
		file_gorpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gorpc_proto_rawDesc), len(file_gorpc_proto_rawDesc)))
	})
	return file_gorpc_proto_rawDescData
}

var file_gorpc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_gorpc_proto_msgTypes = make([]protoimpl.MessageInfo, 121)
var file_gorpc_proto_goTypes = []any{
	(CommonResultCode)(0),                // 0: gorpc.CommonResultCode
	(Status)(0),                          // 1: gorpc.Status
	(BoolInt)(0),                         // 2: gorpc.BoolInt
	(*Empty)(nil),                        // 3: gorpc.Empty
	(*Int64SelectController)(nil),        // 4: gorpc.Int64SelectController
	(*IntSelectController)(nil),          // 5: gorpc.IntSelectController
	(*StringSelectController)(nil),       // 6: gorpc.StringSelectController
	(*Page)(nil),                         // 7: gorpc.Page
	(*CommonResult)(nil),                 // 8: gorpc.CommonResult
	(*BaseReq)(nil),                      // 9: gorpc.BaseReq
	(*DeleteIdResp)(nil),                 // 10: gorpc.DeleteIdResp
	(*Ids)(nil),                          // 11: gorpc.Ids
	(*Request)(nil),                      // 12: gorpc.Request
	(*Response)(nil),                     // 13: gorpc.Response
	(*TransactionOperation)(nil),         // 14: gorpc.TransactionOperation
	(*TransactionReq)(nil),               // 15: gorpc.TransactionReq
	(*GameVo)(nil),                       // 16: gorpc.GameVo
	(*GameReq)(nil),                      // 17: gorpc.GameReq
	(*GameListReq)(nil),                  // 18: gorpc.GameListReq
	(*GameListRes)(nil),                  // 19: gorpc.GameListRes
	(*RelGameRankVo)(nil),                // 20: gorpc.RelGameRankVo
	(*RelGameRankReq)(nil),               // 21: gorpc.RelGameRankReq
	(*RelGameRankListReq)(nil),           // 22: gorpc.RelGameRankListReq
	(*RelGameRankListRes)(nil),           // 23: gorpc.RelGameRankListRes
	(*RelGameVpnGroupVo)(nil),            // 24: gorpc.RelGameVpnGroupVo
	(*RelGameVpnGroupReq)(nil),           // 25: gorpc.RelGameVpnGroupReq
	(*RelGameVpnGroupListReq)(nil),       // 26: gorpc.RelGameVpnGroupListReq
	(*RelGameVpnGroupListRes)(nil),       // 27: gorpc.RelGameVpnGroupListRes
	(*I18NVo)(nil),                       // 28: gorpc.I18nVo
	(*UpgradeResVo)(nil),                 // 29: gorpc.UpgradeResVo
	(*UpgradeResConfigVo)(nil),           // 30: gorpc.UpgradeResConfigVo
	(*UpgradePkgVo)(nil),                 // 31: gorpc.UpgradePkgVo
	(*UpgradeResConfigGetReq)(nil),       // 32: gorpc.UpgradeResConfigGetReq
	(*UpgradeResConfigListReq)(nil),      // 33: gorpc.UpgradeResConfigListReq
	(*UpgradeResConfigListResp)(nil),     // 34: gorpc.UpgradeResConfigListResp
	(*UpgradePkgGetReq)(nil),             // 35: gorpc.UpgradePkgGetReq
	(*UpgradePkgListReq)(nil),            // 36: gorpc.UpgradePkgListReq
	(*UpgradePkgListResp)(nil),           // 37: gorpc.UpgradePkgListResp
	(*UpgradeResGetReq)(nil),             // 38: gorpc.UpgradeResGetReq
	(*UpgradeResListReq)(nil),            // 39: gorpc.UpgradeResListReq
	(*UpgradeResListResp)(nil),           // 40: gorpc.UpgradeResListResp
	(*ResourceDelReq)(nil),               // 41: gorpc.ResourceDelReq
	(*ConfigGetReq)(nil),                 // 42: gorpc.ConfigGetReq
	(*GlobalParamVo)(nil),                // 43: gorpc.GlobalParamVo
	(*GlobalParamListReq)(nil),           // 44: gorpc.GlobalParamListReq
	(*GlobalParamListResp)(nil),          // 45: gorpc.GlobalParamListResp
	(*ProductVo)(nil),                    // 46: gorpc.ProductVo
	(*ProductListReq)(nil),               // 47: gorpc.ProductListReq
	(*ProductListResp)(nil),              // 48: gorpc.ProductListResp
	(*ProductParamVo)(nil),               // 49: gorpc.ProductParamVo
	(*ProductParamListReq)(nil),          // 50: gorpc.ProductParamListReq
	(*ProductParamListResp)(nil),         // 51: gorpc.ProductParamListResp
	(*ProductActionVo)(nil),              // 52: gorpc.ProductActionVo
	(*ProductActionReq)(nil),             // 53: gorpc.ProductActionReq
	(*ProductActionListReq)(nil),         // 54: gorpc.ProductActionListReq
	(*ProductActionListRes)(nil),         // 55: gorpc.ProductActionListRes
	(*AreaParamVo)(nil),                  // 56: gorpc.AreaParamVo
	(*AreaParamListReq)(nil),             // 57: gorpc.AreaParamListReq
	(*AreaParamListResp)(nil),            // 58: gorpc.AreaParamListResp
	(*DictVo)(nil),                       // 59: gorpc.DictVo
	(*DictGetReq)(nil),                   // 60: gorpc.DictGetReq
	(*DictListReq)(nil),                  // 61: gorpc.DictListReq
	(*DictListResp)(nil),                 // 62: gorpc.DictListResp
	(*NationalLanguageVo)(nil),           // 63: gorpc.NationalLanguageVo
	(*NationalLanguageListReq)(nil),      // 64: gorpc.NationalLanguageListReq
	(*NationalLanguageListResp)(nil),     // 65: gorpc.NationalLanguageListResp
	(*TipVo)(nil),                        // 66: gorpc.TipVo
	(*TipListReq)(nil),                   // 67: gorpc.TipListReq
	(*TipListResp)(nil),                  // 68: gorpc.TipListResp
	(*TipKey)(nil),                       // 69: gorpc.TipKey
	(*TipDelReq)(nil),                    // 70: gorpc.TipDelReq
	(*UpgradePkgPlanVo)(nil),             // 71: gorpc.UpgradePkgPlanVo
	(*UpgradePkgPlanDetailVo)(nil),       // 72: gorpc.UpgradePkgPlanDetailVo
	(*UpgradePkgPlanListReq)(nil),        // 73: gorpc.UpgradePkgPlanListReq
	(*UpgradePkgPlanListResp)(nil),       // 74: gorpc.UpgradePkgPlanListResp
	(*UpgradePkgPlanDetailListReq)(nil),  // 75: gorpc.UpgradePkgPlanDetailListReq
	(*UpgradePkgPlanDetailListResp)(nil), // 76: gorpc.UpgradePkgPlanDetailListResp
	(*UpgradeResPlanVo)(nil),             // 77: gorpc.UpgradeResPlanVo
	(*UpgradeResPlanDetailVo)(nil),       // 78: gorpc.UpgradeResPlanDetailVo
	(*UpgradeResPlanListReq)(nil),        // 79: gorpc.UpgradeResPlanListReq
	(*UpgradeResPlanListResp)(nil),       // 80: gorpc.UpgradeResPlanListResp
	(*UpgradeResPlanDetailListReq)(nil),  // 81: gorpc.UpgradeResPlanDetailListReq
	(*UpgradeResPlanDetailListResp)(nil), // 82: gorpc.UpgradeResPlanDetailListResp
	(*AccountVo)(nil),                    // 83: gorpc.AccountVo
	(*AccountListReq)(nil),               // 84: gorpc.AccountListReq
	(*AccountListResp)(nil),              // 85: gorpc.AccountListResp
	(*AccountDeviceVo)(nil),              // 86: gorpc.AccountDeviceVo
	(*AccountDeviceListReq)(nil),         // 87: gorpc.AccountDeviceListReq
	(*AccountDeviceListResp)(nil),        // 88: gorpc.AccountDeviceListResp
	(*DeviceVo)(nil),                     // 89: gorpc.DeviceVo
	(*DeviceListReq)(nil),                // 90: gorpc.DeviceListReq
	(*DeviceListRes)(nil),                // 91: gorpc.DeviceListRes
	(*UserAppConfigVo)(nil),              // 92: gorpc.UserAppConfigVo
	(*UserAppConfigGetReq)(nil),          // 93: gorpc.UserAppConfigGetReq
	(*UserAppConfigListReq)(nil),         // 94: gorpc.UserAppConfigListReq
	(*UserAppConfigListRes)(nil),         // 95: gorpc.UserAppConfigListRes
	(*VpnTagVo)(nil),                     // 96: gorpc.VpnTagVo
	(*VpnTagGetReq)(nil),                 // 97: gorpc.VpnTagGetReq
	(*VpnTagListReq)(nil),                // 98: gorpc.VpnTagListReq
	(*VpnTagListResp)(nil),               // 99: gorpc.VpnTagListResp
	(*VpnGroupVo)(nil),                   // 100: gorpc.VpnGroupVo
	(*VpnGroupAddReq)(nil),               // 101: gorpc.VpnGroupAddReq
	(*VpnGroupGetReq)(nil),               // 102: gorpc.VpnGroupGetReq
	(*VpnGroupListReq)(nil),              // 103: gorpc.VpnGroupListReq
	(*VpnGroupListResp)(nil),             // 104: gorpc.VpnGroupListResp
	(*VpnGroupTagVo)(nil),                // 105: gorpc.VpnGroupTagVo
	(*VpnGroupTagListReq)(nil),           // 106: gorpc.VpnGroupTagListReq
	(*VpnGroupTagListResp)(nil),          // 107: gorpc.VpnGroupTagListResp
	(*VpnLocationVo)(nil),                // 108: gorpc.VpnLocationVo
	(*VpnLocationExVo)(nil),              // 109: gorpc.VpnLocationExVo
	(*VpnLocationGetReq)(nil),            // 110: gorpc.VpnLocationGetReq
	(*VpnLocationListReq)(nil),           // 111: gorpc.VpnLocationListReq
	(*VpnLocationListResp)(nil),          // 112: gorpc.VpnLocationListResp
	(*VpnServerVo)(nil),                  // 113: gorpc.VpnServerVo
	(*VpnServerListReq)(nil),             // 114: gorpc.VpnServerListReq
	(*VpnServerListResp)(nil),            // 115: gorpc.VpnServerListResp
	(*VpnServerAddReq)(nil),              // 116: gorpc.VpnServerAddReq
	(*VpnServerLocationVo)(nil),          // 117: gorpc.VpnServerLocationVo
	(*VpnServerLocationListReq)(nil),     // 118: gorpc.VpnServerLocationListReq
	(*VpnServerLocationListResp)(nil),    // 119: gorpc.VpnServerLocationListResp
	(*VpnLocationServerCountVo)(nil),     // 120: gorpc.VpnLocationServerCountVo
	(*VpnLocationServerCountReq)(nil),    // 121: gorpc.VpnLocationServerCountReq
	(*VpnLocationServerCountResp)(nil),   // 122: gorpc.VpnLocationServerCountResp
	(*Page_OrderItem)(nil),               // 123: gorpc.Page.OrderItem
}
var file_gorpc_proto_depIdxs = []int32{
	123, // 0: gorpc.Page.sortBy:type_name -> gorpc.Page.OrderItem
	0,   // 1: gorpc.CommonResult.code:type_name -> gorpc.CommonResultCode
	14,  // 2: gorpc.TransactionReq.transactions:type_name -> gorpc.TransactionOperation
	16,  // 3: gorpc.GameReq.vo:type_name -> gorpc.GameVo
	7,   // 4: gorpc.GameListReq.page:type_name -> gorpc.Page
	16,  // 5: gorpc.GameListReq.vo:type_name -> gorpc.GameVo
	16,  // 6: gorpc.GameListRes.list:type_name -> gorpc.GameVo
	20,  // 7: gorpc.RelGameRankReq.vo:type_name -> gorpc.RelGameRankVo
	7,   // 8: gorpc.RelGameRankListReq.page:type_name -> gorpc.Page
	20,  // 9: gorpc.RelGameRankListReq.vo:type_name -> gorpc.RelGameRankVo
	20,  // 10: gorpc.RelGameRankListRes.list:type_name -> gorpc.RelGameRankVo
	24,  // 11: gorpc.RelGameVpnGroupReq.vo:type_name -> gorpc.RelGameVpnGroupVo
	7,   // 12: gorpc.RelGameVpnGroupListReq.page:type_name -> gorpc.Page
	24,  // 13: gorpc.RelGameVpnGroupListReq.vo:type_name -> gorpc.RelGameVpnGroupVo
	24,  // 14: gorpc.RelGameVpnGroupListRes.list:type_name -> gorpc.RelGameVpnGroupVo
	1,   // 15: gorpc.UpgradeResVo.status:type_name -> gorpc.Status
	1,   // 16: gorpc.UpgradeResConfigVo.status:type_name -> gorpc.Status
	1,   // 17: gorpc.UpgradePkgVo.status:type_name -> gorpc.Status
	7,   // 18: gorpc.UpgradeResConfigGetReq.page:type_name -> gorpc.Page
	7,   // 19: gorpc.UpgradeResConfigListReq.page:type_name -> gorpc.Page
	30,  // 20: gorpc.UpgradeResConfigListReq.vo:type_name -> gorpc.UpgradeResConfigVo
	30,  // 21: gorpc.UpgradeResConfigListResp.list:type_name -> gorpc.UpgradeResConfigVo
	31,  // 22: gorpc.UpgradePkgGetReq.vo:type_name -> gorpc.UpgradePkgVo
	7,   // 23: gorpc.UpgradePkgListReq.page:type_name -> gorpc.Page
	31,  // 24: gorpc.UpgradePkgListReq.vo:type_name -> gorpc.UpgradePkgVo
	31,  // 25: gorpc.UpgradePkgListResp.list:type_name -> gorpc.UpgradePkgVo
	29,  // 26: gorpc.UpgradeResGetReq.vo:type_name -> gorpc.UpgradeResVo
	7,   // 27: gorpc.UpgradeResListReq.page:type_name -> gorpc.Page
	29,  // 28: gorpc.UpgradeResListReq.vo:type_name -> gorpc.UpgradeResVo
	29,  // 29: gorpc.UpgradeResListResp.list:type_name -> gorpc.UpgradeResVo
	2,   // 30: gorpc.GlobalParamVo.editable:type_name -> gorpc.BoolInt
	2,   // 31: gorpc.GlobalParamVo.nullable:type_name -> gorpc.BoolInt
	2,   // 32: gorpc.GlobalParamVo.hidden:type_name -> gorpc.BoolInt
	2,   // 33: gorpc.GlobalParamVo.mutiLang:type_name -> gorpc.BoolInt
	2,   // 34: gorpc.GlobalParamVo.apiExport:type_name -> gorpc.BoolInt
	7,   // 35: gorpc.GlobalParamListReq.page:type_name -> gorpc.Page
	43,  // 36: gorpc.GlobalParamListReq.vo:type_name -> gorpc.GlobalParamVo
	43,  // 37: gorpc.GlobalParamListResp.list:type_name -> gorpc.GlobalParamVo
	1,   // 38: gorpc.ProductVo.status:type_name -> gorpc.Status
	7,   // 39: gorpc.ProductListReq.page:type_name -> gorpc.Page
	46,  // 40: gorpc.ProductListReq.vo:type_name -> gorpc.ProductVo
	46,  // 41: gorpc.ProductListResp.list:type_name -> gorpc.ProductVo
	49,  // 42: gorpc.ProductParamListReq.vo:type_name -> gorpc.ProductParamVo
	49,  // 43: gorpc.ProductParamListResp.list:type_name -> gorpc.ProductParamVo
	52,  // 44: gorpc.ProductActionReq.vo:type_name -> gorpc.ProductActionVo
	7,   // 45: gorpc.ProductActionListReq.page:type_name -> gorpc.Page
	52,  // 46: gorpc.ProductActionListReq.vo:type_name -> gorpc.ProductActionVo
	52,  // 47: gorpc.ProductActionListRes.list:type_name -> gorpc.ProductActionVo
	1,   // 48: gorpc.AreaParamVo.status:type_name -> gorpc.Status
	7,   // 49: gorpc.AreaParamListReq.page:type_name -> gorpc.Page
	56,  // 50: gorpc.AreaParamListReq.vo:type_name -> gorpc.AreaParamVo
	56,  // 51: gorpc.AreaParamListResp.list:type_name -> gorpc.AreaParamVo
	59,  // 52: gorpc.DictGetReq.vo:type_name -> gorpc.DictVo
	7,   // 53: gorpc.DictListReq.page:type_name -> gorpc.Page
	59,  // 54: gorpc.DictListReq.vo:type_name -> gorpc.DictVo
	59,  // 55: gorpc.DictListResp.list:type_name -> gorpc.DictVo
	1,   // 56: gorpc.NationalLanguageVo.status:type_name -> gorpc.Status
	7,   // 57: gorpc.NationalLanguageListReq.page:type_name -> gorpc.Page
	63,  // 58: gorpc.NationalLanguageListReq.vo:type_name -> gorpc.NationalLanguageVo
	63,  // 59: gorpc.NationalLanguageListResp.list:type_name -> gorpc.NationalLanguageVo
	28,  // 60: gorpc.TipVo.i18ns:type_name -> gorpc.I18nVo
	7,   // 61: gorpc.TipListReq.page:type_name -> gorpc.Page
	66,  // 62: gorpc.TipListReq.vo:type_name -> gorpc.TipVo
	66,  // 63: gorpc.TipListResp.list:type_name -> gorpc.TipVo
	69,  // 64: gorpc.TipDelReq.keys:type_name -> gorpc.TipKey
	1,   // 65: gorpc.UpgradePkgPlanVo.status:type_name -> gorpc.Status
	1,   // 66: gorpc.UpgradePkgPlanDetailVo.status:type_name -> gorpc.Status
	7,   // 67: gorpc.UpgradePkgPlanListReq.page:type_name -> gorpc.Page
	71,  // 68: gorpc.UpgradePkgPlanListReq.vo:type_name -> gorpc.UpgradePkgPlanVo
	71,  // 69: gorpc.UpgradePkgPlanListResp.list:type_name -> gorpc.UpgradePkgPlanVo
	7,   // 70: gorpc.UpgradePkgPlanDetailListReq.page:type_name -> gorpc.Page
	72,  // 71: gorpc.UpgradePkgPlanDetailListReq.vo:type_name -> gorpc.UpgradePkgPlanDetailVo
	72,  // 72: gorpc.UpgradePkgPlanDetailListResp.list:type_name -> gorpc.UpgradePkgPlanDetailVo
	1,   // 73: gorpc.UpgradeResPlanVo.status:type_name -> gorpc.Status
	1,   // 74: gorpc.UpgradeResPlanDetailVo.status:type_name -> gorpc.Status
	7,   // 75: gorpc.UpgradeResPlanListReq.page:type_name -> gorpc.Page
	77,  // 76: gorpc.UpgradeResPlanListReq.vo:type_name -> gorpc.UpgradeResPlanVo
	77,  // 77: gorpc.UpgradeResPlanListResp.list:type_name -> gorpc.UpgradeResPlanVo
	7,   // 78: gorpc.UpgradeResPlanDetailListReq.page:type_name -> gorpc.Page
	78,  // 79: gorpc.UpgradeResPlanDetailListReq.vo:type_name -> gorpc.UpgradeResPlanDetailVo
	78,  // 80: gorpc.UpgradeResPlanDetailListResp.list:type_name -> gorpc.UpgradeResPlanDetailVo
	2,   // 81: gorpc.AccountVo.whitelistUser:type_name -> gorpc.BoolInt
	2,   // 82: gorpc.AccountVo.activated:type_name -> gorpc.BoolInt
	1,   // 83: gorpc.AccountVo.status:type_name -> gorpc.Status
	7,   // 84: gorpc.AccountListReq.page:type_name -> gorpc.Page
	83,  // 85: gorpc.AccountListReq.vo:type_name -> gorpc.AccountVo
	83,  // 86: gorpc.AccountListResp.list:type_name -> gorpc.AccountVo
	7,   // 87: gorpc.AccountDeviceListReq.page:type_name -> gorpc.Page
	86,  // 88: gorpc.AccountDeviceListReq.vo:type_name -> gorpc.AccountDeviceVo
	86,  // 89: gorpc.AccountDeviceListResp.list:type_name -> gorpc.AccountDeviceVo
	7,   // 90: gorpc.DeviceListReq.page:type_name -> gorpc.Page
	89,  // 91: gorpc.DeviceListReq.vo:type_name -> gorpc.DeviceVo
	89,  // 92: gorpc.DeviceListRes.list:type_name -> gorpc.DeviceVo
	1,   // 93: gorpc.UserAppConfigVo.status:type_name -> gorpc.Status
	92,  // 94: gorpc.UserAppConfigGetReq.vo:type_name -> gorpc.UserAppConfigVo
	7,   // 95: gorpc.UserAppConfigListReq.page:type_name -> gorpc.Page
	92,  // 96: gorpc.UserAppConfigListReq.vo:type_name -> gorpc.UserAppConfigVo
	92,  // 97: gorpc.UserAppConfigListRes.list:type_name -> gorpc.UserAppConfigVo
	1,   // 98: gorpc.VpnTagVo.status:type_name -> gorpc.Status
	96,  // 99: gorpc.VpnTagGetReq.vo:type_name -> gorpc.VpnTagVo
	7,   // 100: gorpc.VpnTagListReq.page:type_name -> gorpc.Page
	96,  // 101: gorpc.VpnTagListReq.vo:type_name -> gorpc.VpnTagVo
	96,  // 102: gorpc.VpnTagListResp.list:type_name -> gorpc.VpnTagVo
	1,   // 103: gorpc.VpnGroupVo.status:type_name -> gorpc.Status
	100, // 104: gorpc.VpnGroupAddReq.vo:type_name -> gorpc.VpnGroupVo
	100, // 105: gorpc.VpnGroupGetReq.vo:type_name -> gorpc.VpnGroupVo
	7,   // 106: gorpc.VpnGroupListReq.page:type_name -> gorpc.Page
	100, // 107: gorpc.VpnGroupListReq.vo:type_name -> gorpc.VpnGroupVo
	100, // 108: gorpc.VpnGroupListResp.list:type_name -> gorpc.VpnGroupVo
	7,   // 109: gorpc.VpnGroupTagListReq.page:type_name -> gorpc.Page
	105, // 110: gorpc.VpnGroupTagListReq.vo:type_name -> gorpc.VpnGroupTagVo
	105, // 111: gorpc.VpnGroupTagListResp.list:type_name -> gorpc.VpnGroupTagVo
	1,   // 112: gorpc.VpnLocationVo.status:type_name -> gorpc.Status
	108, // 113: gorpc.VpnLocationExVo.vo:type_name -> gorpc.VpnLocationVo
	108, // 114: gorpc.VpnLocationGetReq.vo:type_name -> gorpc.VpnLocationVo
	7,   // 115: gorpc.VpnLocationListReq.page:type_name -> gorpc.Page
	109, // 116: gorpc.VpnLocationListReq.vo:type_name -> gorpc.VpnLocationExVo
	109, // 117: gorpc.VpnLocationListResp.list:type_name -> gorpc.VpnLocationExVo
	1,   // 118: gorpc.VpnServerVo.status:type_name -> gorpc.Status
	7,   // 119: gorpc.VpnServerListReq.page:type_name -> gorpc.Page
	113, // 120: gorpc.VpnServerListReq.vo:type_name -> gorpc.VpnServerVo
	113, // 121: gorpc.VpnServerListResp.list:type_name -> gorpc.VpnServerVo
	113, // 122: gorpc.VpnServerAddReq.vo:type_name -> gorpc.VpnServerVo
	1,   // 123: gorpc.VpnServerLocationVo.status:type_name -> gorpc.Status
	7,   // 124: gorpc.VpnServerLocationListReq.page:type_name -> gorpc.Page
	117, // 125: gorpc.VpnServerLocationListReq.vo:type_name -> gorpc.VpnServerLocationVo
	117, // 126: gorpc.VpnServerLocationListResp.list:type_name -> gorpc.VpnServerLocationVo
	7,   // 127: gorpc.VpnLocationServerCountReq.page:type_name -> gorpc.Page
	1,   // 128: gorpc.VpnLocationServerCountReq.status:type_name -> gorpc.Status
	120, // 129: gorpc.VpnLocationServerCountResp.list:type_name -> gorpc.VpnLocationServerCountVo
	16,  // 130: gorpc.GoGameClient.GameAdd:input_type -> gorpc.GameVo
	16,  // 131: gorpc.GoGameClient.GameUpdate:input_type -> gorpc.GameVo
	11,  // 132: gorpc.GoGameClient.GameDel:input_type -> gorpc.Ids
	17,  // 133: gorpc.GoGameClient.GameGet:input_type -> gorpc.GameReq
	18,  // 134: gorpc.GoGameClient.GameList:input_type -> gorpc.GameListReq
	12,  // 135: gorpc.GoGameClient.GameAll:input_type -> gorpc.Request
	20,  // 136: gorpc.GoGameClient.RelGameRankAdd:input_type -> gorpc.RelGameRankVo
	20,  // 137: gorpc.GoGameClient.RelGameRankUpdate:input_type -> gorpc.RelGameRankVo
	11,  // 138: gorpc.GoGameClient.RelGameRankDel:input_type -> gorpc.Ids
	21,  // 139: gorpc.GoGameClient.RelGameRankGet:input_type -> gorpc.RelGameRankReq
	22,  // 140: gorpc.GoGameClient.RelGameRankList:input_type -> gorpc.RelGameRankListReq
	24,  // 141: gorpc.GoGameClient.RelGameVpnGroupAdd:input_type -> gorpc.RelGameVpnGroupVo
	24,  // 142: gorpc.GoGameClient.RelGameVpnGroupUpdate:input_type -> gorpc.RelGameVpnGroupVo
	11,  // 143: gorpc.GoGameClient.RelGameVpnGroupDel:input_type -> gorpc.Ids
	25,  // 144: gorpc.GoGameClient.RelGameVpnGroupGet:input_type -> gorpc.RelGameVpnGroupReq
	26,  // 145: gorpc.GoGameClient.RelGameVpnGroupList:input_type -> gorpc.RelGameVpnGroupListReq
	12,  // 146: gorpc.GoPmpClient.Ping:input_type -> gorpc.Request
	43,  // 147: gorpc.GoPmpClient.GlobalParamAdd:input_type -> gorpc.GlobalParamVo
	43,  // 148: gorpc.GoPmpClient.GlobalParamUpdate:input_type -> gorpc.GlobalParamVo
	11,  // 149: gorpc.GoPmpClient.GlobalParamDel:input_type -> gorpc.Ids
	43,  // 150: gorpc.GoPmpClient.GlobalParamGet:input_type -> gorpc.GlobalParamVo
	44,  // 151: gorpc.GoPmpClient.GlobalParamList:input_type -> gorpc.GlobalParamListReq
	46,  // 152: gorpc.GoPmpClient.ProductAdd:input_type -> gorpc.ProductVo
	46,  // 153: gorpc.GoPmpClient.ProductUpdate:input_type -> gorpc.ProductVo
	11,  // 154: gorpc.GoPmpClient.ProductDel:input_type -> gorpc.Ids
	46,  // 155: gorpc.GoPmpClient.ProductGet:input_type -> gorpc.ProductVo
	47,  // 156: gorpc.GoPmpClient.ProductList:input_type -> gorpc.ProductListReq
	12,  // 157: gorpc.GoPmpClient.ProductAll:input_type -> gorpc.Request
	49,  // 158: gorpc.GoPmpClient.ProductParamUpdate:input_type -> gorpc.ProductParamVo
	49,  // 159: gorpc.GoPmpClient.ProductParamGet:input_type -> gorpc.ProductParamVo
	50,  // 160: gorpc.GoPmpClient.ProductParamList:input_type -> gorpc.ProductParamListReq
	52,  // 161: gorpc.GoPmpClient.ProductActionAdd:input_type -> gorpc.ProductActionVo
	52,  // 162: gorpc.GoPmpClient.ProductActionUpdate:input_type -> gorpc.ProductActionVo
	11,  // 163: gorpc.GoPmpClient.ProductActionDel:input_type -> gorpc.Ids
	53,  // 164: gorpc.GoPmpClient.ProductActionGet:input_type -> gorpc.ProductActionReq
	54,  // 165: gorpc.GoPmpClient.ProductActionList:input_type -> gorpc.ProductActionListReq
	56,  // 166: gorpc.GoPmpClient.AreaParamAdd:input_type -> gorpc.AreaParamVo
	56,  // 167: gorpc.GoPmpClient.AreaParamUpdate:input_type -> gorpc.AreaParamVo
	11,  // 168: gorpc.GoPmpClient.AreaParamDel:input_type -> gorpc.Ids
	56,  // 169: gorpc.GoPmpClient.AreaParamGet:input_type -> gorpc.AreaParamVo
	57,  // 170: gorpc.GoPmpClient.AreaParamList:input_type -> gorpc.AreaParamListReq
	63,  // 171: gorpc.GoPmpClient.NationalLanguageAdd:input_type -> gorpc.NationalLanguageVo
	63,  // 172: gorpc.GoPmpClient.NationalLanguageUpdate:input_type -> gorpc.NationalLanguageVo
	11,  // 173: gorpc.GoPmpClient.NationalLanguageDel:input_type -> gorpc.Ids
	63,  // 174: gorpc.GoPmpClient.NationalLanguageGet:input_type -> gorpc.NationalLanguageVo
	64,  // 175: gorpc.GoPmpClient.NationalLanguageList:input_type -> gorpc.NationalLanguageListReq
	66,  // 176: gorpc.GoPmpClient.TipAdd:input_type -> gorpc.TipVo
	66,  // 177: gorpc.GoPmpClient.TipUpdate:input_type -> gorpc.TipVo
	70,  // 178: gorpc.GoPmpClient.TipDel:input_type -> gorpc.TipDelReq
	66,  // 179: gorpc.GoPmpClient.TipGet:input_type -> gorpc.TipVo
	67,  // 180: gorpc.GoPmpClient.TipList:input_type -> gorpc.TipListReq
	29,  // 181: gorpc.GoPmpClient.UpgradeResAdd:input_type -> gorpc.UpgradeResVo
	29,  // 182: gorpc.GoPmpClient.UpgradeResUpdate:input_type -> gorpc.UpgradeResVo
	41,  // 183: gorpc.GoPmpClient.UpgradeResDel:input_type -> gorpc.ResourceDelReq
	38,  // 184: gorpc.GoPmpClient.UpgradeResGet:input_type -> gorpc.UpgradeResGetReq
	39,  // 185: gorpc.GoPmpClient.UpgradeResList:input_type -> gorpc.UpgradeResListReq
	31,  // 186: gorpc.GoPmpClient.UpgradePkgAdd:input_type -> gorpc.UpgradePkgVo
	31,  // 187: gorpc.GoPmpClient.UpgradePkgUpdate:input_type -> gorpc.UpgradePkgVo
	11,  // 188: gorpc.GoPmpClient.UpgradePkgDel:input_type -> gorpc.Ids
	35,  // 189: gorpc.GoPmpClient.UpgradePkgGet:input_type -> gorpc.UpgradePkgGetReq
	36,  // 190: gorpc.GoPmpClient.UpgradePkgList:input_type -> gorpc.UpgradePkgListReq
	30,  // 191: gorpc.GoPmpClient.UpgradeResConfigAdd:input_type -> gorpc.UpgradeResConfigVo
	30,  // 192: gorpc.GoPmpClient.UpgradeResConfigUpdate:input_type -> gorpc.UpgradeResConfigVo
	11,  // 193: gorpc.GoPmpClient.UpgradeResConfigDel:input_type -> gorpc.Ids
	32,  // 194: gorpc.GoPmpClient.UpgradeResConfigGet:input_type -> gorpc.UpgradeResConfigGetReq
	33,  // 195: gorpc.GoPmpClient.UpgradeResConfigList:input_type -> gorpc.UpgradeResConfigListReq
	59,  // 196: gorpc.GoPmpClient.DictAdd:input_type -> gorpc.DictVo
	59,  // 197: gorpc.GoPmpClient.DictUpdate:input_type -> gorpc.DictVo
	11,  // 198: gorpc.GoPmpClient.DictDel:input_type -> gorpc.Ids
	60,  // 199: gorpc.GoPmpClient.DictGet:input_type -> gorpc.DictGetReq
	61,  // 200: gorpc.GoPmpClient.DictList:input_type -> gorpc.DictListReq
	71,  // 201: gorpc.GoPmpClient.UpgradePkgPlanAdd:input_type -> gorpc.UpgradePkgPlanVo
	71,  // 202: gorpc.GoPmpClient.UpgradePkgPlanUpdate:input_type -> gorpc.UpgradePkgPlanVo
	11,  // 203: gorpc.GoPmpClient.UpgradePkgPlanDel:input_type -> gorpc.Ids
	71,  // 204: gorpc.GoPmpClient.UpgradePkgPlanGet:input_type -> gorpc.UpgradePkgPlanVo
	73,  // 205: gorpc.GoPmpClient.UpgradePkgPlanList:input_type -> gorpc.UpgradePkgPlanListReq
	72,  // 206: gorpc.GoPmpClient.UpgradePkgPlanDetailAdd:input_type -> gorpc.UpgradePkgPlanDetailVo
	72,  // 207: gorpc.GoPmpClient.UpgradePkgPlanDetailUpdate:input_type -> gorpc.UpgradePkgPlanDetailVo
	11,  // 208: gorpc.GoPmpClient.UpgradePkgPlanDetailDel:input_type -> gorpc.Ids
	72,  // 209: gorpc.GoPmpClient.UpgradePkgPlanDetailGet:input_type -> gorpc.UpgradePkgPlanDetailVo
	75,  // 210: gorpc.GoPmpClient.UpgradePkgPlanDetailList:input_type -> gorpc.UpgradePkgPlanDetailListReq
	77,  // 211: gorpc.GoPmpClient.UpgradeResPlanAdd:input_type -> gorpc.UpgradeResPlanVo
	77,  // 212: gorpc.GoPmpClient.UpgradeResPlanUpdate:input_type -> gorpc.UpgradeResPlanVo
	11,  // 213: gorpc.GoPmpClient.UpgradeResPlanDel:input_type -> gorpc.Ids
	77,  // 214: gorpc.GoPmpClient.UpgradeResPlanGet:input_type -> gorpc.UpgradeResPlanVo
	79,  // 215: gorpc.GoPmpClient.UpgradeResPlanList:input_type -> gorpc.UpgradeResPlanListReq
	78,  // 216: gorpc.GoPmpClient.UpgradeResPlanDetailAdd:input_type -> gorpc.UpgradeResPlanDetailVo
	78,  // 217: gorpc.GoPmpClient.UpgradeResPlanDetailUpdate:input_type -> gorpc.UpgradeResPlanDetailVo
	11,  // 218: gorpc.GoPmpClient.UpgradeResPlanDetailDel:input_type -> gorpc.Ids
	78,  // 219: gorpc.GoPmpClient.UpgradeResPlanDetailGet:input_type -> gorpc.UpgradeResPlanDetailVo
	81,  // 220: gorpc.GoPmpClient.UpgradeResPlanDetailList:input_type -> gorpc.UpgradeResPlanDetailListReq
	12,  // 221: gorpc.GoSysClient.Ping:input_type -> gorpc.Request
	9,   // 222: gorpc.GoSysClient.Login:input_type -> gorpc.BaseReq
	12,  // 223: gorpc.GoUserClient.Ping:input_type -> gorpc.Request
	9,   // 224: gorpc.GoUserClient.Login:input_type -> gorpc.BaseReq
	92,  // 225: gorpc.GoUserClient.UserAppConfigAdd:input_type -> gorpc.UserAppConfigVo
	92,  // 226: gorpc.GoUserClient.UserAppConfigUpdate:input_type -> gorpc.UserAppConfigVo
	11,  // 227: gorpc.GoUserClient.UserAppConfigDel:input_type -> gorpc.Ids
	93,  // 228: gorpc.GoUserClient.UserAppConfigGet:input_type -> gorpc.UserAppConfigGetReq
	94,  // 229: gorpc.GoUserClient.UserAppConfigList:input_type -> gorpc.UserAppConfigListReq
	89,  // 230: gorpc.GoUserClient.DeviceAdd:input_type -> gorpc.DeviceVo
	89,  // 231: gorpc.GoUserClient.DeviceUpdate:input_type -> gorpc.DeviceVo
	11,  // 232: gorpc.GoUserClient.DeviceDel:input_type -> gorpc.Ids
	89,  // 233: gorpc.GoUserClient.DeviceGet:input_type -> gorpc.DeviceVo
	90,  // 234: gorpc.GoUserClient.DeviceList:input_type -> gorpc.DeviceListReq
	83,  // 235: gorpc.GoUserClient.AccountAdd:input_type -> gorpc.AccountVo
	83,  // 236: gorpc.GoUserClient.AccountUpdate:input_type -> gorpc.AccountVo
	11,  // 237: gorpc.GoUserClient.AccountDel:input_type -> gorpc.Ids
	83,  // 238: gorpc.GoUserClient.AccountGet:input_type -> gorpc.AccountVo
	84,  // 239: gorpc.GoUserClient.AccountList:input_type -> gorpc.AccountListReq
	86,  // 240: gorpc.GoUserClient.AccountDeviceAdd:input_type -> gorpc.AccountDeviceVo
	86,  // 241: gorpc.GoUserClient.AccountDeviceUpdate:input_type -> gorpc.AccountDeviceVo
	11,  // 242: gorpc.GoUserClient.AccountDeviceDel:input_type -> gorpc.Ids
	86,  // 243: gorpc.GoUserClient.AccountDeviceGet:input_type -> gorpc.AccountDeviceVo
	87,  // 244: gorpc.GoUserClient.AccountDeviceList:input_type -> gorpc.AccountDeviceListReq
	12,  // 245: gorpc.GoVpnClient.Ping:input_type -> gorpc.Request
	15,  // 246: gorpc.GoVpnClient.Transaction:input_type -> gorpc.TransactionReq
	96,  // 247: gorpc.GoVpnClient.VpnTagAdd:input_type -> gorpc.VpnTagVo
	96,  // 248: gorpc.GoVpnClient.VpnTagUpdate:input_type -> gorpc.VpnTagVo
	11,  // 249: gorpc.GoVpnClient.VpnTagDel:input_type -> gorpc.Ids
	97,  // 250: gorpc.GoVpnClient.VpnTagGet:input_type -> gorpc.VpnTagGetReq
	98,  // 251: gorpc.GoVpnClient.VpnTagList:input_type -> gorpc.VpnTagListReq
	101, // 252: gorpc.GoVpnClient.VpnGroupAdd:input_type -> gorpc.VpnGroupAddReq
	101, // 253: gorpc.GoVpnClient.VpnGroupUpdate:input_type -> gorpc.VpnGroupAddReq
	11,  // 254: gorpc.GoVpnClient.VpnGroupDel:input_type -> gorpc.Ids
	103, // 255: gorpc.GoVpnClient.VpnGroupList:input_type -> gorpc.VpnGroupListReq
	105, // 256: gorpc.GoVpnClient.VpnGroupTagAdd:input_type -> gorpc.VpnGroupTagVo
	105, // 257: gorpc.GoVpnClient.VpnGroupTagUpdate:input_type -> gorpc.VpnGroupTagVo
	11,  // 258: gorpc.GoVpnClient.VpnGroupTagDel:input_type -> gorpc.Ids
	105, // 259: gorpc.GoVpnClient.VpnGroupTagGet:input_type -> gorpc.VpnGroupTagVo
	106, // 260: gorpc.GoVpnClient.VpnGroupTagList:input_type -> gorpc.VpnGroupTagListReq
	108, // 261: gorpc.GoVpnClient.VpnLocationAdd:input_type -> gorpc.VpnLocationVo
	108, // 262: gorpc.GoVpnClient.VpnLocationUpdate:input_type -> gorpc.VpnLocationVo
	11,  // 263: gorpc.GoVpnClient.VpnLocationDel:input_type -> gorpc.Ids
	110, // 264: gorpc.GoVpnClient.VpnLocationGet:input_type -> gorpc.VpnLocationGetReq
	111, // 265: gorpc.GoVpnClient.VpnLocationList:input_type -> gorpc.VpnLocationListReq
	116, // 266: gorpc.GoVpnClient.VpnServerAdd:input_type -> gorpc.VpnServerAddReq
	116, // 267: gorpc.GoVpnClient.VpnServerUpdate:input_type -> gorpc.VpnServerAddReq
	11,  // 268: gorpc.GoVpnClient.VpnServerDel:input_type -> gorpc.Ids
	113, // 269: gorpc.GoVpnClient.VpnServerGet:input_type -> gorpc.VpnServerVo
	114, // 270: gorpc.GoVpnClient.VpnServerList:input_type -> gorpc.VpnServerListReq
	117, // 271: gorpc.GoVpnClient.VpnServerLocationAdd:input_type -> gorpc.VpnServerLocationVo
	117, // 272: gorpc.GoVpnClient.VpnServerLocationUpdate:input_type -> gorpc.VpnServerLocationVo
	11,  // 273: gorpc.GoVpnClient.VpnServerLocationDel:input_type -> gorpc.Ids
	117, // 274: gorpc.GoVpnClient.VpnServerLocationGet:input_type -> gorpc.VpnServerLocationVo
	118, // 275: gorpc.GoVpnClient.VpnServerLocationList:input_type -> gorpc.VpnServerLocationListReq
	121, // 276: gorpc.GoVpnClient.VpnLocationServerCount:input_type -> gorpc.VpnLocationServerCountReq
	16,  // 277: gorpc.GoGameClient.GameAdd:output_type -> gorpc.GameVo
	3,   // 278: gorpc.GoGameClient.GameUpdate:output_type -> gorpc.Empty
	3,   // 279: gorpc.GoGameClient.GameDel:output_type -> gorpc.Empty
	16,  // 280: gorpc.GoGameClient.GameGet:output_type -> gorpc.GameVo
	19,  // 281: gorpc.GoGameClient.GameList:output_type -> gorpc.GameListRes
	19,  // 282: gorpc.GoGameClient.GameAll:output_type -> gorpc.GameListRes
	20,  // 283: gorpc.GoGameClient.RelGameRankAdd:output_type -> gorpc.RelGameRankVo
	3,   // 284: gorpc.GoGameClient.RelGameRankUpdate:output_type -> gorpc.Empty
	3,   // 285: gorpc.GoGameClient.RelGameRankDel:output_type -> gorpc.Empty
	20,  // 286: gorpc.GoGameClient.RelGameRankGet:output_type -> gorpc.RelGameRankVo
	23,  // 287: gorpc.GoGameClient.RelGameRankList:output_type -> gorpc.RelGameRankListRes
	24,  // 288: gorpc.GoGameClient.RelGameVpnGroupAdd:output_type -> gorpc.RelGameVpnGroupVo
	3,   // 289: gorpc.GoGameClient.RelGameVpnGroupUpdate:output_type -> gorpc.Empty
	3,   // 290: gorpc.GoGameClient.RelGameVpnGroupDel:output_type -> gorpc.Empty
	24,  // 291: gorpc.GoGameClient.RelGameVpnGroupGet:output_type -> gorpc.RelGameVpnGroupVo
	27,  // 292: gorpc.GoGameClient.RelGameVpnGroupList:output_type -> gorpc.RelGameVpnGroupListRes
	13,  // 293: gorpc.GoPmpClient.Ping:output_type -> gorpc.Response
	43,  // 294: gorpc.GoPmpClient.GlobalParamAdd:output_type -> gorpc.GlobalParamVo
	43,  // 295: gorpc.GoPmpClient.GlobalParamUpdate:output_type -> gorpc.GlobalParamVo
	3,   // 296: gorpc.GoPmpClient.GlobalParamDel:output_type -> gorpc.Empty
	43,  // 297: gorpc.GoPmpClient.GlobalParamGet:output_type -> gorpc.GlobalParamVo
	45,  // 298: gorpc.GoPmpClient.GlobalParamList:output_type -> gorpc.GlobalParamListResp
	46,  // 299: gorpc.GoPmpClient.ProductAdd:output_type -> gorpc.ProductVo
	3,   // 300: gorpc.GoPmpClient.ProductUpdate:output_type -> gorpc.Empty
	3,   // 301: gorpc.GoPmpClient.ProductDel:output_type -> gorpc.Empty
	46,  // 302: gorpc.GoPmpClient.ProductGet:output_type -> gorpc.ProductVo
	48,  // 303: gorpc.GoPmpClient.ProductList:output_type -> gorpc.ProductListResp
	48,  // 304: gorpc.GoPmpClient.ProductAll:output_type -> gorpc.ProductListResp
	3,   // 305: gorpc.GoPmpClient.ProductParamUpdate:output_type -> gorpc.Empty
	49,  // 306: gorpc.GoPmpClient.ProductParamGet:output_type -> gorpc.ProductParamVo
	51,  // 307: gorpc.GoPmpClient.ProductParamList:output_type -> gorpc.ProductParamListResp
	52,  // 308: gorpc.GoPmpClient.ProductActionAdd:output_type -> gorpc.ProductActionVo
	3,   // 309: gorpc.GoPmpClient.ProductActionUpdate:output_type -> gorpc.Empty
	3,   // 310: gorpc.GoPmpClient.ProductActionDel:output_type -> gorpc.Empty
	52,  // 311: gorpc.GoPmpClient.ProductActionGet:output_type -> gorpc.ProductActionVo
	55,  // 312: gorpc.GoPmpClient.ProductActionList:output_type -> gorpc.ProductActionListRes
	56,  // 313: gorpc.GoPmpClient.AreaParamAdd:output_type -> gorpc.AreaParamVo
	56,  // 314: gorpc.GoPmpClient.AreaParamUpdate:output_type -> gorpc.AreaParamVo
	3,   // 315: gorpc.GoPmpClient.AreaParamDel:output_type -> gorpc.Empty
	56,  // 316: gorpc.GoPmpClient.AreaParamGet:output_type -> gorpc.AreaParamVo
	58,  // 317: gorpc.GoPmpClient.AreaParamList:output_type -> gorpc.AreaParamListResp
	63,  // 318: gorpc.GoPmpClient.NationalLanguageAdd:output_type -> gorpc.NationalLanguageVo
	63,  // 319: gorpc.GoPmpClient.NationalLanguageUpdate:output_type -> gorpc.NationalLanguageVo
	3,   // 320: gorpc.GoPmpClient.NationalLanguageDel:output_type -> gorpc.Empty
	63,  // 321: gorpc.GoPmpClient.NationalLanguageGet:output_type -> gorpc.NationalLanguageVo
	65,  // 322: gorpc.GoPmpClient.NationalLanguageList:output_type -> gorpc.NationalLanguageListResp
	66,  // 323: gorpc.GoPmpClient.TipAdd:output_type -> gorpc.TipVo
	66,  // 324: gorpc.GoPmpClient.TipUpdate:output_type -> gorpc.TipVo
	3,   // 325: gorpc.GoPmpClient.TipDel:output_type -> gorpc.Empty
	66,  // 326: gorpc.GoPmpClient.TipGet:output_type -> gorpc.TipVo
	68,  // 327: gorpc.GoPmpClient.TipList:output_type -> gorpc.TipListResp
	29,  // 328: gorpc.GoPmpClient.UpgradeResAdd:output_type -> gorpc.UpgradeResVo
	3,   // 329: gorpc.GoPmpClient.UpgradeResUpdate:output_type -> gorpc.Empty
	3,   // 330: gorpc.GoPmpClient.UpgradeResDel:output_type -> gorpc.Empty
	29,  // 331: gorpc.GoPmpClient.UpgradeResGet:output_type -> gorpc.UpgradeResVo
	40,  // 332: gorpc.GoPmpClient.UpgradeResList:output_type -> gorpc.UpgradeResListResp
	31,  // 333: gorpc.GoPmpClient.UpgradePkgAdd:output_type -> gorpc.UpgradePkgVo
	3,   // 334: gorpc.GoPmpClient.UpgradePkgUpdate:output_type -> gorpc.Empty
	3,   // 335: gorpc.GoPmpClient.UpgradePkgDel:output_type -> gorpc.Empty
	31,  // 336: gorpc.GoPmpClient.UpgradePkgGet:output_type -> gorpc.UpgradePkgVo
	37,  // 337: gorpc.GoPmpClient.UpgradePkgList:output_type -> gorpc.UpgradePkgListResp
	30,  // 338: gorpc.GoPmpClient.UpgradeResConfigAdd:output_type -> gorpc.UpgradeResConfigVo
	3,   // 339: gorpc.GoPmpClient.UpgradeResConfigUpdate:output_type -> gorpc.Empty
	3,   // 340: gorpc.GoPmpClient.UpgradeResConfigDel:output_type -> gorpc.Empty
	30,  // 341: gorpc.GoPmpClient.UpgradeResConfigGet:output_type -> gorpc.UpgradeResConfigVo
	34,  // 342: gorpc.GoPmpClient.UpgradeResConfigList:output_type -> gorpc.UpgradeResConfigListResp
	59,  // 343: gorpc.GoPmpClient.DictAdd:output_type -> gorpc.DictVo
	3,   // 344: gorpc.GoPmpClient.DictUpdate:output_type -> gorpc.Empty
	3,   // 345: gorpc.GoPmpClient.DictDel:output_type -> gorpc.Empty
	59,  // 346: gorpc.GoPmpClient.DictGet:output_type -> gorpc.DictVo
	62,  // 347: gorpc.GoPmpClient.DictList:output_type -> gorpc.DictListResp
	71,  // 348: gorpc.GoPmpClient.UpgradePkgPlanAdd:output_type -> gorpc.UpgradePkgPlanVo
	3,   // 349: gorpc.GoPmpClient.UpgradePkgPlanUpdate:output_type -> gorpc.Empty
	3,   // 350: gorpc.GoPmpClient.UpgradePkgPlanDel:output_type -> gorpc.Empty
	71,  // 351: gorpc.GoPmpClient.UpgradePkgPlanGet:output_type -> gorpc.UpgradePkgPlanVo
	74,  // 352: gorpc.GoPmpClient.UpgradePkgPlanList:output_type -> gorpc.UpgradePkgPlanListResp
	72,  // 353: gorpc.GoPmpClient.UpgradePkgPlanDetailAdd:output_type -> gorpc.UpgradePkgPlanDetailVo
	3,   // 354: gorpc.GoPmpClient.UpgradePkgPlanDetailUpdate:output_type -> gorpc.Empty
	3,   // 355: gorpc.GoPmpClient.UpgradePkgPlanDetailDel:output_type -> gorpc.Empty
	72,  // 356: gorpc.GoPmpClient.UpgradePkgPlanDetailGet:output_type -> gorpc.UpgradePkgPlanDetailVo
	76,  // 357: gorpc.GoPmpClient.UpgradePkgPlanDetailList:output_type -> gorpc.UpgradePkgPlanDetailListResp
	77,  // 358: gorpc.GoPmpClient.UpgradeResPlanAdd:output_type -> gorpc.UpgradeResPlanVo
	3,   // 359: gorpc.GoPmpClient.UpgradeResPlanUpdate:output_type -> gorpc.Empty
	3,   // 360: gorpc.GoPmpClient.UpgradeResPlanDel:output_type -> gorpc.Empty
	77,  // 361: gorpc.GoPmpClient.UpgradeResPlanGet:output_type -> gorpc.UpgradeResPlanVo
	80,  // 362: gorpc.GoPmpClient.UpgradeResPlanList:output_type -> gorpc.UpgradeResPlanListResp
	78,  // 363: gorpc.GoPmpClient.UpgradeResPlanDetailAdd:output_type -> gorpc.UpgradeResPlanDetailVo
	3,   // 364: gorpc.GoPmpClient.UpgradeResPlanDetailUpdate:output_type -> gorpc.Empty
	3,   // 365: gorpc.GoPmpClient.UpgradeResPlanDetailDel:output_type -> gorpc.Empty
	78,  // 366: gorpc.GoPmpClient.UpgradeResPlanDetailGet:output_type -> gorpc.UpgradeResPlanDetailVo
	82,  // 367: gorpc.GoPmpClient.UpgradeResPlanDetailList:output_type -> gorpc.UpgradeResPlanDetailListResp
	13,  // 368: gorpc.GoSysClient.Ping:output_type -> gorpc.Response
	13,  // 369: gorpc.GoSysClient.Login:output_type -> gorpc.Response
	13,  // 370: gorpc.GoUserClient.Ping:output_type -> gorpc.Response
	13,  // 371: gorpc.GoUserClient.Login:output_type -> gorpc.Response
	92,  // 372: gorpc.GoUserClient.UserAppConfigAdd:output_type -> gorpc.UserAppConfigVo
	92,  // 373: gorpc.GoUserClient.UserAppConfigUpdate:output_type -> gorpc.UserAppConfigVo
	3,   // 374: gorpc.GoUserClient.UserAppConfigDel:output_type -> gorpc.Empty
	92,  // 375: gorpc.GoUserClient.UserAppConfigGet:output_type -> gorpc.UserAppConfigVo
	95,  // 376: gorpc.GoUserClient.UserAppConfigList:output_type -> gorpc.UserAppConfigListRes
	89,  // 377: gorpc.GoUserClient.DeviceAdd:output_type -> gorpc.DeviceVo
	89,  // 378: gorpc.GoUserClient.DeviceUpdate:output_type -> gorpc.DeviceVo
	3,   // 379: gorpc.GoUserClient.DeviceDel:output_type -> gorpc.Empty
	89,  // 380: gorpc.GoUserClient.DeviceGet:output_type -> gorpc.DeviceVo
	91,  // 381: gorpc.GoUserClient.DeviceList:output_type -> gorpc.DeviceListRes
	83,  // 382: gorpc.GoUserClient.AccountAdd:output_type -> gorpc.AccountVo
	83,  // 383: gorpc.GoUserClient.AccountUpdate:output_type -> gorpc.AccountVo
	3,   // 384: gorpc.GoUserClient.AccountDel:output_type -> gorpc.Empty
	83,  // 385: gorpc.GoUserClient.AccountGet:output_type -> gorpc.AccountVo
	85,  // 386: gorpc.GoUserClient.AccountList:output_type -> gorpc.AccountListResp
	86,  // 387: gorpc.GoUserClient.AccountDeviceAdd:output_type -> gorpc.AccountDeviceVo
	86,  // 388: gorpc.GoUserClient.AccountDeviceUpdate:output_type -> gorpc.AccountDeviceVo
	3,   // 389: gorpc.GoUserClient.AccountDeviceDel:output_type -> gorpc.Empty
	86,  // 390: gorpc.GoUserClient.AccountDeviceGet:output_type -> gorpc.AccountDeviceVo
	88,  // 391: gorpc.GoUserClient.AccountDeviceList:output_type -> gorpc.AccountDeviceListResp
	13,  // 392: gorpc.GoVpnClient.Ping:output_type -> gorpc.Response
	3,   // 393: gorpc.GoVpnClient.Transaction:output_type -> gorpc.Empty
	96,  // 394: gorpc.GoVpnClient.VpnTagAdd:output_type -> gorpc.VpnTagVo
	3,   // 395: gorpc.GoVpnClient.VpnTagUpdate:output_type -> gorpc.Empty
	3,   // 396: gorpc.GoVpnClient.VpnTagDel:output_type -> gorpc.Empty
	96,  // 397: gorpc.GoVpnClient.VpnTagGet:output_type -> gorpc.VpnTagVo
	99,  // 398: gorpc.GoVpnClient.VpnTagList:output_type -> gorpc.VpnTagListResp
	100, // 399: gorpc.GoVpnClient.VpnGroupAdd:output_type -> gorpc.VpnGroupVo
	3,   // 400: gorpc.GoVpnClient.VpnGroupUpdate:output_type -> gorpc.Empty
	3,   // 401: gorpc.GoVpnClient.VpnGroupDel:output_type -> gorpc.Empty
	104, // 402: gorpc.GoVpnClient.VpnGroupList:output_type -> gorpc.VpnGroupListResp
	105, // 403: gorpc.GoVpnClient.VpnGroupTagAdd:output_type -> gorpc.VpnGroupTagVo
	3,   // 404: gorpc.GoVpnClient.VpnGroupTagUpdate:output_type -> gorpc.Empty
	3,   // 405: gorpc.GoVpnClient.VpnGroupTagDel:output_type -> gorpc.Empty
	105, // 406: gorpc.GoVpnClient.VpnGroupTagGet:output_type -> gorpc.VpnGroupTagVo
	107, // 407: gorpc.GoVpnClient.VpnGroupTagList:output_type -> gorpc.VpnGroupTagListResp
	108, // 408: gorpc.GoVpnClient.VpnLocationAdd:output_type -> gorpc.VpnLocationVo
	3,   // 409: gorpc.GoVpnClient.VpnLocationUpdate:output_type -> gorpc.Empty
	3,   // 410: gorpc.GoVpnClient.VpnLocationDel:output_type -> gorpc.Empty
	108, // 411: gorpc.GoVpnClient.VpnLocationGet:output_type -> gorpc.VpnLocationVo
	112, // 412: gorpc.GoVpnClient.VpnLocationList:output_type -> gorpc.VpnLocationListResp
	113, // 413: gorpc.GoVpnClient.VpnServerAdd:output_type -> gorpc.VpnServerVo
	3,   // 414: gorpc.GoVpnClient.VpnServerUpdate:output_type -> gorpc.Empty
	3,   // 415: gorpc.GoVpnClient.VpnServerDel:output_type -> gorpc.Empty
	113, // 416: gorpc.GoVpnClient.VpnServerGet:output_type -> gorpc.VpnServerVo
	115, // 417: gorpc.GoVpnClient.VpnServerList:output_type -> gorpc.VpnServerListResp
	117, // 418: gorpc.GoVpnClient.VpnServerLocationAdd:output_type -> gorpc.VpnServerLocationVo
	3,   // 419: gorpc.GoVpnClient.VpnServerLocationUpdate:output_type -> gorpc.Empty
	3,   // 420: gorpc.GoVpnClient.VpnServerLocationDel:output_type -> gorpc.Empty
	117, // 421: gorpc.GoVpnClient.VpnServerLocationGet:output_type -> gorpc.VpnServerLocationVo
	119, // 422: gorpc.GoVpnClient.VpnServerLocationList:output_type -> gorpc.VpnServerLocationListResp
	122, // 423: gorpc.GoVpnClient.VpnLocationServerCount:output_type -> gorpc.VpnLocationServerCountResp
	277, // [277:424] is the sub-list for method output_type
	130, // [130:277] is the sub-list for method input_type
	130, // [130:130] is the sub-list for extension type_name
	130, // [130:130] is the sub-list for extension extendee
	0,   // [0:130] is the sub-list for field type_name
}

func init() { file_gorpc_proto_init() }
func file_gorpc_proto_init() {
	if File_gorpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gorpc_proto_rawDesc), len(file_gorpc_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   121,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_gorpc_proto_goTypes,
		DependencyIndexes: file_gorpc_proto_depIdxs,
		EnumInfos:         file_gorpc_proto_enumTypes,
		MessageInfos:      file_gorpc_proto_msgTypes,
	}.Build()
	File_gorpc_proto = out.File
	file_gorpc_proto_goTypes = nil
	file_gorpc_proto_depIdxs = nil
}
