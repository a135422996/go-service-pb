// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: gorpc.proto

package gorpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoGameClient_GameAdd_FullMethodName               = "/gorpc.GoGameClient/GameAdd"
	GoGameClient_GameUpdate_FullMethodName            = "/gorpc.GoGameClient/GameUpdate"
	GoGameClient_GameDel_FullMethodName               = "/gorpc.GoGameClient/GameDel"
	GoGameClient_GameGet_FullMethodName               = "/gorpc.GoGameClient/GameGet"
	GoGameClient_GameList_FullMethodName              = "/gorpc.GoGameClient/GameList"
	GoGameClient_GameAll_FullMethodName               = "/gorpc.GoGameClient/GameAll"
	GoGameClient_RelGameRankAdd_FullMethodName        = "/gorpc.GoGameClient/RelGameRankAdd"
	GoGameClient_RelGameRankUpdate_FullMethodName     = "/gorpc.GoGameClient/RelGameRankUpdate"
	GoGameClient_RelGameRankDel_FullMethodName        = "/gorpc.GoGameClient/RelGameRankDel"
	GoGameClient_RelGameRankGet_FullMethodName        = "/gorpc.GoGameClient/RelGameRankGet"
	GoGameClient_RelGameRankList_FullMethodName       = "/gorpc.GoGameClient/RelGameRankList"
	GoGameClient_RelGameVpnGroupAdd_FullMethodName    = "/gorpc.GoGameClient/RelGameVpnGroupAdd"
	GoGameClient_RelGameVpnGroupUpdate_FullMethodName = "/gorpc.GoGameClient/RelGameVpnGroupUpdate"
	GoGameClient_RelGameVpnGroupDel_FullMethodName    = "/gorpc.GoGameClient/RelGameVpnGroupDel"
	GoGameClient_RelGameVpnGroupGet_FullMethodName    = "/gorpc.GoGameClient/RelGameVpnGroupGet"
	GoGameClient_RelGameVpnGroupList_FullMethodName   = "/gorpc.GoGameClient/RelGameVpnGroupList"
)

// GoGameClientClient is the client API for GoGameClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoGameClientClient interface {
	// 加速器游戏管理
	GameAdd(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*GameVo, error)
	GameUpdate(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*Empty, error)
	GameDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	GameGet(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameVo, error)
	GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRes, error)
	GameAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GameListRes, error)
	// 游戏榜单关联关系
	RelGameRankAdd(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*RelGameRankVo, error)
	RelGameRankUpdate(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*Empty, error)
	RelGameRankDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	RelGameRankGet(ctx context.Context, in *RelGameRankReq, opts ...grpc.CallOption) (*RelGameRankVo, error)
	RelGameRankList(ctx context.Context, in *RelGameRankListReq, opts ...grpc.CallOption) (*RelGameRankListRes, error)
	// 游戏地域关联关系
	RelGameVpnGroupAdd(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupUpdate(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*Empty, error)
	RelGameVpnGroupDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	RelGameVpnGroupGet(ctx context.Context, in *RelGameVpnGroupReq, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupList(ctx context.Context, in *RelGameVpnGroupListReq, opts ...grpc.CallOption) (*RelGameVpnGroupListRes, error)
}

type goGameClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoGameClientClient(cc grpc.ClientConnInterface) GoGameClientClient {
	return &goGameClientClient{cc}
}

func (c *goGameClientClient) GameAdd(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*GameVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameVo)
	err := c.cc.Invoke(ctx, GoGameClient_GameAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameUpdate(ctx context.Context, in *GameVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoGameClient_GameUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoGameClient_GameDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameGet(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameVo)
	err := c.cc.Invoke(ctx, GoGameClient_GameGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameList(ctx context.Context, in *GameListReq, opts ...grpc.CallOption) (*GameListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameListRes)
	err := c.cc.Invoke(ctx, GoGameClient_GameList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) GameAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GameListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameListRes)
	err := c.cc.Invoke(ctx, GoGameClient_GameAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankAdd(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*RelGameRankVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameRankVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankUpdate(ctx context.Context, in *RelGameRankVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankGet(ctx context.Context, in *RelGameRankReq, opts ...grpc.CallOption) (*RelGameRankVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameRankVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameRankList(ctx context.Context, in *RelGameRankListReq, opts ...grpc.CallOption) (*RelGameRankListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameRankListRes)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameRankList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupAdd(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameVpnGroupVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupUpdate(ctx context.Context, in *RelGameVpnGroupVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupGet(ctx context.Context, in *RelGameVpnGroupReq, opts ...grpc.CallOption) (*RelGameVpnGroupVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameVpnGroupVo)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goGameClientClient) RelGameVpnGroupList(ctx context.Context, in *RelGameVpnGroupListReq, opts ...grpc.CallOption) (*RelGameVpnGroupListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelGameVpnGroupListRes)
	err := c.cc.Invoke(ctx, GoGameClient_RelGameVpnGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoGameClientServer is the server API for GoGameClient service.
// All implementations must embed UnimplementedGoGameClientServer
// for forward compatibility.
type GoGameClientServer interface {
	// 加速器游戏管理
	GameAdd(context.Context, *GameVo) (*GameVo, error)
	GameUpdate(context.Context, *GameVo) (*Empty, error)
	GameDel(context.Context, *Ids) (*Empty, error)
	GameGet(context.Context, *GameReq) (*GameVo, error)
	GameList(context.Context, *GameListReq) (*GameListRes, error)
	GameAll(context.Context, *Request) (*GameListRes, error)
	// 游戏榜单关联关系
	RelGameRankAdd(context.Context, *RelGameRankVo) (*RelGameRankVo, error)
	RelGameRankUpdate(context.Context, *RelGameRankVo) (*Empty, error)
	RelGameRankDel(context.Context, *Ids) (*Empty, error)
	RelGameRankGet(context.Context, *RelGameRankReq) (*RelGameRankVo, error)
	RelGameRankList(context.Context, *RelGameRankListReq) (*RelGameRankListRes, error)
	// 游戏地域关联关系
	RelGameVpnGroupAdd(context.Context, *RelGameVpnGroupVo) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupUpdate(context.Context, *RelGameVpnGroupVo) (*Empty, error)
	RelGameVpnGroupDel(context.Context, *Ids) (*Empty, error)
	RelGameVpnGroupGet(context.Context, *RelGameVpnGroupReq) (*RelGameVpnGroupVo, error)
	RelGameVpnGroupList(context.Context, *RelGameVpnGroupListReq) (*RelGameVpnGroupListRes, error)
	mustEmbedUnimplementedGoGameClientServer()
}

// UnimplementedGoGameClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoGameClientServer struct{}

func (UnimplementedGoGameClientServer) GameAdd(context.Context, *GameVo) (*GameVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameAdd not implemented")
}
func (UnimplementedGoGameClientServer) GameUpdate(context.Context, *GameVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameUpdate not implemented")
}
func (UnimplementedGoGameClientServer) GameDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameDel not implemented")
}
func (UnimplementedGoGameClientServer) GameGet(context.Context, *GameReq) (*GameVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameGet not implemented")
}
func (UnimplementedGoGameClientServer) GameList(context.Context, *GameListReq) (*GameListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameList not implemented")
}
func (UnimplementedGoGameClientServer) GameAll(context.Context, *Request) (*GameListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameAll not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankAdd(context.Context, *RelGameRankVo) (*RelGameRankVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankAdd not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankUpdate(context.Context, *RelGameRankVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankUpdate not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankDel not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankGet(context.Context, *RelGameRankReq) (*RelGameRankVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankGet not implemented")
}
func (UnimplementedGoGameClientServer) RelGameRankList(context.Context, *RelGameRankListReq) (*RelGameRankListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameRankList not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupAdd(context.Context, *RelGameVpnGroupVo) (*RelGameVpnGroupVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupAdd not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupUpdate(context.Context, *RelGameVpnGroupVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupUpdate not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupDel not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupGet(context.Context, *RelGameVpnGroupReq) (*RelGameVpnGroupVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupGet not implemented")
}
func (UnimplementedGoGameClientServer) RelGameVpnGroupList(context.Context, *RelGameVpnGroupListReq) (*RelGameVpnGroupListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelGameVpnGroupList not implemented")
}
func (UnimplementedGoGameClientServer) mustEmbedUnimplementedGoGameClientServer() {}
func (UnimplementedGoGameClientServer) testEmbeddedByValue()                      {}

// UnsafeGoGameClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoGameClientServer will
// result in compilation errors.
type UnsafeGoGameClientServer interface {
	mustEmbedUnimplementedGoGameClientServer()
}

func RegisterGoGameClientServer(s grpc.ServiceRegistrar, srv GoGameClientServer) {
	// If the following call pancis, it indicates UnimplementedGoGameClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoGameClient_ServiceDesc, srv)
}

func _GoGameClient_GameAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameAdd(ctx, req.(*GameVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameUpdate(ctx, req.(*GameVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameGet(ctx, req.(*GameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameList(ctx, req.(*GameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_GameAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).GameAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_GameAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).GameAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankAdd(ctx, req.(*RelGameRankVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankUpdate(ctx, req.(*RelGameRankVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankGet(ctx, req.(*RelGameRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameRankListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameRankList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameRankList(ctx, req.(*RelGameRankListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupAdd(ctx, req.(*RelGameVpnGroupVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupUpdate(ctx, req.(*RelGameVpnGroupVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupGet(ctx, req.(*RelGameVpnGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoGameClient_RelGameVpnGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelGameVpnGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGameClientServer).RelGameVpnGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoGameClient_RelGameVpnGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGameClientServer).RelGameVpnGroupList(ctx, req.(*RelGameVpnGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoGameClient_ServiceDesc is the grpc.ServiceDesc for GoGameClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoGameClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gorpc.GoGameClient",
	HandlerType: (*GoGameClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameAdd",
			Handler:    _GoGameClient_GameAdd_Handler,
		},
		{
			MethodName: "GameUpdate",
			Handler:    _GoGameClient_GameUpdate_Handler,
		},
		{
			MethodName: "GameDel",
			Handler:    _GoGameClient_GameDel_Handler,
		},
		{
			MethodName: "GameGet",
			Handler:    _GoGameClient_GameGet_Handler,
		},
		{
			MethodName: "GameList",
			Handler:    _GoGameClient_GameList_Handler,
		},
		{
			MethodName: "GameAll",
			Handler:    _GoGameClient_GameAll_Handler,
		},
		{
			MethodName: "RelGameRankAdd",
			Handler:    _GoGameClient_RelGameRankAdd_Handler,
		},
		{
			MethodName: "RelGameRankUpdate",
			Handler:    _GoGameClient_RelGameRankUpdate_Handler,
		},
		{
			MethodName: "RelGameRankDel",
			Handler:    _GoGameClient_RelGameRankDel_Handler,
		},
		{
			MethodName: "RelGameRankGet",
			Handler:    _GoGameClient_RelGameRankGet_Handler,
		},
		{
			MethodName: "RelGameRankList",
			Handler:    _GoGameClient_RelGameRankList_Handler,
		},
		{
			MethodName: "RelGameVpnGroupAdd",
			Handler:    _GoGameClient_RelGameVpnGroupAdd_Handler,
		},
		{
			MethodName: "RelGameVpnGroupUpdate",
			Handler:    _GoGameClient_RelGameVpnGroupUpdate_Handler,
		},
		{
			MethodName: "RelGameVpnGroupDel",
			Handler:    _GoGameClient_RelGameVpnGroupDel_Handler,
		},
		{
			MethodName: "RelGameVpnGroupGet",
			Handler:    _GoGameClient_RelGameVpnGroupGet_Handler,
		},
		{
			MethodName: "RelGameVpnGroupList",
			Handler:    _GoGameClient_RelGameVpnGroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorpc.proto",
}

const (
	GoPmpClient_Ping_FullMethodName                       = "/gorpc.GoPmpClient/Ping"
	GoPmpClient_GlobalParamAdd_FullMethodName             = "/gorpc.GoPmpClient/GlobalParamAdd"
	GoPmpClient_GlobalParamUpdate_FullMethodName          = "/gorpc.GoPmpClient/GlobalParamUpdate"
	GoPmpClient_GlobalParamDel_FullMethodName             = "/gorpc.GoPmpClient/GlobalParamDel"
	GoPmpClient_GlobalParamGet_FullMethodName             = "/gorpc.GoPmpClient/GlobalParamGet"
	GoPmpClient_GlobalParamList_FullMethodName            = "/gorpc.GoPmpClient/GlobalParamList"
	GoPmpClient_ProductAdd_FullMethodName                 = "/gorpc.GoPmpClient/ProductAdd"
	GoPmpClient_ProductUpdate_FullMethodName              = "/gorpc.GoPmpClient/ProductUpdate"
	GoPmpClient_ProductDel_FullMethodName                 = "/gorpc.GoPmpClient/ProductDel"
	GoPmpClient_ProductGet_FullMethodName                 = "/gorpc.GoPmpClient/ProductGet"
	GoPmpClient_ProductList_FullMethodName                = "/gorpc.GoPmpClient/ProductList"
	GoPmpClient_ProductAll_FullMethodName                 = "/gorpc.GoPmpClient/ProductAll"
	GoPmpClient_ProductParamUpdate_FullMethodName         = "/gorpc.GoPmpClient/ProductParamUpdate"
	GoPmpClient_ProductParamGet_FullMethodName            = "/gorpc.GoPmpClient/ProductParamGet"
	GoPmpClient_ProductParamList_FullMethodName           = "/gorpc.GoPmpClient/ProductParamList"
	GoPmpClient_ProductActionAdd_FullMethodName           = "/gorpc.GoPmpClient/ProductActionAdd"
	GoPmpClient_ProductActionUpdate_FullMethodName        = "/gorpc.GoPmpClient/ProductActionUpdate"
	GoPmpClient_ProductActionDel_FullMethodName           = "/gorpc.GoPmpClient/ProductActionDel"
	GoPmpClient_ProductActionGet_FullMethodName           = "/gorpc.GoPmpClient/ProductActionGet"
	GoPmpClient_ProductActionList_FullMethodName          = "/gorpc.GoPmpClient/ProductActionList"
	GoPmpClient_AreaParamAdd_FullMethodName               = "/gorpc.GoPmpClient/AreaParamAdd"
	GoPmpClient_AreaParamUpdate_FullMethodName            = "/gorpc.GoPmpClient/AreaParamUpdate"
	GoPmpClient_AreaParamDel_FullMethodName               = "/gorpc.GoPmpClient/AreaParamDel"
	GoPmpClient_AreaParamGet_FullMethodName               = "/gorpc.GoPmpClient/AreaParamGet"
	GoPmpClient_AreaParamList_FullMethodName              = "/gorpc.GoPmpClient/AreaParamList"
	GoPmpClient_NationalLanguageAdd_FullMethodName        = "/gorpc.GoPmpClient/NationalLanguageAdd"
	GoPmpClient_NationalLanguageUpdate_FullMethodName     = "/gorpc.GoPmpClient/NationalLanguageUpdate"
	GoPmpClient_NationalLanguageDel_FullMethodName        = "/gorpc.GoPmpClient/NationalLanguageDel"
	GoPmpClient_NationalLanguageGet_FullMethodName        = "/gorpc.GoPmpClient/NationalLanguageGet"
	GoPmpClient_NationalLanguageList_FullMethodName       = "/gorpc.GoPmpClient/NationalLanguageList"
	GoPmpClient_TipAdd_FullMethodName                     = "/gorpc.GoPmpClient/TipAdd"
	GoPmpClient_TipUpdate_FullMethodName                  = "/gorpc.GoPmpClient/TipUpdate"
	GoPmpClient_TipDel_FullMethodName                     = "/gorpc.GoPmpClient/TipDel"
	GoPmpClient_TipGet_FullMethodName                     = "/gorpc.GoPmpClient/TipGet"
	GoPmpClient_TipList_FullMethodName                    = "/gorpc.GoPmpClient/TipList"
	GoPmpClient_UpgradeResAdd_FullMethodName              = "/gorpc.GoPmpClient/UpgradeResAdd"
	GoPmpClient_UpgradeResUpdate_FullMethodName           = "/gorpc.GoPmpClient/UpgradeResUpdate"
	GoPmpClient_UpgradeResDel_FullMethodName              = "/gorpc.GoPmpClient/UpgradeResDel"
	GoPmpClient_UpgradeResGet_FullMethodName              = "/gorpc.GoPmpClient/UpgradeResGet"
	GoPmpClient_UpgradeResList_FullMethodName             = "/gorpc.GoPmpClient/UpgradeResList"
	GoPmpClient_UpgradePkgAdd_FullMethodName              = "/gorpc.GoPmpClient/UpgradePkgAdd"
	GoPmpClient_UpgradePkgUpdate_FullMethodName           = "/gorpc.GoPmpClient/UpgradePkgUpdate"
	GoPmpClient_UpgradePkgDel_FullMethodName              = "/gorpc.GoPmpClient/UpgradePkgDel"
	GoPmpClient_UpgradePkgGet_FullMethodName              = "/gorpc.GoPmpClient/UpgradePkgGet"
	GoPmpClient_UpgradePkgList_FullMethodName             = "/gorpc.GoPmpClient/UpgradePkgList"
	GoPmpClient_UpgradeResConfigAdd_FullMethodName        = "/gorpc.GoPmpClient/UpgradeResConfigAdd"
	GoPmpClient_UpgradeResConfigUpdate_FullMethodName     = "/gorpc.GoPmpClient/UpgradeResConfigUpdate"
	GoPmpClient_UpgradeResConfigDel_FullMethodName        = "/gorpc.GoPmpClient/UpgradeResConfigDel"
	GoPmpClient_UpgradeResConfigGet_FullMethodName        = "/gorpc.GoPmpClient/UpgradeResConfigGet"
	GoPmpClient_UpgradeResConfigList_FullMethodName       = "/gorpc.GoPmpClient/UpgradeResConfigList"
	GoPmpClient_DictAdd_FullMethodName                    = "/gorpc.GoPmpClient/DictAdd"
	GoPmpClient_DictUpdate_FullMethodName                 = "/gorpc.GoPmpClient/DictUpdate"
	GoPmpClient_DictDel_FullMethodName                    = "/gorpc.GoPmpClient/DictDel"
	GoPmpClient_DictGet_FullMethodName                    = "/gorpc.GoPmpClient/DictGet"
	GoPmpClient_DictList_FullMethodName                   = "/gorpc.GoPmpClient/DictList"
	GoPmpClient_UpgradePkgPlanAdd_FullMethodName          = "/gorpc.GoPmpClient/UpgradePkgPlanAdd"
	GoPmpClient_UpgradePkgPlanUpdate_FullMethodName       = "/gorpc.GoPmpClient/UpgradePkgPlanUpdate"
	GoPmpClient_UpgradePkgPlanDel_FullMethodName          = "/gorpc.GoPmpClient/UpgradePkgPlanDel"
	GoPmpClient_UpgradePkgPlanGet_FullMethodName          = "/gorpc.GoPmpClient/UpgradePkgPlanGet"
	GoPmpClient_UpgradePkgPlanList_FullMethodName         = "/gorpc.GoPmpClient/UpgradePkgPlanList"
	GoPmpClient_UpgradePkgPlanDetailAdd_FullMethodName    = "/gorpc.GoPmpClient/UpgradePkgPlanDetailAdd"
	GoPmpClient_UpgradePkgPlanDetailUpdate_FullMethodName = "/gorpc.GoPmpClient/UpgradePkgPlanDetailUpdate"
	GoPmpClient_UpgradePkgPlanDetailDel_FullMethodName    = "/gorpc.GoPmpClient/UpgradePkgPlanDetailDel"
	GoPmpClient_UpgradePkgPlanDetailGet_FullMethodName    = "/gorpc.GoPmpClient/UpgradePkgPlanDetailGet"
	GoPmpClient_UpgradePkgPlanDetailList_FullMethodName   = "/gorpc.GoPmpClient/UpgradePkgPlanDetailList"
	GoPmpClient_UpgradeResPlanAdd_FullMethodName          = "/gorpc.GoPmpClient/UpgradeResPlanAdd"
	GoPmpClient_UpgradeResPlanUpdate_FullMethodName       = "/gorpc.GoPmpClient/UpgradeResPlanUpdate"
	GoPmpClient_UpgradeResPlanDel_FullMethodName          = "/gorpc.GoPmpClient/UpgradeResPlanDel"
	GoPmpClient_UpgradeResPlanGet_FullMethodName          = "/gorpc.GoPmpClient/UpgradeResPlanGet"
	GoPmpClient_UpgradeResPlanList_FullMethodName         = "/gorpc.GoPmpClient/UpgradeResPlanList"
	GoPmpClient_UpgradeResPlanDetailAdd_FullMethodName    = "/gorpc.GoPmpClient/UpgradeResPlanDetailAdd"
	GoPmpClient_UpgradeResPlanDetailUpdate_FullMethodName = "/gorpc.GoPmpClient/UpgradeResPlanDetailUpdate"
	GoPmpClient_UpgradeResPlanDetailDel_FullMethodName    = "/gorpc.GoPmpClient/UpgradeResPlanDetailDel"
	GoPmpClient_UpgradeResPlanDetailGet_FullMethodName    = "/gorpc.GoPmpClient/UpgradeResPlanDetailGet"
	GoPmpClient_UpgradeResPlanDetailList_FullMethodName   = "/gorpc.GoPmpClient/UpgradeResPlanDetailList"
)

// GoPmpClientClient is the client API for GoPmpClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 基础服务： 产品管理，产品配置，升级配置、更新资源管理，资源版本管理，全局配置
type GoPmpClientClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// GlobalParamVo
	GlobalParamAdd(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error)
	GlobalParamUpdate(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error)
	GlobalParamDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	GlobalParamGet(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error)
	GlobalParamList(ctx context.Context, in *GlobalParamListReq, opts ...grpc.CallOption) (*GlobalParamListResp, error)
	// ProductVo
	ProductAdd(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error)
	ProductUpdate(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*Empty, error)
	ProductDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	ProductGet(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error)
	ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
	ProductAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ProductListResp, error)
	// ProductParamVo
	// rpc ProductParamAdd(ProductParamVo) returns (ProductParamVo);
	ProductParamUpdate(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*Empty, error)
	// rpc ProductParamDel(Ids) returns (Empty);
	ProductParamGet(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*ProductParamVo, error)
	ProductParamList(ctx context.Context, in *ProductParamListReq, opts ...grpc.CallOption) (*ProductParamListResp, error)
	// ProductAction 产品行为配置
	ProductActionAdd(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*ProductActionVo, error)
	ProductActionUpdate(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*Empty, error)
	ProductActionDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	ProductActionGet(ctx context.Context, in *ProductActionReq, opts ...grpc.CallOption) (*ProductActionVo, error)
	ProductActionList(ctx context.Context, in *ProductActionListReq, opts ...grpc.CallOption) (*ProductActionListRes, error)
	// AreaParamVo
	AreaParamAdd(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error)
	AreaParamUpdate(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error)
	AreaParamDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	AreaParamGet(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error)
	AreaParamList(ctx context.Context, in *AreaParamListReq, opts ...grpc.CallOption) (*AreaParamListResp, error)
	// NationalLanguage
	NationalLanguageAdd(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error)
	NationalLanguageUpdate(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error)
	NationalLanguageDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	NationalLanguageGet(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error)
	NationalLanguageList(ctx context.Context, in *NationalLanguageListReq, opts ...grpc.CallOption) (*NationalLanguageListResp, error)
	// Tip
	TipAdd(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error)
	TipUpdate(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error)
	TipDel(ctx context.Context, in *TipDelReq, opts ...grpc.CallOption) (*Empty, error)
	TipGet(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error)
	TipList(ctx context.Context, in *TipListReq, opts ...grpc.CallOption) (*TipListResp, error)
	// UpgradeRes 热更新代码资源管理
	UpgradeResAdd(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*UpgradeResVo, error)
	UpgradeResUpdate(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResDel(ctx context.Context, in *ResourceDelReq, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResGet(ctx context.Context, in *UpgradeResGetReq, opts ...grpc.CallOption) (*UpgradeResVo, error)
	UpgradeResList(ctx context.Context, in *UpgradeResListReq, opts ...grpc.CallOption) (*UpgradeResListResp, error)
	// UpgradePkg app 包更新管理
	UpgradePkgAdd(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*UpgradePkgVo, error)
	UpgradePkgUpdate(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*Empty, error)
	UpgradePkgDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UpgradePkgGet(ctx context.Context, in *UpgradePkgGetReq, opts ...grpc.CallOption) (*UpgradePkgVo, error)
	UpgradePkgList(ctx context.Context, in *UpgradePkgListReq, opts ...grpc.CallOption) (*UpgradePkgListResp, error)
	// UpgradeResConfig 热更新【代码资源】配置管理，控制哪些版本地区的用户可以更新
	UpgradeResConfigAdd(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*UpgradeResConfigVo, error)
	UpgradeResConfigUpdate(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResConfigDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResConfigGet(ctx context.Context, in *UpgradeResConfigGetReq, opts ...grpc.CallOption) (*UpgradeResConfigVo, error)
	UpgradeResConfigList(ctx context.Context, in *UpgradeResConfigListReq, opts ...grpc.CallOption) (*UpgradeResConfigListResp, error)
	DictAdd(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*DictVo, error)
	DictUpdate(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*Empty, error)
	DictDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	DictGet(ctx context.Context, in *DictGetReq, opts ...grpc.CallOption) (*DictVo, error)
	DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error)
	// UpgradePkgPlan
	UpgradePkgPlanAdd(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanUpdate(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*Empty, error)
	UpgradePkgPlanDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UpgradePkgPlanGet(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanList(ctx context.Context, in *UpgradePkgPlanListReq, opts ...grpc.CallOption) (*UpgradePkgPlanListResp, error)
	// UpgradePkgPlanDetail
	UpgradePkgPlanDetailAdd(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailUpdate(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*Empty, error)
	UpgradePkgPlanDetailDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UpgradePkgPlanDetailGet(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailList(ctx context.Context, in *UpgradePkgPlanDetailListReq, opts ...grpc.CallOption) (*UpgradePkgPlanDetailListResp, error)
	// UpgradeResPlan
	UpgradeResPlanAdd(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error)
	UpgradeResPlanUpdate(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResPlanDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResPlanGet(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error)
	UpgradeResPlanList(ctx context.Context, in *UpgradeResPlanListReq, opts ...grpc.CallOption) (*UpgradeResPlanListResp, error)
	// UpgradeResPlanDetail
	UpgradeResPlanDetailAdd(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailUpdate(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResPlanDetailDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UpgradeResPlanDetailGet(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailList(ctx context.Context, in *UpgradeResPlanDetailListReq, opts ...grpc.CallOption) (*UpgradeResPlanDetailListResp, error)
}

type goPmpClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoPmpClientClient(cc grpc.ClientConnInterface) GoPmpClientClient {
	return &goPmpClientClient{cc}
}

func (c *goPmpClientClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoPmpClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamAdd(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamUpdate(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamGet(ctx context.Context, in *GlobalParamVo, opts ...grpc.CallOption) (*GlobalParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) GlobalParamList(ctx context.Context, in *GlobalParamListReq, opts ...grpc.CallOption) (*GlobalParamListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalParamListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_GlobalParamList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductAdd(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductUpdate(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductGet(ctx context.Context, in *ProductVo, opts ...grpc.CallOption) (*ProductVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ProductListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductParamUpdate(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductParamUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductParamGet(ctx context.Context, in *ProductParamVo, opts ...grpc.CallOption) (*ProductParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductParamGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductParamList(ctx context.Context, in *ProductParamListReq, opts ...grpc.CallOption) (*ProductParamListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductParamListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductParamList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionAdd(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*ProductActionVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductActionVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionUpdate(ctx context.Context, in *ProductActionVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionGet(ctx context.Context, in *ProductActionReq, opts ...grpc.CallOption) (*ProductActionVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductActionVo)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) ProductActionList(ctx context.Context, in *ProductActionListReq, opts ...grpc.CallOption) (*ProductActionListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductActionListRes)
	err := c.cc.Invoke(ctx, GoPmpClient_ProductActionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamAdd(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamUpdate(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamGet(ctx context.Context, in *AreaParamVo, opts ...grpc.CallOption) (*AreaParamVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamVo)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) AreaParamList(ctx context.Context, in *AreaParamListReq, opts ...grpc.CallOption) (*AreaParamListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreaParamListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_AreaParamList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageAdd(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageVo)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageUpdate(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageVo)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageGet(ctx context.Context, in *NationalLanguageVo, opts ...grpc.CallOption) (*NationalLanguageVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageVo)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) NationalLanguageList(ctx context.Context, in *NationalLanguageListReq, opts ...grpc.CallOption) (*NationalLanguageListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NationalLanguageListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_NationalLanguageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipAdd(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipVo)
	err := c.cc.Invoke(ctx, GoPmpClient_TipAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipUpdate(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipVo)
	err := c.cc.Invoke(ctx, GoPmpClient_TipUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipDel(ctx context.Context, in *TipDelReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_TipDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipGet(ctx context.Context, in *TipVo, opts ...grpc.CallOption) (*TipVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipVo)
	err := c.cc.Invoke(ctx, GoPmpClient_TipGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) TipList(ctx context.Context, in *TipListReq, opts ...grpc.CallOption) (*TipListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TipListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_TipList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResAdd(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*UpgradeResVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResUpdate(ctx context.Context, in *UpgradeResVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResDel(ctx context.Context, in *ResourceDelReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResGet(ctx context.Context, in *UpgradeResGetReq, opts ...grpc.CallOption) (*UpgradeResVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResList(ctx context.Context, in *UpgradeResListReq, opts ...grpc.CallOption) (*UpgradeResListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgAdd(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*UpgradePkgVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgUpdate(ctx context.Context, in *UpgradePkgVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgGet(ctx context.Context, in *UpgradePkgGetReq, opts ...grpc.CallOption) (*UpgradePkgVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgList(ctx context.Context, in *UpgradePkgListReq, opts ...grpc.CallOption) (*UpgradePkgListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigAdd(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*UpgradeResConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResConfigVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigUpdate(ctx context.Context, in *UpgradeResConfigVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigGet(ctx context.Context, in *UpgradeResConfigGetReq, opts ...grpc.CallOption) (*UpgradeResConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResConfigVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResConfigList(ctx context.Context, in *UpgradeResConfigListReq, opts ...grpc.CallOption) (*UpgradeResConfigListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResConfigListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResConfigList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictAdd(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*DictVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictVo)
	err := c.cc.Invoke(ctx, GoPmpClient_DictAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictUpdate(ctx context.Context, in *DictVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_DictUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_DictDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictGet(ctx context.Context, in *DictGetReq, opts ...grpc.CallOption) (*DictVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictVo)
	err := c.cc.Invoke(ctx, GoPmpClient_DictGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) DictList(ctx context.Context, in *DictListReq, opts ...grpc.CallOption) (*DictListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DictListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_DictList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanAdd(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanUpdate(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanGet(ctx context.Context, in *UpgradePkgPlanVo, opts ...grpc.CallOption) (*UpgradePkgPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanList(ctx context.Context, in *UpgradePkgPlanListReq, opts ...grpc.CallOption) (*UpgradePkgPlanListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailAdd(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailUpdate(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailGet(ctx context.Context, in *UpgradePkgPlanDetailVo, opts ...grpc.CallOption) (*UpgradePkgPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradePkgPlanDetailList(ctx context.Context, in *UpgradePkgPlanDetailListReq, opts ...grpc.CallOption) (*UpgradePkgPlanDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradePkgPlanDetailListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradePkgPlanDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanAdd(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanUpdate(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanGet(ctx context.Context, in *UpgradeResPlanVo, opts ...grpc.CallOption) (*UpgradeResPlanVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanList(ctx context.Context, in *UpgradeResPlanListReq, opts ...grpc.CallOption) (*UpgradeResPlanListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailAdd(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailUpdate(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailGet(ctx context.Context, in *UpgradeResPlanDetailVo, opts ...grpc.CallOption) (*UpgradeResPlanDetailVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanDetailVo)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPmpClientClient) UpgradeResPlanDetailList(ctx context.Context, in *UpgradeResPlanDetailListReq, opts ...grpc.CallOption) (*UpgradeResPlanDetailListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeResPlanDetailListResp)
	err := c.cc.Invoke(ctx, GoPmpClient_UpgradeResPlanDetailList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoPmpClientServer is the server API for GoPmpClient service.
// All implementations must embed UnimplementedGoPmpClientServer
// for forward compatibility.
//
// 基础服务： 产品管理，产品配置，升级配置、更新资源管理，资源版本管理，全局配置
type GoPmpClientServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// GlobalParamVo
	GlobalParamAdd(context.Context, *GlobalParamVo) (*GlobalParamVo, error)
	GlobalParamUpdate(context.Context, *GlobalParamVo) (*GlobalParamVo, error)
	GlobalParamDel(context.Context, *Ids) (*Empty, error)
	GlobalParamGet(context.Context, *GlobalParamVo) (*GlobalParamVo, error)
	GlobalParamList(context.Context, *GlobalParamListReq) (*GlobalParamListResp, error)
	// ProductVo
	ProductAdd(context.Context, *ProductVo) (*ProductVo, error)
	ProductUpdate(context.Context, *ProductVo) (*Empty, error)
	ProductDel(context.Context, *Ids) (*Empty, error)
	ProductGet(context.Context, *ProductVo) (*ProductVo, error)
	ProductList(context.Context, *ProductListReq) (*ProductListResp, error)
	ProductAll(context.Context, *Request) (*ProductListResp, error)
	// ProductParamVo
	// rpc ProductParamAdd(ProductParamVo) returns (ProductParamVo);
	ProductParamUpdate(context.Context, *ProductParamVo) (*Empty, error)
	// rpc ProductParamDel(Ids) returns (Empty);
	ProductParamGet(context.Context, *ProductParamVo) (*ProductParamVo, error)
	ProductParamList(context.Context, *ProductParamListReq) (*ProductParamListResp, error)
	// ProductAction 产品行为配置
	ProductActionAdd(context.Context, *ProductActionVo) (*ProductActionVo, error)
	ProductActionUpdate(context.Context, *ProductActionVo) (*Empty, error)
	ProductActionDel(context.Context, *Ids) (*Empty, error)
	ProductActionGet(context.Context, *ProductActionReq) (*ProductActionVo, error)
	ProductActionList(context.Context, *ProductActionListReq) (*ProductActionListRes, error)
	// AreaParamVo
	AreaParamAdd(context.Context, *AreaParamVo) (*AreaParamVo, error)
	AreaParamUpdate(context.Context, *AreaParamVo) (*AreaParamVo, error)
	AreaParamDel(context.Context, *Ids) (*Empty, error)
	AreaParamGet(context.Context, *AreaParamVo) (*AreaParamVo, error)
	AreaParamList(context.Context, *AreaParamListReq) (*AreaParamListResp, error)
	// NationalLanguage
	NationalLanguageAdd(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error)
	NationalLanguageUpdate(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error)
	NationalLanguageDel(context.Context, *Ids) (*Empty, error)
	NationalLanguageGet(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error)
	NationalLanguageList(context.Context, *NationalLanguageListReq) (*NationalLanguageListResp, error)
	// Tip
	TipAdd(context.Context, *TipVo) (*TipVo, error)
	TipUpdate(context.Context, *TipVo) (*TipVo, error)
	TipDel(context.Context, *TipDelReq) (*Empty, error)
	TipGet(context.Context, *TipVo) (*TipVo, error)
	TipList(context.Context, *TipListReq) (*TipListResp, error)
	// UpgradeRes 热更新代码资源管理
	UpgradeResAdd(context.Context, *UpgradeResVo) (*UpgradeResVo, error)
	UpgradeResUpdate(context.Context, *UpgradeResVo) (*Empty, error)
	UpgradeResDel(context.Context, *ResourceDelReq) (*Empty, error)
	UpgradeResGet(context.Context, *UpgradeResGetReq) (*UpgradeResVo, error)
	UpgradeResList(context.Context, *UpgradeResListReq) (*UpgradeResListResp, error)
	// UpgradePkg app 包更新管理
	UpgradePkgAdd(context.Context, *UpgradePkgVo) (*UpgradePkgVo, error)
	UpgradePkgUpdate(context.Context, *UpgradePkgVo) (*Empty, error)
	UpgradePkgDel(context.Context, *Ids) (*Empty, error)
	UpgradePkgGet(context.Context, *UpgradePkgGetReq) (*UpgradePkgVo, error)
	UpgradePkgList(context.Context, *UpgradePkgListReq) (*UpgradePkgListResp, error)
	// UpgradeResConfig 热更新【代码资源】配置管理，控制哪些版本地区的用户可以更新
	UpgradeResConfigAdd(context.Context, *UpgradeResConfigVo) (*UpgradeResConfigVo, error)
	UpgradeResConfigUpdate(context.Context, *UpgradeResConfigVo) (*Empty, error)
	UpgradeResConfigDel(context.Context, *Ids) (*Empty, error)
	UpgradeResConfigGet(context.Context, *UpgradeResConfigGetReq) (*UpgradeResConfigVo, error)
	UpgradeResConfigList(context.Context, *UpgradeResConfigListReq) (*UpgradeResConfigListResp, error)
	DictAdd(context.Context, *DictVo) (*DictVo, error)
	DictUpdate(context.Context, *DictVo) (*Empty, error)
	DictDel(context.Context, *Ids) (*Empty, error)
	DictGet(context.Context, *DictGetReq) (*DictVo, error)
	DictList(context.Context, *DictListReq) (*DictListResp, error)
	// UpgradePkgPlan
	UpgradePkgPlanAdd(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanUpdate(context.Context, *UpgradePkgPlanVo) (*Empty, error)
	UpgradePkgPlanDel(context.Context, *Ids) (*Empty, error)
	UpgradePkgPlanGet(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error)
	UpgradePkgPlanList(context.Context, *UpgradePkgPlanListReq) (*UpgradePkgPlanListResp, error)
	// UpgradePkgPlanDetail
	UpgradePkgPlanDetailAdd(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailUpdate(context.Context, *UpgradePkgPlanDetailVo) (*Empty, error)
	UpgradePkgPlanDetailDel(context.Context, *Ids) (*Empty, error)
	UpgradePkgPlanDetailGet(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error)
	UpgradePkgPlanDetailList(context.Context, *UpgradePkgPlanDetailListReq) (*UpgradePkgPlanDetailListResp, error)
	// UpgradeResPlan
	UpgradeResPlanAdd(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error)
	UpgradeResPlanUpdate(context.Context, *UpgradeResPlanVo) (*Empty, error)
	UpgradeResPlanDel(context.Context, *Ids) (*Empty, error)
	UpgradeResPlanGet(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error)
	UpgradeResPlanList(context.Context, *UpgradeResPlanListReq) (*UpgradeResPlanListResp, error)
	// UpgradeResPlanDetail
	UpgradeResPlanDetailAdd(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailUpdate(context.Context, *UpgradeResPlanDetailVo) (*Empty, error)
	UpgradeResPlanDetailDel(context.Context, *Ids) (*Empty, error)
	UpgradeResPlanDetailGet(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error)
	UpgradeResPlanDetailList(context.Context, *UpgradeResPlanDetailListReq) (*UpgradeResPlanDetailListResp, error)
	mustEmbedUnimplementedGoPmpClientServer()
}

// UnimplementedGoPmpClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoPmpClientServer struct{}

func (UnimplementedGoPmpClientServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamAdd(context.Context, *GlobalParamVo) (*GlobalParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamAdd not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamUpdate(context.Context, *GlobalParamVo) (*GlobalParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamDel not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamGet(context.Context, *GlobalParamVo) (*GlobalParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamGet not implemented")
}
func (UnimplementedGoPmpClientServer) GlobalParamList(context.Context, *GlobalParamListReq) (*GlobalParamListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalParamList not implemented")
}
func (UnimplementedGoPmpClientServer) ProductAdd(context.Context, *ProductVo) (*ProductVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAdd not implemented")
}
func (UnimplementedGoPmpClientServer) ProductUpdate(context.Context, *ProductVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) ProductDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDel not implemented")
}
func (UnimplementedGoPmpClientServer) ProductGet(context.Context, *ProductVo) (*ProductVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductGet not implemented")
}
func (UnimplementedGoPmpClientServer) ProductList(context.Context, *ProductListReq) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedGoPmpClientServer) ProductAll(context.Context, *Request) (*ProductListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductAll not implemented")
}
func (UnimplementedGoPmpClientServer) ProductParamUpdate(context.Context, *ProductParamVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductParamUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) ProductParamGet(context.Context, *ProductParamVo) (*ProductParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductParamGet not implemented")
}
func (UnimplementedGoPmpClientServer) ProductParamList(context.Context, *ProductParamListReq) (*ProductParamListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductParamList not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionAdd(context.Context, *ProductActionVo) (*ProductActionVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionAdd not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionUpdate(context.Context, *ProductActionVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionDel not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionGet(context.Context, *ProductActionReq) (*ProductActionVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionGet not implemented")
}
func (UnimplementedGoPmpClientServer) ProductActionList(context.Context, *ProductActionListReq) (*ProductActionListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductActionList not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamAdd(context.Context, *AreaParamVo) (*AreaParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamAdd not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamUpdate(context.Context, *AreaParamVo) (*AreaParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamDel not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamGet(context.Context, *AreaParamVo) (*AreaParamVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamGet not implemented")
}
func (UnimplementedGoPmpClientServer) AreaParamList(context.Context, *AreaParamListReq) (*AreaParamListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaParamList not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageAdd(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageAdd not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageUpdate(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageDel not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageGet(context.Context, *NationalLanguageVo) (*NationalLanguageVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageGet not implemented")
}
func (UnimplementedGoPmpClientServer) NationalLanguageList(context.Context, *NationalLanguageListReq) (*NationalLanguageListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NationalLanguageList not implemented")
}
func (UnimplementedGoPmpClientServer) TipAdd(context.Context, *TipVo) (*TipVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipAdd not implemented")
}
func (UnimplementedGoPmpClientServer) TipUpdate(context.Context, *TipVo) (*TipVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) TipDel(context.Context, *TipDelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipDel not implemented")
}
func (UnimplementedGoPmpClientServer) TipGet(context.Context, *TipVo) (*TipVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipGet not implemented")
}
func (UnimplementedGoPmpClientServer) TipList(context.Context, *TipListReq) (*TipListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TipList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResAdd(context.Context, *UpgradeResVo) (*UpgradeResVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResUpdate(context.Context, *UpgradeResVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResDel(context.Context, *ResourceDelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResGet(context.Context, *UpgradeResGetReq) (*UpgradeResVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResList(context.Context, *UpgradeResListReq) (*UpgradeResListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgAdd(context.Context, *UpgradePkgVo) (*UpgradePkgVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgUpdate(context.Context, *UpgradePkgVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgGet(context.Context, *UpgradePkgGetReq) (*UpgradePkgVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgList(context.Context, *UpgradePkgListReq) (*UpgradePkgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigAdd(context.Context, *UpgradeResConfigVo) (*UpgradeResConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigUpdate(context.Context, *UpgradeResConfigVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigGet(context.Context, *UpgradeResConfigGetReq) (*UpgradeResConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResConfigList(context.Context, *UpgradeResConfigListReq) (*UpgradeResConfigListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResConfigList not implemented")
}
func (UnimplementedGoPmpClientServer) DictAdd(context.Context, *DictVo) (*DictVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictAdd not implemented")
}
func (UnimplementedGoPmpClientServer) DictUpdate(context.Context, *DictVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) DictDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDel not implemented")
}
func (UnimplementedGoPmpClientServer) DictGet(context.Context, *DictGetReq) (*DictVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictGet not implemented")
}
func (UnimplementedGoPmpClientServer) DictList(context.Context, *DictListReq) (*DictListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanAdd(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanUpdate(context.Context, *UpgradePkgPlanVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanGet(context.Context, *UpgradePkgPlanVo) (*UpgradePkgPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanList(context.Context, *UpgradePkgPlanListReq) (*UpgradePkgPlanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailAdd(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailUpdate(context.Context, *UpgradePkgPlanDetailVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailGet(context.Context, *UpgradePkgPlanDetailVo) (*UpgradePkgPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradePkgPlanDetailList(context.Context, *UpgradePkgPlanDetailListReq) (*UpgradePkgPlanDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradePkgPlanDetailList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanAdd(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanUpdate(context.Context, *UpgradeResPlanVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanGet(context.Context, *UpgradeResPlanVo) (*UpgradeResPlanVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanList(context.Context, *UpgradeResPlanListReq) (*UpgradeResPlanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanList not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailAdd(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailAdd not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailUpdate(context.Context, *UpgradeResPlanDetailVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailUpdate not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailDel not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailGet(context.Context, *UpgradeResPlanDetailVo) (*UpgradeResPlanDetailVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailGet not implemented")
}
func (UnimplementedGoPmpClientServer) UpgradeResPlanDetailList(context.Context, *UpgradeResPlanDetailListReq) (*UpgradeResPlanDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeResPlanDetailList not implemented")
}
func (UnimplementedGoPmpClientServer) mustEmbedUnimplementedGoPmpClientServer() {}
func (UnimplementedGoPmpClientServer) testEmbeddedByValue()                     {}

// UnsafeGoPmpClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoPmpClientServer will
// result in compilation errors.
type UnsafeGoPmpClientServer interface {
	mustEmbedUnimplementedGoPmpClientServer()
}

func RegisterGoPmpClientServer(s grpc.ServiceRegistrar, srv GoPmpClientServer) {
	// If the following call pancis, it indicates UnimplementedGoPmpClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoPmpClient_ServiceDesc, srv)
}

func _GoPmpClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamAdd(ctx, req.(*GlobalParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamUpdate(ctx, req.(*GlobalParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamGet(ctx, req.(*GlobalParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_GlobalParamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalParamListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).GlobalParamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_GlobalParamList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).GlobalParamList(ctx, req.(*GlobalParamListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductAdd(ctx, req.(*ProductVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductUpdate(ctx, req.(*ProductVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductGet(ctx, req.(*ProductVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductList(ctx, req.(*ProductListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductParamUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductParamUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductParamUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductParamUpdate(ctx, req.(*ProductParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductParamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductParamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductParamGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductParamGet(ctx, req.(*ProductParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductParamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductParamListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductParamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductParamList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductParamList(ctx, req.(*ProductParamListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionAdd(ctx, req.(*ProductActionVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionUpdate(ctx, req.(*ProductActionVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionGet(ctx, req.(*ProductActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_ProductActionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductActionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).ProductActionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_ProductActionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).ProductActionList(ctx, req.(*ProductActionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamAdd(ctx, req.(*AreaParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamUpdate(ctx, req.(*AreaParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamGet(ctx, req.(*AreaParamVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_AreaParamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaParamListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).AreaParamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_AreaParamList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).AreaParamList(ctx, req.(*AreaParamListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageAdd(ctx, req.(*NationalLanguageVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageUpdate(ctx, req.(*NationalLanguageVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageGet(ctx, req.(*NationalLanguageVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_NationalLanguageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NationalLanguageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).NationalLanguageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_NationalLanguageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).NationalLanguageList(ctx, req.(*NationalLanguageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipAdd(ctx, req.(*TipVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipUpdate(ctx, req.(*TipVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipDel(ctx, req.(*TipDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipGet(ctx, req.(*TipVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_TipList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).TipList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_TipList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).TipList(ctx, req.(*TipListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResAdd(ctx, req.(*UpgradeResVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResUpdate(ctx, req.(*UpgradeResVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResDel(ctx, req.(*ResourceDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResGet(ctx, req.(*UpgradeResGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResList(ctx, req.(*UpgradeResListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgAdd(ctx, req.(*UpgradePkgVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgUpdate(ctx, req.(*UpgradePkgVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgGet(ctx, req.(*UpgradePkgGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgList(ctx, req.(*UpgradePkgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigAdd(ctx, req.(*UpgradeResConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigUpdate(ctx, req.(*UpgradeResConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigGet(ctx, req.(*UpgradeResConfigGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResConfigList(ctx, req.(*UpgradeResConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictAdd(ctx, req.(*DictVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictUpdate(ctx, req.(*DictVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictGet(ctx, req.(*DictGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_DictList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).DictList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_DictList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).DictList(ctx, req.(*DictListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanAdd(ctx, req.(*UpgradePkgPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanUpdate(ctx, req.(*UpgradePkgPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanGet(ctx, req.(*UpgradePkgPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanList(ctx, req.(*UpgradePkgPlanListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailAdd(ctx, req.(*UpgradePkgPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailUpdate(ctx, req.(*UpgradePkgPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailGet(ctx, req.(*UpgradePkgPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradePkgPlanDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradePkgPlanDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradePkgPlanDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradePkgPlanDetailList(ctx, req.(*UpgradePkgPlanDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanAdd(ctx, req.(*UpgradeResPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanUpdate(ctx, req.(*UpgradeResPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanGet(ctx, req.(*UpgradeResPlanVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanList(ctx, req.(*UpgradeResPlanListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailAdd(ctx, req.(*UpgradeResPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailUpdate(ctx, req.(*UpgradeResPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailGet(ctx, req.(*UpgradeResPlanDetailVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPmpClient_UpgradeResPlanDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeResPlanDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPmpClient_UpgradeResPlanDetailList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPmpClientServer).UpgradeResPlanDetailList(ctx, req.(*UpgradeResPlanDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoPmpClient_ServiceDesc is the grpc.ServiceDesc for GoPmpClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoPmpClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gorpc.GoPmpClient",
	HandlerType: (*GoPmpClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoPmpClient_Ping_Handler,
		},
		{
			MethodName: "GlobalParamAdd",
			Handler:    _GoPmpClient_GlobalParamAdd_Handler,
		},
		{
			MethodName: "GlobalParamUpdate",
			Handler:    _GoPmpClient_GlobalParamUpdate_Handler,
		},
		{
			MethodName: "GlobalParamDel",
			Handler:    _GoPmpClient_GlobalParamDel_Handler,
		},
		{
			MethodName: "GlobalParamGet",
			Handler:    _GoPmpClient_GlobalParamGet_Handler,
		},
		{
			MethodName: "GlobalParamList",
			Handler:    _GoPmpClient_GlobalParamList_Handler,
		},
		{
			MethodName: "ProductAdd",
			Handler:    _GoPmpClient_ProductAdd_Handler,
		},
		{
			MethodName: "ProductUpdate",
			Handler:    _GoPmpClient_ProductUpdate_Handler,
		},
		{
			MethodName: "ProductDel",
			Handler:    _GoPmpClient_ProductDel_Handler,
		},
		{
			MethodName: "ProductGet",
			Handler:    _GoPmpClient_ProductGet_Handler,
		},
		{
			MethodName: "ProductList",
			Handler:    _GoPmpClient_ProductList_Handler,
		},
		{
			MethodName: "ProductAll",
			Handler:    _GoPmpClient_ProductAll_Handler,
		},
		{
			MethodName: "ProductParamUpdate",
			Handler:    _GoPmpClient_ProductParamUpdate_Handler,
		},
		{
			MethodName: "ProductParamGet",
			Handler:    _GoPmpClient_ProductParamGet_Handler,
		},
		{
			MethodName: "ProductParamList",
			Handler:    _GoPmpClient_ProductParamList_Handler,
		},
		{
			MethodName: "ProductActionAdd",
			Handler:    _GoPmpClient_ProductActionAdd_Handler,
		},
		{
			MethodName: "ProductActionUpdate",
			Handler:    _GoPmpClient_ProductActionUpdate_Handler,
		},
		{
			MethodName: "ProductActionDel",
			Handler:    _GoPmpClient_ProductActionDel_Handler,
		},
		{
			MethodName: "ProductActionGet",
			Handler:    _GoPmpClient_ProductActionGet_Handler,
		},
		{
			MethodName: "ProductActionList",
			Handler:    _GoPmpClient_ProductActionList_Handler,
		},
		{
			MethodName: "AreaParamAdd",
			Handler:    _GoPmpClient_AreaParamAdd_Handler,
		},
		{
			MethodName: "AreaParamUpdate",
			Handler:    _GoPmpClient_AreaParamUpdate_Handler,
		},
		{
			MethodName: "AreaParamDel",
			Handler:    _GoPmpClient_AreaParamDel_Handler,
		},
		{
			MethodName: "AreaParamGet",
			Handler:    _GoPmpClient_AreaParamGet_Handler,
		},
		{
			MethodName: "AreaParamList",
			Handler:    _GoPmpClient_AreaParamList_Handler,
		},
		{
			MethodName: "NationalLanguageAdd",
			Handler:    _GoPmpClient_NationalLanguageAdd_Handler,
		},
		{
			MethodName: "NationalLanguageUpdate",
			Handler:    _GoPmpClient_NationalLanguageUpdate_Handler,
		},
		{
			MethodName: "NationalLanguageDel",
			Handler:    _GoPmpClient_NationalLanguageDel_Handler,
		},
		{
			MethodName: "NationalLanguageGet",
			Handler:    _GoPmpClient_NationalLanguageGet_Handler,
		},
		{
			MethodName: "NationalLanguageList",
			Handler:    _GoPmpClient_NationalLanguageList_Handler,
		},
		{
			MethodName: "TipAdd",
			Handler:    _GoPmpClient_TipAdd_Handler,
		},
		{
			MethodName: "TipUpdate",
			Handler:    _GoPmpClient_TipUpdate_Handler,
		},
		{
			MethodName: "TipDel",
			Handler:    _GoPmpClient_TipDel_Handler,
		},
		{
			MethodName: "TipGet",
			Handler:    _GoPmpClient_TipGet_Handler,
		},
		{
			MethodName: "TipList",
			Handler:    _GoPmpClient_TipList_Handler,
		},
		{
			MethodName: "UpgradeResAdd",
			Handler:    _GoPmpClient_UpgradeResAdd_Handler,
		},
		{
			MethodName: "UpgradeResUpdate",
			Handler:    _GoPmpClient_UpgradeResUpdate_Handler,
		},
		{
			MethodName: "UpgradeResDel",
			Handler:    _GoPmpClient_UpgradeResDel_Handler,
		},
		{
			MethodName: "UpgradeResGet",
			Handler:    _GoPmpClient_UpgradeResGet_Handler,
		},
		{
			MethodName: "UpgradeResList",
			Handler:    _GoPmpClient_UpgradeResList_Handler,
		},
		{
			MethodName: "UpgradePkgAdd",
			Handler:    _GoPmpClient_UpgradePkgAdd_Handler,
		},
		{
			MethodName: "UpgradePkgUpdate",
			Handler:    _GoPmpClient_UpgradePkgUpdate_Handler,
		},
		{
			MethodName: "UpgradePkgDel",
			Handler:    _GoPmpClient_UpgradePkgDel_Handler,
		},
		{
			MethodName: "UpgradePkgGet",
			Handler:    _GoPmpClient_UpgradePkgGet_Handler,
		},
		{
			MethodName: "UpgradePkgList",
			Handler:    _GoPmpClient_UpgradePkgList_Handler,
		},
		{
			MethodName: "UpgradeResConfigAdd",
			Handler:    _GoPmpClient_UpgradeResConfigAdd_Handler,
		},
		{
			MethodName: "UpgradeResConfigUpdate",
			Handler:    _GoPmpClient_UpgradeResConfigUpdate_Handler,
		},
		{
			MethodName: "UpgradeResConfigDel",
			Handler:    _GoPmpClient_UpgradeResConfigDel_Handler,
		},
		{
			MethodName: "UpgradeResConfigGet",
			Handler:    _GoPmpClient_UpgradeResConfigGet_Handler,
		},
		{
			MethodName: "UpgradeResConfigList",
			Handler:    _GoPmpClient_UpgradeResConfigList_Handler,
		},
		{
			MethodName: "DictAdd",
			Handler:    _GoPmpClient_DictAdd_Handler,
		},
		{
			MethodName: "DictUpdate",
			Handler:    _GoPmpClient_DictUpdate_Handler,
		},
		{
			MethodName: "DictDel",
			Handler:    _GoPmpClient_DictDel_Handler,
		},
		{
			MethodName: "DictGet",
			Handler:    _GoPmpClient_DictGet_Handler,
		},
		{
			MethodName: "DictList",
			Handler:    _GoPmpClient_DictList_Handler,
		},
		{
			MethodName: "UpgradePkgPlanAdd",
			Handler:    _GoPmpClient_UpgradePkgPlanAdd_Handler,
		},
		{
			MethodName: "UpgradePkgPlanUpdate",
			Handler:    _GoPmpClient_UpgradePkgPlanUpdate_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDel",
			Handler:    _GoPmpClient_UpgradePkgPlanDel_Handler,
		},
		{
			MethodName: "UpgradePkgPlanGet",
			Handler:    _GoPmpClient_UpgradePkgPlanGet_Handler,
		},
		{
			MethodName: "UpgradePkgPlanList",
			Handler:    _GoPmpClient_UpgradePkgPlanList_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailAdd",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailAdd_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailUpdate",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailUpdate_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailDel",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailDel_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailGet",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailGet_Handler,
		},
		{
			MethodName: "UpgradePkgPlanDetailList",
			Handler:    _GoPmpClient_UpgradePkgPlanDetailList_Handler,
		},
		{
			MethodName: "UpgradeResPlanAdd",
			Handler:    _GoPmpClient_UpgradeResPlanAdd_Handler,
		},
		{
			MethodName: "UpgradeResPlanUpdate",
			Handler:    _GoPmpClient_UpgradeResPlanUpdate_Handler,
		},
		{
			MethodName: "UpgradeResPlanDel",
			Handler:    _GoPmpClient_UpgradeResPlanDel_Handler,
		},
		{
			MethodName: "UpgradeResPlanGet",
			Handler:    _GoPmpClient_UpgradeResPlanGet_Handler,
		},
		{
			MethodName: "UpgradeResPlanList",
			Handler:    _GoPmpClient_UpgradeResPlanList_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailAdd",
			Handler:    _GoPmpClient_UpgradeResPlanDetailAdd_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailUpdate",
			Handler:    _GoPmpClient_UpgradeResPlanDetailUpdate_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailDel",
			Handler:    _GoPmpClient_UpgradeResPlanDetailDel_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailGet",
			Handler:    _GoPmpClient_UpgradeResPlanDetailGet_Handler,
		},
		{
			MethodName: "UpgradeResPlanDetailList",
			Handler:    _GoPmpClient_UpgradeResPlanDetailList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorpc.proto",
}

const (
	GoSysClient_Ping_FullMethodName  = "/gorpc.GoSysClient/Ping"
	GoSysClient_Login_FullMethodName = "/gorpc.GoSysClient/Login"
)

// GoSysClientClient is the client API for GoSysClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 后续扩展
// pmp 模块：
// 登录
// 角色管理(sys_role)
// 用户管理(sys_user)
// 菜单管理(sys_menu-CRUD(5个权限))
// 字典管理(sys_dict)，组织管理(sys_dep)
// 岗位管理(sys_post)
type GoSysClientClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 登录
	Login(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*Response, error)
}

type goSysClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoSysClientClient(cc grpc.ClientConnInterface) GoSysClientClient {
	return &goSysClientClient{cc}
}

func (c *goSysClientClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoSysClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goSysClientClient) Login(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoSysClient_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoSysClientServer is the server API for GoSysClient service.
// All implementations must embed UnimplementedGoSysClientServer
// for forward compatibility.
//
// 后续扩展
// pmp 模块：
// 登录
// 角色管理(sys_role)
// 用户管理(sys_user)
// 菜单管理(sys_menu-CRUD(5个权限))
// 字典管理(sys_dict)，组织管理(sys_dep)
// 岗位管理(sys_post)
type GoSysClientServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 登录
	Login(context.Context, *BaseReq) (*Response, error)
	mustEmbedUnimplementedGoSysClientServer()
}

// UnimplementedGoSysClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoSysClientServer struct{}

func (UnimplementedGoSysClientServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoSysClientServer) Login(context.Context, *BaseReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGoSysClientServer) mustEmbedUnimplementedGoSysClientServer() {}
func (UnimplementedGoSysClientServer) testEmbeddedByValue()                     {}

// UnsafeGoSysClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoSysClientServer will
// result in compilation errors.
type UnsafeGoSysClientServer interface {
	mustEmbedUnimplementedGoSysClientServer()
}

func RegisterGoSysClientServer(s grpc.ServiceRegistrar, srv GoSysClientServer) {
	// If the following call pancis, it indicates UnimplementedGoSysClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoSysClient_ServiceDesc, srv)
}

func _GoSysClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSysClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSysClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSysClientServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoSysClient_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoSysClientServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoSysClient_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoSysClientServer).Login(ctx, req.(*BaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoSysClient_ServiceDesc is the grpc.ServiceDesc for GoSysClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoSysClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gorpc.GoSysClient",
	HandlerType: (*GoSysClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoSysClient_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GoSysClient_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorpc.proto",
}

const (
	GoUserClient_Ping_FullMethodName                = "/gorpc.GoUserClient/Ping"
	GoUserClient_Login_FullMethodName               = "/gorpc.GoUserClient/Login"
	GoUserClient_UserAppConfigAdd_FullMethodName    = "/gorpc.GoUserClient/UserAppConfigAdd"
	GoUserClient_UserAppConfigUpdate_FullMethodName = "/gorpc.GoUserClient/UserAppConfigUpdate"
	GoUserClient_UserAppConfigDel_FullMethodName    = "/gorpc.GoUserClient/UserAppConfigDel"
	GoUserClient_UserAppConfigGet_FullMethodName    = "/gorpc.GoUserClient/UserAppConfigGet"
	GoUserClient_UserAppConfigList_FullMethodName   = "/gorpc.GoUserClient/UserAppConfigList"
	GoUserClient_DeviceAdd_FullMethodName           = "/gorpc.GoUserClient/DeviceAdd"
	GoUserClient_DeviceUpdate_FullMethodName        = "/gorpc.GoUserClient/DeviceUpdate"
	GoUserClient_DeviceDel_FullMethodName           = "/gorpc.GoUserClient/DeviceDel"
	GoUserClient_DeviceGet_FullMethodName           = "/gorpc.GoUserClient/DeviceGet"
	GoUserClient_DeviceList_FullMethodName          = "/gorpc.GoUserClient/DeviceList"
	GoUserClient_AccountAdd_FullMethodName          = "/gorpc.GoUserClient/AccountAdd"
	GoUserClient_AccountUpdate_FullMethodName       = "/gorpc.GoUserClient/AccountUpdate"
	GoUserClient_AccountDel_FullMethodName          = "/gorpc.GoUserClient/AccountDel"
	GoUserClient_AccountGet_FullMethodName          = "/gorpc.GoUserClient/AccountGet"
	GoUserClient_AccountList_FullMethodName         = "/gorpc.GoUserClient/AccountList"
	GoUserClient_AccountDeviceAdd_FullMethodName    = "/gorpc.GoUserClient/AccountDeviceAdd"
	GoUserClient_AccountDeviceUpdate_FullMethodName = "/gorpc.GoUserClient/AccountDeviceUpdate"
	GoUserClient_AccountDeviceDel_FullMethodName    = "/gorpc.GoUserClient/AccountDeviceDel"
	GoUserClient_AccountDeviceGet_FullMethodName    = "/gorpc.GoUserClient/AccountDeviceGet"
	GoUserClient_AccountDeviceList_FullMethodName   = "/gorpc.GoUserClient/AccountDeviceList"
)

// GoUserClientClient is the client API for GoUserClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户模块
type GoUserClientClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 登录
	Login(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*Response, error)
	// 用户app配置管理（ring）
	UserAppConfigAdd(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error)
	UserAppConfigUpdate(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error)
	UserAppConfigDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	UserAppConfigGet(ctx context.Context, in *UserAppConfigGetReq, opts ...grpc.CallOption) (*UserAppConfigVo, error)
	UserAppConfigList(ctx context.Context, in *UserAppConfigListReq, opts ...grpc.CallOption) (*UserAppConfigListRes, error)
	// 设备管理
	DeviceAdd(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error)
	DeviceUpdate(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error)
	DeviceDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	DeviceGet(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error)
	DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListRes, error)
	// Account
	AccountAdd(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error)
	AccountUpdate(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error)
	AccountDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	AccountGet(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error)
	AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error)
	// AccountDevice
	AccountDeviceAdd(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error)
	AccountDeviceUpdate(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error)
	AccountDeviceDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	AccountDeviceGet(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error)
	AccountDeviceList(ctx context.Context, in *AccountDeviceListReq, opts ...grpc.CallOption) (*AccountDeviceListResp, error)
}

type goUserClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoUserClientClient(cc grpc.ClientConnInterface) GoUserClientClient {
	return &goUserClientClient{cc}
}

func (c *goUserClientClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoUserClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) Login(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoUserClient_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigAdd(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigVo)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigUpdate(ctx context.Context, in *UserAppConfigVo, opts ...grpc.CallOption) (*UserAppConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigVo)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigGet(ctx context.Context, in *UserAppConfigGetReq, opts ...grpc.CallOption) (*UserAppConfigVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigVo)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) UserAppConfigList(ctx context.Context, in *UserAppConfigListReq, opts ...grpc.CallOption) (*UserAppConfigListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAppConfigListRes)
	err := c.cc.Invoke(ctx, GoUserClient_UserAppConfigList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceAdd(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceUpdate(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceGet(ctx context.Context, in *DeviceVo, opts ...grpc.CallOption) (*DeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) DeviceList(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceListRes)
	err := c.cc.Invoke(ctx, GoUserClient_DeviceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountAdd(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountUpdate(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountGet(ctx context.Context, in *AccountVo, opts ...grpc.CallOption) (*AccountVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountList(ctx context.Context, in *AccountListReq, opts ...grpc.CallOption) (*AccountListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountListResp)
	err := c.cc.Invoke(ctx, GoUserClient_AccountList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceAdd(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceUpdate(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceGet(ctx context.Context, in *AccountDeviceVo, opts ...grpc.CallOption) (*AccountDeviceVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceVo)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goUserClientClient) AccountDeviceList(ctx context.Context, in *AccountDeviceListReq, opts ...grpc.CallOption) (*AccountDeviceListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountDeviceListResp)
	err := c.cc.Invoke(ctx, GoUserClient_AccountDeviceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoUserClientServer is the server API for GoUserClient service.
// All implementations must embed UnimplementedGoUserClientServer
// for forward compatibility.
//
// 用户模块
type GoUserClientServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 登录
	Login(context.Context, *BaseReq) (*Response, error)
	// 用户app配置管理（ring）
	UserAppConfigAdd(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error)
	UserAppConfigUpdate(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error)
	UserAppConfigDel(context.Context, *Ids) (*Empty, error)
	UserAppConfigGet(context.Context, *UserAppConfigGetReq) (*UserAppConfigVo, error)
	UserAppConfigList(context.Context, *UserAppConfigListReq) (*UserAppConfigListRes, error)
	// 设备管理
	DeviceAdd(context.Context, *DeviceVo) (*DeviceVo, error)
	DeviceUpdate(context.Context, *DeviceVo) (*DeviceVo, error)
	DeviceDel(context.Context, *Ids) (*Empty, error)
	DeviceGet(context.Context, *DeviceVo) (*DeviceVo, error)
	DeviceList(context.Context, *DeviceListReq) (*DeviceListRes, error)
	// Account
	AccountAdd(context.Context, *AccountVo) (*AccountVo, error)
	AccountUpdate(context.Context, *AccountVo) (*AccountVo, error)
	AccountDel(context.Context, *Ids) (*Empty, error)
	AccountGet(context.Context, *AccountVo) (*AccountVo, error)
	AccountList(context.Context, *AccountListReq) (*AccountListResp, error)
	// AccountDevice
	AccountDeviceAdd(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error)
	AccountDeviceUpdate(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error)
	AccountDeviceDel(context.Context, *Ids) (*Empty, error)
	AccountDeviceGet(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error)
	AccountDeviceList(context.Context, *AccountDeviceListReq) (*AccountDeviceListResp, error)
	mustEmbedUnimplementedGoUserClientServer()
}

// UnimplementedGoUserClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoUserClientServer struct{}

func (UnimplementedGoUserClientServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoUserClientServer) Login(context.Context, *BaseReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigAdd(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigAdd not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigUpdate(context.Context, *UserAppConfigVo) (*UserAppConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigUpdate not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigDel not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigGet(context.Context, *UserAppConfigGetReq) (*UserAppConfigVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigGet not implemented")
}
func (UnimplementedGoUserClientServer) UserAppConfigList(context.Context, *UserAppConfigListReq) (*UserAppConfigListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAppConfigList not implemented")
}
func (UnimplementedGoUserClientServer) DeviceAdd(context.Context, *DeviceVo) (*DeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceAdd not implemented")
}
func (UnimplementedGoUserClientServer) DeviceUpdate(context.Context, *DeviceVo) (*DeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceUpdate not implemented")
}
func (UnimplementedGoUserClientServer) DeviceDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceDel not implemented")
}
func (UnimplementedGoUserClientServer) DeviceGet(context.Context, *DeviceVo) (*DeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGet not implemented")
}
func (UnimplementedGoUserClientServer) DeviceList(context.Context, *DeviceListReq) (*DeviceListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceList not implemented")
}
func (UnimplementedGoUserClientServer) AccountAdd(context.Context, *AccountVo) (*AccountVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAdd not implemented")
}
func (UnimplementedGoUserClientServer) AccountUpdate(context.Context, *AccountVo) (*AccountVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdate not implemented")
}
func (UnimplementedGoUserClientServer) AccountDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDel not implemented")
}
func (UnimplementedGoUserClientServer) AccountGet(context.Context, *AccountVo) (*AccountVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGet not implemented")
}
func (UnimplementedGoUserClientServer) AccountList(context.Context, *AccountListReq) (*AccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountList not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceAdd(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceAdd not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceUpdate(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceUpdate not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceDel not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceGet(context.Context, *AccountDeviceVo) (*AccountDeviceVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceGet not implemented")
}
func (UnimplementedGoUserClientServer) AccountDeviceList(context.Context, *AccountDeviceListReq) (*AccountDeviceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeviceList not implemented")
}
func (UnimplementedGoUserClientServer) mustEmbedUnimplementedGoUserClientServer() {}
func (UnimplementedGoUserClientServer) testEmbeddedByValue()                      {}

// UnsafeGoUserClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoUserClientServer will
// result in compilation errors.
type UnsafeGoUserClientServer interface {
	mustEmbedUnimplementedGoUserClientServer()
}

func RegisterGoUserClientServer(s grpc.ServiceRegistrar, srv GoUserClientServer) {
	// If the following call pancis, it indicates UnimplementedGoUserClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoUserClient_ServiceDesc, srv)
}

func _GoUserClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).Login(ctx, req.(*BaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigAdd(ctx, req.(*UserAppConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigUpdate(ctx, req.(*UserAppConfigVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigGet(ctx, req.(*UserAppConfigGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_UserAppConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAppConfigListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).UserAppConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_UserAppConfigList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).UserAppConfigList(ctx, req.(*UserAppConfigListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceAdd(ctx, req.(*DeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceUpdate(ctx, req.(*DeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceGet(ctx, req.(*DeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_DeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).DeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_DeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).DeviceList(ctx, req.(*DeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountAdd(ctx, req.(*AccountVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountUpdate(ctx, req.(*AccountVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountGet(ctx, req.(*AccountVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountList(ctx, req.(*AccountListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceAdd(ctx, req.(*AccountDeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceUpdate(ctx, req.(*AccountDeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceGet(ctx, req.(*AccountDeviceVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoUserClient_AccountDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeviceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoUserClientServer).AccountDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoUserClient_AccountDeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoUserClientServer).AccountDeviceList(ctx, req.(*AccountDeviceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoUserClient_ServiceDesc is the grpc.ServiceDesc for GoUserClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoUserClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gorpc.GoUserClient",
	HandlerType: (*GoUserClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoUserClient_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GoUserClient_Login_Handler,
		},
		{
			MethodName: "UserAppConfigAdd",
			Handler:    _GoUserClient_UserAppConfigAdd_Handler,
		},
		{
			MethodName: "UserAppConfigUpdate",
			Handler:    _GoUserClient_UserAppConfigUpdate_Handler,
		},
		{
			MethodName: "UserAppConfigDel",
			Handler:    _GoUserClient_UserAppConfigDel_Handler,
		},
		{
			MethodName: "UserAppConfigGet",
			Handler:    _GoUserClient_UserAppConfigGet_Handler,
		},
		{
			MethodName: "UserAppConfigList",
			Handler:    _GoUserClient_UserAppConfigList_Handler,
		},
		{
			MethodName: "DeviceAdd",
			Handler:    _GoUserClient_DeviceAdd_Handler,
		},
		{
			MethodName: "DeviceUpdate",
			Handler:    _GoUserClient_DeviceUpdate_Handler,
		},
		{
			MethodName: "DeviceDel",
			Handler:    _GoUserClient_DeviceDel_Handler,
		},
		{
			MethodName: "DeviceGet",
			Handler:    _GoUserClient_DeviceGet_Handler,
		},
		{
			MethodName: "DeviceList",
			Handler:    _GoUserClient_DeviceList_Handler,
		},
		{
			MethodName: "AccountAdd",
			Handler:    _GoUserClient_AccountAdd_Handler,
		},
		{
			MethodName: "AccountUpdate",
			Handler:    _GoUserClient_AccountUpdate_Handler,
		},
		{
			MethodName: "AccountDel",
			Handler:    _GoUserClient_AccountDel_Handler,
		},
		{
			MethodName: "AccountGet",
			Handler:    _GoUserClient_AccountGet_Handler,
		},
		{
			MethodName: "AccountList",
			Handler:    _GoUserClient_AccountList_Handler,
		},
		{
			MethodName: "AccountDeviceAdd",
			Handler:    _GoUserClient_AccountDeviceAdd_Handler,
		},
		{
			MethodName: "AccountDeviceUpdate",
			Handler:    _GoUserClient_AccountDeviceUpdate_Handler,
		},
		{
			MethodName: "AccountDeviceDel",
			Handler:    _GoUserClient_AccountDeviceDel_Handler,
		},
		{
			MethodName: "AccountDeviceGet",
			Handler:    _GoUserClient_AccountDeviceGet_Handler,
		},
		{
			MethodName: "AccountDeviceList",
			Handler:    _GoUserClient_AccountDeviceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorpc.proto",
}

const (
	GoVpnClient_Ping_FullMethodName                    = "/gorpc.GoVpnClient/Ping"
	GoVpnClient_Transaction_FullMethodName             = "/gorpc.GoVpnClient/Transaction"
	GoVpnClient_VpnTagAdd_FullMethodName               = "/gorpc.GoVpnClient/VpnTagAdd"
	GoVpnClient_VpnTagUpdate_FullMethodName            = "/gorpc.GoVpnClient/VpnTagUpdate"
	GoVpnClient_VpnTagDel_FullMethodName               = "/gorpc.GoVpnClient/VpnTagDel"
	GoVpnClient_VpnTagGet_FullMethodName               = "/gorpc.GoVpnClient/VpnTagGet"
	GoVpnClient_VpnTagList_FullMethodName              = "/gorpc.GoVpnClient/VpnTagList"
	GoVpnClient_VpnGroupAdd_FullMethodName             = "/gorpc.GoVpnClient/VpnGroupAdd"
	GoVpnClient_VpnGroupUpdate_FullMethodName          = "/gorpc.GoVpnClient/VpnGroupUpdate"
	GoVpnClient_VpnGroupDel_FullMethodName             = "/gorpc.GoVpnClient/VpnGroupDel"
	GoVpnClient_VpnGroupList_FullMethodName            = "/gorpc.GoVpnClient/VpnGroupList"
	GoVpnClient_VpnGroupTagAdd_FullMethodName          = "/gorpc.GoVpnClient/VpnGroupTagAdd"
	GoVpnClient_VpnGroupTagUpdate_FullMethodName       = "/gorpc.GoVpnClient/VpnGroupTagUpdate"
	GoVpnClient_VpnGroupTagDel_FullMethodName          = "/gorpc.GoVpnClient/VpnGroupTagDel"
	GoVpnClient_VpnGroupTagGet_FullMethodName          = "/gorpc.GoVpnClient/VpnGroupTagGet"
	GoVpnClient_VpnGroupTagList_FullMethodName         = "/gorpc.GoVpnClient/VpnGroupTagList"
	GoVpnClient_VpnLocationAdd_FullMethodName          = "/gorpc.GoVpnClient/VpnLocationAdd"
	GoVpnClient_VpnLocationUpdate_FullMethodName       = "/gorpc.GoVpnClient/VpnLocationUpdate"
	GoVpnClient_VpnLocationDel_FullMethodName          = "/gorpc.GoVpnClient/VpnLocationDel"
	GoVpnClient_VpnLocationGet_FullMethodName          = "/gorpc.GoVpnClient/VpnLocationGet"
	GoVpnClient_VpnLocationList_FullMethodName         = "/gorpc.GoVpnClient/VpnLocationList"
	GoVpnClient_VpnServerAdd_FullMethodName            = "/gorpc.GoVpnClient/VpnServerAdd"
	GoVpnClient_VpnServerUpdate_FullMethodName         = "/gorpc.GoVpnClient/VpnServerUpdate"
	GoVpnClient_VpnServerDel_FullMethodName            = "/gorpc.GoVpnClient/VpnServerDel"
	GoVpnClient_VpnServerGet_FullMethodName            = "/gorpc.GoVpnClient/VpnServerGet"
	GoVpnClient_VpnServerList_FullMethodName           = "/gorpc.GoVpnClient/VpnServerList"
	GoVpnClient_VpnServerLocationAdd_FullMethodName    = "/gorpc.GoVpnClient/VpnServerLocationAdd"
	GoVpnClient_VpnServerLocationUpdate_FullMethodName = "/gorpc.GoVpnClient/VpnServerLocationUpdate"
	GoVpnClient_VpnServerLocationDel_FullMethodName    = "/gorpc.GoVpnClient/VpnServerLocationDel"
	GoVpnClient_VpnServerLocationGet_FullMethodName    = "/gorpc.GoVpnClient/VpnServerLocationGet"
	GoVpnClient_VpnServerLocationList_FullMethodName   = "/gorpc.GoVpnClient/VpnServerLocationList"
	GoVpnClient_VpnLocationServerCount_FullMethodName  = "/gorpc.GoVpnClient/VpnLocationServerCount"
)

// GoVpnClientClient is the client API for GoVpnClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// govpn 模块，VPN相关服务
type GoVpnClientClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 表的事务操作
	Transaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*Empty, error)
	// VpnTag
	VpnTagAdd(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*VpnTagVo, error)
	VpnTagUpdate(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*Empty, error)
	VpnTagDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	VpnTagGet(ctx context.Context, in *VpnTagGetReq, opts ...grpc.CallOption) (*VpnTagVo, error)
	VpnTagList(ctx context.Context, in *VpnTagListReq, opts ...grpc.CallOption) (*VpnTagListResp, error)
	// VpnGroup
	VpnGroupAdd(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*VpnGroupVo, error)
	VpnGroupUpdate(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*Empty, error)
	VpnGroupDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	// rpc VpnGroupGet(VpnGroupGetReq) returns (VpnGroupVo);
	VpnGroupList(ctx context.Context, in *VpnGroupListReq, opts ...grpc.CallOption) (*VpnGroupListResp, error)
	// VpnGroupTag
	VpnGroupTagAdd(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error)
	VpnGroupTagUpdate(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*Empty, error)
	VpnGroupTagDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	VpnGroupTagGet(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error)
	VpnGroupTagList(ctx context.Context, in *VpnGroupTagListReq, opts ...grpc.CallOption) (*VpnGroupTagListResp, error)
	// VpnLocation
	VpnLocationAdd(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*VpnLocationVo, error)
	VpnLocationUpdate(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*Empty, error)
	VpnLocationDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	VpnLocationGet(ctx context.Context, in *VpnLocationGetReq, opts ...grpc.CallOption) (*VpnLocationVo, error)
	VpnLocationList(ctx context.Context, in *VpnLocationListReq, opts ...grpc.CallOption) (*VpnLocationListResp, error)
	// VpnServer
	VpnServerAdd(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*VpnServerVo, error)
	VpnServerUpdate(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*Empty, error)
	VpnServerDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	VpnServerGet(ctx context.Context, in *VpnServerVo, opts ...grpc.CallOption) (*VpnServerVo, error)
	VpnServerList(ctx context.Context, in *VpnServerListReq, opts ...grpc.CallOption) (*VpnServerListResp, error)
	// VpnServerLocation
	VpnServerLocationAdd(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error)
	VpnServerLocationUpdate(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*Empty, error)
	VpnServerLocationDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error)
	VpnServerLocationGet(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error)
	VpnServerLocationList(ctx context.Context, in *VpnServerLocationListReq, opts ...grpc.CallOption) (*VpnServerLocationListResp, error)
	// VpnLocationServerCount
	VpnLocationServerCount(ctx context.Context, in *VpnLocationServerCountReq, opts ...grpc.CallOption) (*VpnLocationServerCountResp, error)
}

type goVpnClientClient struct {
	cc grpc.ClientConnInterface
}

func NewGoVpnClientClient(cc grpc.ClientConnInterface) GoVpnClientClient {
	return &goVpnClientClient{cc}
}

func (c *goVpnClientClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, GoVpnClient_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) Transaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_Transaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagAdd(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*VpnTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagUpdate(ctx context.Context, in *VpnTagVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagGet(ctx context.Context, in *VpnTagGetReq, opts ...grpc.CallOption) (*VpnTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnTagList(ctx context.Context, in *VpnTagListReq, opts ...grpc.CallOption) (*VpnTagListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnTagListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnTagList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupAdd(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*VpnGroupVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupUpdate(ctx context.Context, in *VpnGroupAddReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupList(ctx context.Context, in *VpnGroupListReq, opts ...grpc.CallOption) (*VpnGroupListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagAdd(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagUpdate(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagGet(ctx context.Context, in *VpnGroupTagVo, opts ...grpc.CallOption) (*VpnGroupTagVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupTagVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnGroupTagList(ctx context.Context, in *VpnGroupTagListReq, opts ...grpc.CallOption) (*VpnGroupTagListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnGroupTagListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnGroupTagList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationAdd(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*VpnLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationUpdate(ctx context.Context, in *VpnLocationVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationGet(ctx context.Context, in *VpnLocationGetReq, opts ...grpc.CallOption) (*VpnLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationList(ctx context.Context, in *VpnLocationListReq, opts ...grpc.CallOption) (*VpnLocationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerAdd(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*VpnServerVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerUpdate(ctx context.Context, in *VpnServerAddReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerGet(ctx context.Context, in *VpnServerVo, opts ...grpc.CallOption) (*VpnServerVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerList(ctx context.Context, in *VpnServerListReq, opts ...grpc.CallOption) (*VpnServerListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationAdd(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationUpdate(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationDel(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationGet(ctx context.Context, in *VpnServerLocationVo, opts ...grpc.CallOption) (*VpnServerLocationVo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerLocationVo)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnServerLocationList(ctx context.Context, in *VpnServerLocationListReq, opts ...grpc.CallOption) (*VpnServerLocationListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnServerLocationListResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnServerLocationList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goVpnClientClient) VpnLocationServerCount(ctx context.Context, in *VpnLocationServerCountReq, opts ...grpc.CallOption) (*VpnLocationServerCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VpnLocationServerCountResp)
	err := c.cc.Invoke(ctx, GoVpnClient_VpnLocationServerCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoVpnClientServer is the server API for GoVpnClient service.
// All implementations must embed UnimplementedGoVpnClientServer
// for forward compatibility.
//
// govpn 模块，VPN相关服务
type GoVpnClientServer interface {
	Ping(context.Context, *Request) (*Response, error)
	// 表的事务操作
	Transaction(context.Context, *TransactionReq) (*Empty, error)
	// VpnTag
	VpnTagAdd(context.Context, *VpnTagVo) (*VpnTagVo, error)
	VpnTagUpdate(context.Context, *VpnTagVo) (*Empty, error)
	VpnTagDel(context.Context, *Ids) (*Empty, error)
	VpnTagGet(context.Context, *VpnTagGetReq) (*VpnTagVo, error)
	VpnTagList(context.Context, *VpnTagListReq) (*VpnTagListResp, error)
	// VpnGroup
	VpnGroupAdd(context.Context, *VpnGroupAddReq) (*VpnGroupVo, error)
	VpnGroupUpdate(context.Context, *VpnGroupAddReq) (*Empty, error)
	VpnGroupDel(context.Context, *Ids) (*Empty, error)
	// rpc VpnGroupGet(VpnGroupGetReq) returns (VpnGroupVo);
	VpnGroupList(context.Context, *VpnGroupListReq) (*VpnGroupListResp, error)
	// VpnGroupTag
	VpnGroupTagAdd(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error)
	VpnGroupTagUpdate(context.Context, *VpnGroupTagVo) (*Empty, error)
	VpnGroupTagDel(context.Context, *Ids) (*Empty, error)
	VpnGroupTagGet(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error)
	VpnGroupTagList(context.Context, *VpnGroupTagListReq) (*VpnGroupTagListResp, error)
	// VpnLocation
	VpnLocationAdd(context.Context, *VpnLocationVo) (*VpnLocationVo, error)
	VpnLocationUpdate(context.Context, *VpnLocationVo) (*Empty, error)
	VpnLocationDel(context.Context, *Ids) (*Empty, error)
	VpnLocationGet(context.Context, *VpnLocationGetReq) (*VpnLocationVo, error)
	VpnLocationList(context.Context, *VpnLocationListReq) (*VpnLocationListResp, error)
	// VpnServer
	VpnServerAdd(context.Context, *VpnServerAddReq) (*VpnServerVo, error)
	VpnServerUpdate(context.Context, *VpnServerAddReq) (*Empty, error)
	VpnServerDel(context.Context, *Ids) (*Empty, error)
	VpnServerGet(context.Context, *VpnServerVo) (*VpnServerVo, error)
	VpnServerList(context.Context, *VpnServerListReq) (*VpnServerListResp, error)
	// VpnServerLocation
	VpnServerLocationAdd(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error)
	VpnServerLocationUpdate(context.Context, *VpnServerLocationVo) (*Empty, error)
	VpnServerLocationDel(context.Context, *Ids) (*Empty, error)
	VpnServerLocationGet(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error)
	VpnServerLocationList(context.Context, *VpnServerLocationListReq) (*VpnServerLocationListResp, error)
	// VpnLocationServerCount
	VpnLocationServerCount(context.Context, *VpnLocationServerCountReq) (*VpnLocationServerCountResp, error)
	mustEmbedUnimplementedGoVpnClientServer()
}

// UnimplementedGoVpnClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoVpnClientServer struct{}

func (UnimplementedGoVpnClientServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoVpnClientServer) Transaction(context.Context, *TransactionReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagAdd(context.Context, *VpnTagVo) (*VpnTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagUpdate(context.Context, *VpnTagVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagGet(context.Context, *VpnTagGetReq) (*VpnTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnTagList(context.Context, *VpnTagListReq) (*VpnTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnTagList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupAdd(context.Context, *VpnGroupAddReq) (*VpnGroupVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupUpdate(context.Context, *VpnGroupAddReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupList(context.Context, *VpnGroupListReq) (*VpnGroupListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagAdd(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagUpdate(context.Context, *VpnGroupTagVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagGet(context.Context, *VpnGroupTagVo) (*VpnGroupTagVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnGroupTagList(context.Context, *VpnGroupTagListReq) (*VpnGroupTagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnGroupTagList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationAdd(context.Context, *VpnLocationVo) (*VpnLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationUpdate(context.Context, *VpnLocationVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationGet(context.Context, *VpnLocationGetReq) (*VpnLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationList(context.Context, *VpnLocationListReq) (*VpnLocationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerAdd(context.Context, *VpnServerAddReq) (*VpnServerVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerUpdate(context.Context, *VpnServerAddReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerGet(context.Context, *VpnServerVo) (*VpnServerVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerList(context.Context, *VpnServerListReq) (*VpnServerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationAdd(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationAdd not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationUpdate(context.Context, *VpnServerLocationVo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationUpdate not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationDel(context.Context, *Ids) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationDel not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationGet(context.Context, *VpnServerLocationVo) (*VpnServerLocationVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationGet not implemented")
}
func (UnimplementedGoVpnClientServer) VpnServerLocationList(context.Context, *VpnServerLocationListReq) (*VpnServerLocationListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnServerLocationList not implemented")
}
func (UnimplementedGoVpnClientServer) VpnLocationServerCount(context.Context, *VpnLocationServerCountReq) (*VpnLocationServerCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VpnLocationServerCount not implemented")
}
func (UnimplementedGoVpnClientServer) mustEmbedUnimplementedGoVpnClientServer() {}
func (UnimplementedGoVpnClientServer) testEmbeddedByValue()                     {}

// UnsafeGoVpnClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoVpnClientServer will
// result in compilation errors.
type UnsafeGoVpnClientServer interface {
	mustEmbedUnimplementedGoVpnClientServer()
}

func RegisterGoVpnClientServer(s grpc.ServiceRegistrar, srv GoVpnClientServer) {
	// If the following call pancis, it indicates UnimplementedGoVpnClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoVpnClient_ServiceDesc, srv)
}

func _GoVpnClient_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_Transaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).Transaction(ctx, req.(*TransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagAdd(ctx, req.(*VpnTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagUpdate(ctx, req.(*VpnTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagGet(ctx, req.(*VpnTagGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnTagList(ctx, req.(*VpnTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupAdd(ctx, req.(*VpnGroupAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupUpdate(ctx, req.(*VpnGroupAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupList(ctx, req.(*VpnGroupListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagAdd(ctx, req.(*VpnGroupTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagUpdate(ctx, req.(*VpnGroupTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagGet(ctx, req.(*VpnGroupTagVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnGroupTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnGroupTagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnGroupTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnGroupTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnGroupTagList(ctx, req.(*VpnGroupTagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationAdd(ctx, req.(*VpnLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationUpdate(ctx, req.(*VpnLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationGet(ctx, req.(*VpnLocationGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationList(ctx, req.(*VpnLocationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerAdd(ctx, req.(*VpnServerAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerUpdate(ctx, req.(*VpnServerAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerGet(ctx, req.(*VpnServerVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerList(ctx, req.(*VpnServerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationAdd(ctx, req.(*VpnServerLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationUpdate(ctx, req.(*VpnServerLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationDel(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationVo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationGet(ctx, req.(*VpnServerLocationVo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnServerLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnServerLocationListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnServerLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnServerLocationList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnServerLocationList(ctx, req.(*VpnServerLocationListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoVpnClient_VpnLocationServerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpnLocationServerCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoVpnClientServer).VpnLocationServerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoVpnClient_VpnLocationServerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoVpnClientServer).VpnLocationServerCount(ctx, req.(*VpnLocationServerCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoVpnClient_ServiceDesc is the grpc.ServiceDesc for GoVpnClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoVpnClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gorpc.GoVpnClient",
	HandlerType: (*GoVpnClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoVpnClient_Ping_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _GoVpnClient_Transaction_Handler,
		},
		{
			MethodName: "VpnTagAdd",
			Handler:    _GoVpnClient_VpnTagAdd_Handler,
		},
		{
			MethodName: "VpnTagUpdate",
			Handler:    _GoVpnClient_VpnTagUpdate_Handler,
		},
		{
			MethodName: "VpnTagDel",
			Handler:    _GoVpnClient_VpnTagDel_Handler,
		},
		{
			MethodName: "VpnTagGet",
			Handler:    _GoVpnClient_VpnTagGet_Handler,
		},
		{
			MethodName: "VpnTagList",
			Handler:    _GoVpnClient_VpnTagList_Handler,
		},
		{
			MethodName: "VpnGroupAdd",
			Handler:    _GoVpnClient_VpnGroupAdd_Handler,
		},
		{
			MethodName: "VpnGroupUpdate",
			Handler:    _GoVpnClient_VpnGroupUpdate_Handler,
		},
		{
			MethodName: "VpnGroupDel",
			Handler:    _GoVpnClient_VpnGroupDel_Handler,
		},
		{
			MethodName: "VpnGroupList",
			Handler:    _GoVpnClient_VpnGroupList_Handler,
		},
		{
			MethodName: "VpnGroupTagAdd",
			Handler:    _GoVpnClient_VpnGroupTagAdd_Handler,
		},
		{
			MethodName: "VpnGroupTagUpdate",
			Handler:    _GoVpnClient_VpnGroupTagUpdate_Handler,
		},
		{
			MethodName: "VpnGroupTagDel",
			Handler:    _GoVpnClient_VpnGroupTagDel_Handler,
		},
		{
			MethodName: "VpnGroupTagGet",
			Handler:    _GoVpnClient_VpnGroupTagGet_Handler,
		},
		{
			MethodName: "VpnGroupTagList",
			Handler:    _GoVpnClient_VpnGroupTagList_Handler,
		},
		{
			MethodName: "VpnLocationAdd",
			Handler:    _GoVpnClient_VpnLocationAdd_Handler,
		},
		{
			MethodName: "VpnLocationUpdate",
			Handler:    _GoVpnClient_VpnLocationUpdate_Handler,
		},
		{
			MethodName: "VpnLocationDel",
			Handler:    _GoVpnClient_VpnLocationDel_Handler,
		},
		{
			MethodName: "VpnLocationGet",
			Handler:    _GoVpnClient_VpnLocationGet_Handler,
		},
		{
			MethodName: "VpnLocationList",
			Handler:    _GoVpnClient_VpnLocationList_Handler,
		},
		{
			MethodName: "VpnServerAdd",
			Handler:    _GoVpnClient_VpnServerAdd_Handler,
		},
		{
			MethodName: "VpnServerUpdate",
			Handler:    _GoVpnClient_VpnServerUpdate_Handler,
		},
		{
			MethodName: "VpnServerDel",
			Handler:    _GoVpnClient_VpnServerDel_Handler,
		},
		{
			MethodName: "VpnServerGet",
			Handler:    _GoVpnClient_VpnServerGet_Handler,
		},
		{
			MethodName: "VpnServerList",
			Handler:    _GoVpnClient_VpnServerList_Handler,
		},
		{
			MethodName: "VpnServerLocationAdd",
			Handler:    _GoVpnClient_VpnServerLocationAdd_Handler,
		},
		{
			MethodName: "VpnServerLocationUpdate",
			Handler:    _GoVpnClient_VpnServerLocationUpdate_Handler,
		},
		{
			MethodName: "VpnServerLocationDel",
			Handler:    _GoVpnClient_VpnServerLocationDel_Handler,
		},
		{
			MethodName: "VpnServerLocationGet",
			Handler:    _GoVpnClient_VpnServerLocationGet_Handler,
		},
		{
			MethodName: "VpnServerLocationList",
			Handler:    _GoVpnClient_VpnServerLocationList_Handler,
		},
		{
			MethodName: "VpnLocationServerCount",
			Handler:    _GoVpnClient_VpnLocationServerCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gorpc.proto",
}
